"use strict";(self.webpackChunkstrworld=self.webpackChunkstrworld||[]).push([[687],{687:(t,e,i)=>{i.d(e,{AO:()=>o,Hb:()=>M,_f:()=>y,q3:()=>as,uT:()=>R,xu:()=>C});class s{constructor(t){void 0===t&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){void 0===t&&(t=new o);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){void 0===e&&(e=new o);const i=this.elements,s=t.x,n=t.y,r=t.z;return e.x=i[0]*s+i[1]*n+i[2]*r,e.y=i[3]*s+i[4]*n+i[5]*r,e.z=i[6]*s+i[7]*n+i[8]*r,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){void 0===e&&(e=new s);const i=this.elements,n=t.elements,o=e.elements,r=i[0],a=i[1],l=i[2],h=i[3],c=i[4],u=i[5],d=i[6],p=i[7],y=i[8],v=n[0],m=n[1],w=n[2],f=n[3],g=n[4],x=n[5],b=n[6],E=n[7],z=n[8];return o[0]=r*v+a*f+l*b,o[1]=r*m+a*g+l*E,o[2]=r*w+a*x+l*z,o[3]=h*v+c*f+u*b,o[4]=h*m+c*g+u*E,o[5]=h*w+c*x+u*z,o[6]=d*v+p*f+y*b,o[7]=d*m+p*g+y*E,o[8]=d*w+p*x+y*z,e}scale(t,e){void 0===e&&(e=new s);const i=this.elements,n=e.elements;for(let e=0;3!==e;e++)n[3*e+0]=t.x*i[3*e+0],n[3*e+1]=t.y*i[3*e+1],n[3*e+2]=t.z*i[3*e+2];return e}solve(t,e){void 0===e&&(e=new o);const i=[];let s,n;for(s=0;s<12;s++)i.push(0);for(s=0;s<3;s++)for(n=0;n<3;n++)i[s+4*n]=this.elements[s+3*n];i[3]=t.x,i[7]=t.y,i[11]=t.z;let r=3;const a=r;let l;let h;do{if(s=a-r,0===i[s+4*s])for(n=s+1;n<a;n++)if(0!==i[s+4*n]){l=4;do{h=4-l,i[h+4*s]+=i[h+4*n]}while(--l);break}if(0!==i[s+4*s])for(n=s+1;n<a;n++){const t=i[s+4*n]/i[s+4*s];l=4;do{h=4-l,i[h+4*n]=h<=s?0:i[h+4*n]-i[h+4*s]*t}while(--l)}}while(--r);if(e.z=i[11]/i[10],e.y=(i[7]-i[6]*e.z)/i[5],e.x=(i[3]-i[2]*e.z-i[1]*e.y)/i[0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,i){if(void 0===i)return this.elements[e+3*t];this.elements[e+3*t]=i}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";for(let e=0;e<9;e++)t+=this.elements[e]+",";return t}reverse(t){void 0===t&&(t=new s);const e=n;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)e[i+6*o]=this.elements[i+3*o];e[3]=1,e[9]=0,e[15]=0,e[4]=0,e[10]=1,e[16]=0,e[5]=0,e[11]=0,e[17]=1;let r=3;const a=r;let l;let h;do{if(i=a-r,0===e[i+6*i])for(o=i+1;o<a;o++)if(0!==e[i+6*o]){l=6;do{h=6-l,e[h+6*i]+=e[h+6*o]}while(--l);break}if(0!==e[i+6*i])for(o=i+1;o<a;o++){const t=e[i+6*o]/e[i+6*i];l=6;do{h=6-l,e[h+6*o]=h<=i?0:e[h+6*o]-e[h+6*i]*t}while(--l)}}while(--r);i=2;do{o=i-1;do{const t=e[i+6*o]/e[i+6*i];l=6;do{h=6-l,e[h+6*o]=e[h+6*o]-e[h+6*i]*t}while(--l)}while(o--)}while(--i);i=2;do{const t=1/e[i+6*i];l=6;do{h=6-l,e[h+6*i]=e[h+6*i]*t}while(--l)}while(i--);i=2;do{o=2;do{if(h=e[3+o+6*i],isNaN(h)||h===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,h)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,i=t.y,s=t.z,n=t.w,o=e+e,r=i+i,a=s+s,l=e*o,h=e*r,c=e*a,u=i*r,d=i*a,p=s*a,y=n*o,v=n*r,m=n*a,w=this.elements;return w[0]=1-(u+p),w[1]=h-m,w[2]=c+v,w[3]=h+m,w[4]=1-(l+p),w[5]=d-y,w[6]=c-v,w[7]=d+y,w[8]=1-(l+u),this}transpose(t){void 0===t&&(t=new s);const e=this.elements,i=t.elements;let n;return i[0]=e[0],i[4]=e[4],i[8]=e[8],n=e[1],i[1]=e[3],i[3]=n,n=e[2],i[2]=e[6],i[6]=n,n=e[5],i[5]=e[7],i[7]=n,t}}const n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class o{constructor(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),this.x=t,this.y=e,this.z=i}cross(t,e){void 0===e&&(e=new o);const i=t.x,s=t.y,n=t.z,r=this.x,a=this.y,l=this.z;return e.x=a*n-l*s,e.y=l*i-r*n,e.z=r*s-a*i,e}set(t,e,i){return this.x=t,this.y=e,this.z=i,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new o(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new o(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new s([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,i=this.z,s=Math.sqrt(t*t+e*e+i*i);if(s>0){const t=1/s;this.x*=t,this.y*=t,this.z*=t}else this.x=0,this.y=0,this.z=0;return s}unit(t){void 0===t&&(t=new o);const e=this.x,i=this.y,s=this.z;let n=Math.sqrt(e*e+i*i+s*s);return n>0?(n=1/n,t.x=e*n,t.y=i*n,t.z=s*n):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,i=this.z;return Math.sqrt(t*t+e*e+i*i)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,i=this.y,s=this.z,n=t.x,o=t.y,r=t.z;return Math.sqrt((n-e)*(n-e)+(o-i)*(o-i)+(r-s)*(r-s))}distanceSquared(t){const e=this.x,i=this.y,s=this.z,n=t.x,o=t.y,r=t.z;return(n-e)*(n-e)+(o-i)*(o-i)+(r-s)*(r-s)}scale(t,e){void 0===e&&(e=new o);const i=this.x,s=this.y,n=this.z;return e.x=t*i,e.y=t*s,e.z=t*n,e}vmul(t,e){return void 0===e&&(e=new o),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,i){return void 0===i&&(i=new o),i.x=this.x+t*e.x,i.y=this.y+t*e.y,i.z=this.z+t*e.z,i}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t){return void 0===t&&(t=new o),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const i=this.length();if(i>0){const s=r,n=1/i;s.set(this.x*n,this.y*n,this.z*n);const o=a;Math.abs(s.x)<.9?(o.set(1,0,0),s.cross(o,t)):(o.set(0,1,0),s.cross(o,t)),s.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,i){const s=this.x,n=this.y,o=this.z;i.x=s+(t.x-s)*e,i.y=n+(t.y-n)*e,i.z=o+(t.z-o)*e}almostEquals(t,e){return void 0===e&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return void 0===t&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(l),l.almostEquals(t,e)}clone(){return new o(this.x,this.y,this.z)}}o.ZERO=new o(0,0,0),o.UNIT_X=new o(1,0,0),o.UNIT_Y=new o(0,1,0),o.UNIT_Z=new o(0,0,1);const r=new o,a=new o,l=new o;class h{constructor(t){void 0===t&&(t={}),this.lowerBound=new o,this.upperBound=new o,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,i,s){const n=this.lowerBound,o=this.upperBound,r=i;n.copy(t[0]),r&&r.vmult(n,n),o.copy(n);for(let e=1;e<t.length;e++){let i=t[e];r&&(r.vmult(i,c),i=c),i.x>o.x&&(o.x=i.x),i.x<n.x&&(n.x=i.x),i.y>o.y&&(o.y=i.y),i.y<n.y&&(n.y=i.y),i.z>o.z&&(o.z=i.z),i.z<n.z&&(n.z=i.z)}return e&&(e.vadd(n,n),e.vadd(o,o)),s&&(n.x-=s,n.y-=s,n.z-=s,o.x+=s,o.y+=s,o.z+=s),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new h).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,i=this.upperBound,s=t.lowerBound,n=t.upperBound,o=s.x<=i.x&&i.x<=n.x||e.x<=n.x&&n.x<=i.x,r=s.y<=i.y&&i.y<=n.y||e.y<=n.y&&n.y<=i.y,a=s.z<=i.z&&i.z<=n.z||e.z<=n.z&&n.z<=i.z;return o&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,i=this.upperBound,s=t.lowerBound,n=t.upperBound;return e.x<=s.x&&i.x>=n.x&&e.y<=s.y&&i.y>=n.y&&e.z<=s.z&&i.z>=n.z}getCorners(t,e,i,s,n,o,r,a){const l=this.lowerBound,h=this.upperBound;t.copy(l),e.set(h.x,l.y,l.z),i.set(h.x,h.y,l.z),s.set(l.x,h.y,h.z),n.set(h.x,l.y,h.z),o.set(l.x,h.y,l.z),r.set(l.x,l.y,h.z),a.copy(h)}toLocalFrame(t,e){const i=u,s=i[0],n=i[1],o=i[2],r=i[3],a=i[4],l=i[5],h=i[6],c=i[7];this.getCorners(s,n,o,r,a,l,h,c);for(let e=0;8!==e;e++){const s=i[e];t.pointToLocal(s,s)}return e.setFromPoints(i)}toWorldFrame(t,e){const i=u,s=i[0],n=i[1],o=i[2],r=i[3],a=i[4],l=i[5],h=i[6],c=i[7];this.getCorners(s,n,o,r,a,l,h,c);for(let e=0;8!==e;e++){const s=i[e];t.pointToWorld(s,s)}return e.setFromPoints(i)}overlapsRay(t){const{direction:e,from:i}=t,s=1/e.x,n=1/e.y,o=1/e.z,r=(this.lowerBound.x-i.x)*s,a=(this.upperBound.x-i.x)*s,l=(this.lowerBound.y-i.y)*n,h=(this.upperBound.y-i.y)*n,c=(this.lowerBound.z-i.z)*o,u=(this.upperBound.z-i.z)*o,d=Math.max(Math.max(Math.min(r,a),Math.min(l,h)),Math.min(c,u)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,h)),Math.max(c,u));return!(p<0)&&!(d>p)}}const c=new o,u=[new o,new o,new o,new o,new o,new o,new o,new o];class d{constructor(){this.matrix=[]}get(t,e){let{index:i}=t,{index:s}=e;if(s>i){const t=s;s=i,i=t}return this.matrix[(i*(i+1)>>1)+s-1]}set(t,e,i){let{index:s}=t,{index:n}=e;if(n>s){const t=n;n=s,s=t}this.matrix[(s*(s+1)>>1)+n-1]=i?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class p{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const i=this._listeners;return void 0===i[t]&&(i[t]=[]),i[t].includes(e)||i[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const i=this._listeners;return!(void 0===i[t]||!i[t].includes(e))}hasAnyEventListener(t){if(void 0===this._listeners)return!1;return void 0!==this._listeners[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const i=this._listeners;if(void 0===i[t])return this;const s=i[t].indexOf(e);return-1!==s&&i[t].splice(s,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const e=this._listeners[t.type];if(void 0!==e){t.target=this;for(let i=0,s=e.length;i<s;i++)e[i].call(this,t)}return this}}class y{constructor(t,e,i,s){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===s&&(s=1),this.x=t,this.y=e,this.z=i,this.w=s}set(t,e,i,s){return this.x=t,this.y=e,this.z=i,this.w=s,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const i=Math.sin(.5*e);return this.x=t.x*i,this.y=t.y*i,this.z=t.z*i,this.w=Math.cos(.5*e),this}toAxisAngle(t){void 0===t&&(t=new o),this.normalize();const e=2*Math.acos(this.w),i=Math.sqrt(1-this.w*this.w);return i<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/i,t.y=this.y/i,t.z=this.z/i),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const e=v,i=m;t.tangents(e,i),this.setFromAxisAngle(e,Math.PI)}else{const i=t.cross(e);this.x=i.x,this.y=i.y,this.z=i.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){void 0===e&&(e=new y);const i=this.x,s=this.y,n=this.z,o=this.w,r=t.x,a=t.y,l=t.z,h=t.w;return e.x=i*h+o*r+s*l-n*a,e.y=s*h+o*a+n*r-i*l,e.z=n*h+o*l+i*a-s*r,e.w=o*h-i*r-s*a-n*l,e}inverse(t){void 0===t&&(t=new y);const e=this.x,i=this.y,s=this.z,n=this.w;this.conjugate(t);const o=1/(e*e+i*i+s*s+n*n);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return void 0===t&&(t=new y),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){void 0===e&&(e=new o);const i=t.x,s=t.y,n=t.z,r=this.x,a=this.y,l=this.z,h=this.w,c=h*i+a*n-l*s,u=h*s+l*i-r*n,d=h*n+r*s-a*i,p=-r*i-a*s-l*n;return e.x=c*h+p*-r+u*-l-d*-a,e.y=u*h+p*-a+d*-r-c*-l,e.z=d*h+p*-l+c*-a-u*-r,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){let i,s,n;void 0===e&&(e="YZX");const o=this.x,r=this.y,a=this.z,l=this.w;if("YZX"!==e)throw new Error(`Euler order ${e} not supported yet.`);{const t=o*r+a*l;if(t>.499&&(i=2*Math.atan2(o,l),s=Math.PI/2,n=0),t<-.499&&(i=-2*Math.atan2(o,l),s=-Math.PI/2,n=0),void 0===i){const e=o*o,h=r*r,c=a*a;i=Math.atan2(2*r*l-2*o*a,1-2*h-2*c),s=Math.asin(2*t),n=Math.atan2(2*o*l-2*r*a,1-2*e-2*c)}}t.y=i,t.z=s,t.x=n}setFromEuler(t,e,i,s){void 0===s&&(s="XYZ");const n=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(i/2),a=Math.sin(t/2),l=Math.sin(e/2),h=Math.sin(i/2);return"XYZ"===s?(this.x=a*o*r+n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r-a*l*h):"YXZ"===s?(this.x=a*o*r+n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r+a*l*h):"ZXY"===s?(this.x=a*o*r-n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r-a*l*h):"ZYX"===s?(this.x=a*o*r-n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r+a*l*h):"YZX"===s?(this.x=a*o*r+n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r-a*l*h):"XZY"===s&&(this.x=a*o*r-n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r+a*l*h),this}clone(){return new y(this.x,this.y,this.z,this.w)}slerp(t,e,i){void 0===i&&(i=new y);const s=this.x,n=this.y,o=this.z,r=this.w;let a,l,h,c,u,d=t.x,p=t.y,v=t.z,m=t.w;return l=s*d+n*p+o*v+r*m,l<0&&(l=-l,d=-d,p=-p,v=-v,m=-m),1-l>1e-6?(a=Math.acos(l),h=Math.sin(a),c=Math.sin((1-e)*a)/h,u=Math.sin(e*a)/h):(c=1-e,u=e),i.x=c*s+u*d,i.y=c*n+u*p,i.z=c*o+u*v,i.w=c*r+u*m,i}integrate(t,e,i,s){void 0===s&&(s=new y);const n=t.x*i.x,o=t.y*i.y,r=t.z*i.z,a=this.x,l=this.y,h=this.z,c=this.w,u=.5*e;return s.x+=u*(n*c+o*h-r*l),s.y+=u*(o*c+r*a-n*h),s.z+=u*(r*c+n*l-o*a),s.w+=u*(-n*a-o*l-r*h),s}}const v=new o,m=new o;class w{constructor(t){void 0===t&&(t={}),this.id=w.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=!t.collisionResponse||t.collisionResponse,this.collisionFilterGroup=void 0!==t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask=void 0!==t.collisionFilterMask?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,i,s){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}w.idCounter=0,w.types={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class f{constructor(t){void 0===t&&(t={}),this.position=new o,this.quaternion=new y,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return f.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return f.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return void 0===e&&(e=new o),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,i,s){return void 0===s&&(s=new o),i.vsub(t,s),e.conjugate(g),g.vmult(s,s),s}static pointToWorldFrame(t,e,i,s){return void 0===s&&(s=new o),e.vmult(i,s),s.vadd(t,s),s}static vectorToWorldFrame(t,e,i){return void 0===i&&(i=new o),t.vmult(e,i),i}static vectorToLocalFrame(t,e,i,s){return void 0===s&&(s=new o),e.w*=-1,e.vmult(i,s),e.w*=-1,s}}const g=new y;class x extends w{constructor(t){void 0===t&&(t={});const{vertices:e=[],faces:i=[],normals:s=[],axes:n,boundingSphereRadius:o}=t;super({type:w.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=i,this.faceNormals=s,0===this.faceNormals.length&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=n?n.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,i=this.uniqueEdges;i.length=0;const s=new o;for(let n=0;n!==t.length;n++){const o=t[n],r=o.length;for(let t=0;t!==r;t++){const n=(t+1)%r;e[o[t]].vsub(e[o[n]],s),s.normalize();let a=!1;for(let t=0;t!==i.length;t++)if(i[t].almostEquals(s)||i[t].almostEquals(s)){a=!0;break}a||i.push(s.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let e=0;e<this.faces[t].length;e++)if(!this.vertices[this.faces[t][e]])throw new Error(`Vertex ${this.faces[t][e]} not found!`);const e=this.faceNormals[t]||new o;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const i=this.vertices[this.faces[t][0]];if(e.dot(i)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let e=0;e<this.faces[t].length;e++)console.warn(`.vertices[${this.faces[t][e]}] = Vec3(${this.vertices[this.faces[t][e]].toString()})`)}}}getFaceNormal(t,e){const i=this.faces[t],s=this.vertices[i[0]],n=this.vertices[i[1]],o=this.vertices[i[2]];x.computeNormal(s,n,o,e)}static computeNormal(t,e,i,s){const n=new o,r=new o;e.vsub(t,r),i.vsub(e,n),n.cross(r,s),s.isZero()||s.normalize()}clipAgainstHull(t,e,i,s,n,r,a,l,h){const c=new o;let u=-1,d=-Number.MAX_VALUE;for(let t=0;t<i.faces.length;t++){c.copy(i.faceNormals[t]),n.vmult(c,c);const e=c.dot(r);e>d&&(d=e,u=t)}const p=[];for(let t=0;t<i.faces[u].length;t++){const e=i.vertices[i.faces[u][t]],r=new o;r.copy(e),n.vmult(r,r),s.vadd(r,r),p.push(r)}u>=0&&this.clipFaceAgainstHull(r,t,e,p,a,l,h)}findSeparatingAxis(t,e,i,s,n,r,a,l){const h=new o,c=new o,u=new o,d=new o,p=new o,y=new o;let v=Number.MAX_VALUE;const m=this;if(m.uniqueAxes)for(let o=0;o!==m.uniqueAxes.length;o++){i.vmult(m.uniqueAxes[o],h);const a=m.testSepAxis(h,t,e,i,s,n);if(!1===a)return!1;a<v&&(v=a,r.copy(h))}else{const o=a?a.length:m.faces.length;for(let l=0;l<o;l++){const o=a?a[l]:l;h.copy(m.faceNormals[o]),i.vmult(h,h);const c=m.testSepAxis(h,t,e,i,s,n);if(!1===c)return!1;c<v&&(v=c,r.copy(h))}}if(t.uniqueAxes)for(let o=0;o!==t.uniqueAxes.length;o++){n.vmult(t.uniqueAxes[o],c);const a=m.testSepAxis(c,t,e,i,s,n);if(!1===a)return!1;a<v&&(v=a,r.copy(c))}else{const o=l?l.length:t.faces.length;for(let a=0;a<o;a++){const o=l?l[a]:a;c.copy(t.faceNormals[o]),n.vmult(c,c);const h=m.testSepAxis(c,t,e,i,s,n);if(!1===h)return!1;h<v&&(v=h,r.copy(c))}}for(let o=0;o!==m.uniqueEdges.length;o++){i.vmult(m.uniqueEdges[o],d);for(let o=0;o!==t.uniqueEdges.length;o++)if(n.vmult(t.uniqueEdges[o],p),d.cross(p,y),!y.almostZero()){y.normalize();const o=m.testSepAxis(y,t,e,i,s,n);if(!1===o)return!1;o<v&&(v=o,r.copy(y))}}return s.vsub(e,u),u.dot(r)>0&&r.negate(r),!0}testSepAxis(t,e,i,s,n,o){x.project(this,t,i,s,b),x.project(e,t,n,o,E);const r=b[0],a=b[1],l=E[0],h=E[1];if(r<h||l<a)return!1;const c=r-h,u=l-a;return c<u?c:u}calculateLocalInertia(t,e){const i=new o,s=new o;this.computeLocalAABB(s,i);const n=i.x-s.x,r=i.y-s.y,a=i.z-s.z;e.x=1/12*t*(2*r*2*r+2*a*2*a),e.y=1/12*t*(2*n*2*n+2*a*2*a),e.z=1/12*t*(2*r*2*r+2*n*2*n)}getPlaneConstantOfFace(t){const e=this.faces[t],i=this.faceNormals[t],s=this.vertices[e[0]];return-i.dot(s)}clipFaceAgainstHull(t,e,i,s,n,r,a){const l=new o,h=new o,c=new o,u=new o,d=new o,p=new o,y=new o,v=new o,m=this,w=s,f=[];let g=-1,x=Number.MAX_VALUE;for(let e=0;e<m.faces.length;e++){l.copy(m.faceNormals[e]),i.vmult(l,l);const s=l.dot(t);s<x&&(x=s,g=e)}if(g<0)return;const b=m.faces[g];b.connectedFaces=[];for(let t=0;t<m.faces.length;t++)for(let e=0;e<m.faces[t].length;e++)-1!==b.indexOf(m.faces[t][e])&&t!==g&&-1===b.connectedFaces.indexOf(t)&&b.connectedFaces.push(t);const E=b.length;for(let t=0;t<E;t++){const s=m.vertices[b[t]],n=m.vertices[b[(t+1)%E]];s.vsub(n,h),c.copy(h),i.vmult(c,c),e.vadd(c,c),u.copy(this.faceNormals[g]),i.vmult(u,u),e.vadd(u,u),c.cross(u,d),d.negate(d),p.copy(s),i.vmult(p,p),e.vadd(p,p);const o=b.connectedFaces[t];y.copy(this.faceNormals[o]);const r=this.getPlaneConstantOfFace(o);v.copy(y),i.vmult(v,v);const a=r-v.dot(e);for(this.clipFaceAgainstPlane(w,f,v,a);w.length;)w.shift();for(;f.length;)w.push(f.shift())}y.copy(this.faceNormals[g]);const z=this.getPlaneConstantOfFace(g);v.copy(y),i.vmult(v,v);const S=z-v.dot(e);for(let t=0;t<w.length;t++){let e=v.dot(w[t])+S;if(e<=n&&(console.log(`clamped: depth=${e} to minDist=${n}`),e=n),e<=r){const i=w[t];if(e<=1e-6){const t={point:i,normal:v,depth:e};a.push(t)}}}}clipFaceAgainstPlane(t,e,i,s){let n,r;const a=t.length;if(a<2)return e;let l=t[t.length-1],h=t[0];n=i.dot(l)+s;for(let c=0;c<a;c++){if(h=t[c],r=i.dot(h)+s,n<0)if(r<0){const t=new o;t.copy(h),e.push(t)}else{const t=new o;l.lerp(h,n/(n-r),t),e.push(t)}else if(r<0){const t=new o;l.lerp(h,n/(n-r),t),e.push(t),e.push(h)}l=h,n=r}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new o);const i=this.vertices,s=this.worldVertices;for(let n=0;n!==this.vertices.length;n++)e.vmult(i[n],s[n]),t.vadd(s[n],s[n]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const i=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let s=0;s<this.vertices.length;s++){const n=i[s];n.x<t.x?t.x=n.x:n.x>e.x&&(e.x=n.x),n.y<t.y?t.y=n.y:n.y>e.y&&(e.y=n.y),n.z<t.z?t.z=n.z:n.z>e.z&&(e.z=n.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new o);const i=this.faceNormals,s=this.worldFaceNormals;for(let n=0;n!==e;n++)t.vmult(i[n],s[n]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let i=0;i!==e.length;i++){const s=e[i].lengthSquared();s>t&&(t=s)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,i,s){const n=this.vertices;let r,a,l,h,c,u,d=new o;for(let i=0;i<n.length;i++){d.copy(n[i]),e.vmult(d,d),t.vadd(d,d);const s=d;(void 0===r||s.x<r)&&(r=s.x),(void 0===h||s.x>h)&&(h=s.x),(void 0===a||s.y<a)&&(a=s.y),(void 0===c||s.y>c)&&(c=s.y),(void 0===l||s.z<l)&&(l=s.z),(void 0===u||s.z>u)&&(u=s.z)}i.set(r,a,l),s.set(h,c,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){void 0===t&&(t=new o);const e=this.vertices;for(let i=0;i<e.length;i++)t.vadd(e[i],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const i=this.vertices.length,s=this.vertices;if(e){for(let t=0;t<i;t++){const i=s[t];e.vmult(i,i)}for(let t=0;t<this.faceNormals.length;t++){const i=this.faceNormals[t];e.vmult(i,i)}}if(t)for(let e=0;e<i;e++){const i=s[e];i.vadd(t,i)}}pointIsInside(t){const e=this.vertices,i=this.faces,s=this.faceNormals,n=new o;this.getAveragePointLocal(n);for(let r=0;r<this.faces.length;r++){let a=s[r];const l=e[i[r][0]],h=new o;t.vsub(l,h);const c=a.dot(h),u=new o;n.vsub(l,u);const d=a.dot(u);if(c<0&&d>0||c>0&&d<0)return!1}return-1}static project(t,e,i,s,n){const o=t.vertices.length,r=z;let a=0,l=0;const h=S,c=t.vertices;h.setZero(),f.vectorToLocalFrame(i,s,e,r),f.pointToLocalFrame(i,s,h,h);const u=h.dot(r);l=a=c[0].dot(r);for(let t=1;t<o;t++){const e=c[t].dot(r);e>a&&(a=e),e<l&&(l=e)}if(l-=u,a-=u,l>a){const t=l;l=a,a=t}n[0]=a,n[1]=l}}const b=[],E=[],z=(new o,new o),S=new o;class C extends w{constructor(t){super({type:w.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,i=this.halfExtents.z,s=o,n=[new s(-t,-e,-i),new s(t,-e,-i),new s(t,e,-i),new s(-t,e,-i),new s(-t,-e,i),new s(t,-e,i),new s(t,e,i),new s(-t,e,i)],r=[new s(0,0,1),new s(0,1,0),new s(1,0,0)],a=new x({vertices:n,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e){return void 0===e&&(e=new o),C.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,i){const s=t;i.x=1/12*e*(2*s.y*2*s.y+2*s.z*2*s.z),i.y=1/12*e*(2*s.x*2*s.x+2*s.z*2*s.z),i.z=1/12*e*(2*s.y*2*s.y+2*s.x*2*s.x)}getSideNormals(t,e){const i=t,s=this.halfExtents;if(i[0].set(s.x,0,0),i[1].set(0,s.y,0),i[2].set(0,0,s.z),i[3].set(-s.x,0,0),i[4].set(0,-s.y,0),i[5].set(0,0,-s.z),void 0!==e)for(let t=0;t!==i.length;t++)e.vmult(i[t],i[t]);return i}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,i){const s=this.halfExtents,n=[[s.x,s.y,s.z],[-s.x,s.y,s.z],[-s.x,-s.y,s.z],[-s.x,-s.y,-s.z],[s.x,-s.y,-s.z],[s.x,s.y,-s.z],[-s.x,s.y,-s.z],[s.x,-s.y,s.z]];for(let s=0;s<n.length;s++)B.set(n[s][0],n[s][1],n[s][2]),e.vmult(B,B),t.vadd(B,B),i(B.x,B.y,B.z)}calculateWorldAABB(t,e,i,s){const n=this.halfExtents;A[0].set(n.x,n.y,n.z),A[1].set(-n.x,n.y,n.z),A[2].set(-n.x,-n.y,n.z),A[3].set(-n.x,-n.y,-n.z),A[4].set(n.x,-n.y,-n.z),A[5].set(n.x,n.y,-n.z),A[6].set(-n.x,n.y,-n.z),A[7].set(n.x,-n.y,n.z);const o=A[0];e.vmult(o,o),t.vadd(o,o),s.copy(o),i.copy(o);for(let n=1;n<8;n++){const o=A[n];e.vmult(o,o),t.vadd(o,o);const r=o.x,a=o.y,l=o.z;r>s.x&&(s.x=r),a>s.y&&(s.y=a),l>s.z&&(s.z=l),r<i.x&&(i.x=r),a<i.y&&(i.y=a),l<i.z&&(i.z=l)}}}const B=new o,A=[new o,new o,new o,new o,new o,new o,new o,new o],M={DYNAMIC:1,STATIC:2,KINEMATIC:4},F=0,q=1,N=2;class R extends p{constructor(t){void 0===t&&(t={}),super(),this.id=R.idCounter++,this.index=-1,this.world=null,this.vlambda=new o,this.collisionFilterGroup="number"==typeof t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask="number"==typeof t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionResponse="boolean"!=typeof t.collisionResponse||t.collisionResponse,this.position=new o,this.previousPosition=new o,this.interpolatedPosition=new o,this.initPosition=new o,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new o,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new o,this.force=new o;const e="number"==typeof t.mass?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping="number"==typeof t.linearDamping?t.linearDamping:.01,this.type=e<=0?R.STATIC:R.DYNAMIC,typeof t.type==typeof R.STATIC&&(this.type=t.type),this.allowSleep=void 0===t.allowSleep||t.allowSleep,this.sleepState=R.AWAKE,this.sleepSpeedLimit=void 0!==t.sleepSpeedLimit?t.sleepSpeedLimit:.1,this.sleepTimeLimit=void 0!==t.sleepTimeLimit?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new o,this.quaternion=new y,this.initQuaternion=new y,this.previousQuaternion=new y,this.interpolatedQuaternion=new y,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new o,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new o,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new o,this.invInertia=new o,this.invInertiaWorld=new s,this.invMassSolve=0,this.invInertiaSolve=new o,this.invInertiaWorldSolve=new s,this.fixedRotation=void 0!==t.fixedRotation&&t.fixedRotation,this.angularDamping=void 0!==t.angularDamping?t.angularDamping:.01,this.linearFactor=new o(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new o(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new h,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new o,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=R.AWAKE,this.wakeUpAfterNarrowphase=!1,t===R.SLEEPING&&this.dispatchEvent(R.wakeupEvent)}sleep(){this.sleepState=R.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,i=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),s=this.sleepSpeedLimit**2;e===R.AWAKE&&i<s?(this.sleepState=R.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(R.sleepyEvent)):e===R.SLEEPY&&i>s?this.wakeUp():e===R.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(R.sleepEvent))}}updateSolveMassProperties(){this.sleepState===R.SLEEPING||this.type===R.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return void 0===e&&(e=new o),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return void 0===e&&(e=new o),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return void 0===e&&(e=new o),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return void 0===e&&(e=new o),this.quaternion.vmult(t,e),e}addShape(t,e,i){const s=new o,n=new y;return e&&s.copy(e),i&&n.copy(i),this.shapes.push(t),this.shapeOffsets.push(s),this.shapeOrientations.push(n),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return-1===e?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,i=t.length;let s=0;for(let n=0;n!==i;n++){const i=t[n];i.updateBoundingSphereRadius();const o=e[n].length(),r=i.boundingSphereRadius;o+r>s&&(s=o+r)}this.boundingRadius=s}updateAABB(){const t=this.shapes,e=this.shapeOffsets,i=this.shapeOrientations,s=t.length,n=T,o=I,r=this.quaternion,a=this.aabb,l=P;for(let h=0;h!==s;h++){const s=t[h];r.vmult(e[h],n),n.vadd(this.position,n),r.mult(i[h],o),s.calculateWorldAABB(n,o,l.lowerBound,l.upperBound),0===h?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const t=j,i=L;t.setRotationFromQuaternion(this.quaternion),t.transpose(i),t.scale(e,t),t.mmult(i,this.invInertiaWorld)}else;}applyForce(t,e){if(void 0===e&&(e=new o),this.type!==R.DYNAMIC)return;this.sleepState===R.SLEEPING&&this.wakeUp();const i=O;e.cross(t,i),this.force.vadd(t,this.force),this.torque.vadd(i,this.torque)}applyLocalForce(t,e){if(void 0===e&&(e=new o),this.type!==R.DYNAMIC)return;const i=k,s=W;this.vectorToWorldFrame(t,i),this.vectorToWorldFrame(e,s),this.applyForce(i,s)}applyTorque(t){this.type===R.DYNAMIC&&(this.sleepState===R.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(void 0===e&&(e=new o),this.type!==R.DYNAMIC)return;this.sleepState===R.SLEEPING&&this.wakeUp();const i=e,s=V;s.copy(t),s.scale(this.invMass,s),this.velocity.vadd(s,this.velocity);const n=H;i.cross(t,n),this.invInertiaWorld.vmult(n,n),this.angularVelocity.vadd(n,this.angularVelocity)}applyLocalImpulse(t,e){if(void 0===e&&(e=new o),this.type!==R.DYNAMIC)return;const i=D,s=G;this.vectorToWorldFrame(t,i),this.vectorToWorldFrame(e,s),this.applyImpulse(i,s)}updateMassProperties(){const t=Y;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,i=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),C.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!i?1/e.x:0,e.y>0&&!i?1/e.y:0,e.z>0&&!i?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const i=new o;return t.vsub(this.position,i),this.angularVelocity.cross(i,e),this.velocity.vadd(e,e),e}integrate(t,e,i){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==R.DYNAMIC&&this.type!==R.KINEMATIC||this.sleepState===R.SLEEPING)return;const s=this.velocity,n=this.angularVelocity,o=this.position,r=this.force,a=this.torque,l=this.quaternion,h=this.invMass,c=this.invInertiaWorld,u=this.linearFactor,d=h*t;s.x+=r.x*d*u.x,s.y+=r.y*d*u.y,s.z+=r.z*d*u.z;const p=c.elements,y=this.angularFactor,v=a.x*y.x,m=a.y*y.y,w=a.z*y.z;n.x+=t*(p[0]*v+p[1]*m+p[2]*w),n.y+=t*(p[3]*v+p[4]*m+p[5]*w),n.z+=t*(p[6]*v+p[7]*m+p[8]*w),o.x+=s.x*t,o.y+=s.y*t,o.z+=s.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(i?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}R.idCounter=0,R.COLLIDE_EVENT_NAME="collide",R.DYNAMIC=M.DYNAMIC,R.STATIC=M.STATIC,R.KINEMATIC=M.KINEMATIC,R.AWAKE=F,R.SLEEPY=q,R.SLEEPING=N,R.wakeupEvent={type:"wakeup"},R.sleepyEvent={type:"sleepy"},R.sleepEvent={type:"sleep"};const T=new o,I=new y,P=new h,j=new s,L=new s,O=(new s,new o),k=new o,W=new o,V=new o,H=new o,D=new o,G=new o,Y=new o;class U{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,i){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return 0!=(t.collisionFilterGroup&e.collisionFilterMask)&&0!=(e.collisionFilterGroup&t.collisionFilterMask)&&(0==(t.type&R.STATIC)&&t.sleepState!==R.SLEEPING||0==(e.type&R.STATIC)&&e.sleepState!==R.SLEEPING)}intersectionTest(t,e,i,s){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,i,s):this.doBoundingSphereBroadphase(t,e,i,s)}doBoundingSphereBroadphase(t,e,i,s){const n=_;e.position.vsub(t.position,n);const o=(t.boundingRadius+e.boundingRadius)**2;n.lengthSquared()<o&&(i.push(t),s.push(e))}doBoundingBoxBroadphase(t,e,i,s){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(i.push(t),s.push(e))}makePairsUnique(t,e){const i=X,s=$,n=K,o=t.length;for(let i=0;i!==o;i++)s[i]=t[i],n[i]=e[i];t.length=0,e.length=0;for(let t=0;t!==o;t++){const e=s[t].id,o=n[t].id,r=e<o?`${e},${o}`:`${o},${e}`;i[r]=t,i.keys.push(r)}for(let o=0;o!==i.keys.length;o++){const o=i.keys.pop(),r=i[o];t.push(s[r]),e.push(n[r]),delete i[o]}}setWorld(t){}static boundingSphereCheck(t,e){const i=new o;t.position.vsub(e.position,i);const s=t.shapes[0],n=e.shapes[0];return Math.pow(s.boundingSphereRadius+n.boundingSphereRadius,2)>i.lengthSquared()}aabbQuery(t,e,i){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const _=new o;new o,new y,new o;const X={keys:[]},$=[],K=[];new o;new o;new o;class Z extends U{constructor(){super()}collisionPairs(t,e,i){const s=t.bodies,n=s.length;let o,r;for(let t=0;t!==n;t++)for(let n=0;n!==t;n++)o=s[t],r=s[n],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,i)}aabbQuery(t,e,i){void 0===i&&(i=[]);for(let s=0;s<t.bodies.length;s++){const n=t.bodies[s];n.aabbNeedsUpdate&&n.updateAABB(),n.aabb.overlaps(e)&&i.push(n)}return i}}class Q{constructor(){this.rayFromWorld=new o,this.rayToWorld=new o,this.hitNormalWorld=new o,this.hitPointWorld=new o,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,i,s,n,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(i),this.hitPointWorld.copy(s),this.shape=n,this.body=o,this.distance=r}}let J,tt,et,it,st,nt,ot;const rt=1,at=2,lt=4;J=w.types.SPHERE,tt=w.types.PLANE,et=w.types.BOX,it=w.types.CYLINDER,st=w.types.CONVEXPOLYHEDRON,nt=w.types.HEIGHTFIELD,ot=w.types.TRIMESH;class ht{get[J](){return this._intersectSphere}get[tt](){return this._intersectPlane}get[et](){return this._intersectBox}get[it](){return this._intersectConvex}get[st](){return this._intersectConvex}get[nt](){return this._intersectHeightfield}get[ot](){return this._intersectTrimesh}constructor(t,e){void 0===t&&(t=new o),void 0===e&&(e=new o),this.from=t.clone(),this.to=e.clone(),this.direction=new o,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=ht.ANY,this.result=new Q,this.hasHit=!1,this.callback=t=>{}}intersectWorld(t,e){return this.mode=e.mode||ht.ANY,this.result=e.result||new Q,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=void 0!==e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionFilterGroup=void 0!==e.collisionFilterGroup?e.collisionFilterGroup:-1,this.checkCollisionResponse=void 0===e.checkCollisionResponse||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(ct),ut.length=0,t.broadphase.aabbQuery(t,ct,ut),this.intersectBodies(ut),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const i=this.checkCollisionResponse;if(i&&!t.collisionResponse)return;if(0==(this.collisionFilterGroup&t.collisionFilterMask)||0==(t.collisionFilterGroup&this.collisionFilterMask))return;const s=yt,n=vt;for(let e=0,o=t.shapes.length;e<o;e++){const o=t.shapes[e];if((!i||o.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[e],n),t.quaternion.vmult(t.shapeOffsets[e],s),s.vadd(t.position,s),this.intersectShape(o,n,s,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let e=0,i=t.length;!this.result.shouldStop&&e<i;e++)this.intersectBody(t[e])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,i,s){const n=function(t,e,i){i.vsub(t,jt);const s=jt.dot(e);e.scale(s,Lt),Lt.vadd(t,Lt);const n=i.distanceTo(Lt);return n}(this.from,this.direction,i);if(n>t.boundingSphereRadius)return;const o=this[t.type];o&&o.call(this,t,e,i,s,t)}_intersectBox(t,e,i,s,n){return this._intersectConvex(t.convexPolyhedronRepresentation,e,i,s,n)}_intersectPlane(t,e,i,s,n){const r=this.from,a=this.to,l=this.direction,h=new o(0,0,1);e.vmult(h,h);const c=new o;r.vsub(i,c);const u=c.dot(h);a.vsub(i,c);if(u*c.dot(h)>0)return;if(r.distanceTo(a)<u)return;const d=h.dot(l);if(Math.abs(d)<this.precision)return;const p=new o,y=new o,v=new o;r.vsub(i,p);const m=-h.dot(p)/d;l.scale(m,y),r.vadd(y,v),this.reportIntersection(h,v,n,s,-1)}getAABB(t){const{lowerBound:e,upperBound:i}=t,s=this.to,n=this.from;e.x=Math.min(s.x,n.x),e.y=Math.min(s.y,n.y),e.z=Math.min(s.z,n.z),i.x=Math.max(s.x,n.x),i.y=Math.max(s.y,n.y),i.z=Math.max(s.z,n.z)}_intersectHeightfield(t,e,i,s,n){t.data,t.elementSize;const o=Et;o.from.copy(this.from),o.to.copy(this.to),f.pointToLocalFrame(i,e,o.from,o.from),f.pointToLocalFrame(i,e,o.to,o.to),o.updateDirection();const r=zt;let a,l,c,u;a=l=0,c=u=t.data.length-1;const d=new h;o.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),c=Math.min(c,r[0]+1),u=Math.min(u,r[1]+1);for(let r=a;r<c;r++)for(let a=l;a<u;a++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(r,a,d),d.overlapsRay(o)){if(t.getConvexTrianglePillar(r,a,!1),f.pointToWorldFrame(i,e,t.pillarOffset,bt),this._intersectConvex(t.pillarConvex,e,bt,s,n,xt),this.result.shouldStop)return;t.getConvexTrianglePillar(r,a,!0),f.pointToWorldFrame(i,e,t.pillarOffset,bt),this._intersectConvex(t.pillarConvex,e,bt,s,n,xt)}}}_intersectSphere(t,e,i,s,n){const o=this.from,r=this.to,a=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,h=2*((r.x-o.x)*(o.x-i.x)+(r.y-o.y)*(o.y-i.y)+(r.z-o.z)*(o.z-i.z)),c=h**2-4*l*((o.x-i.x)**2+(o.y-i.y)**2+(o.z-i.z)**2-a**2),u=St,d=Ct;if(!(c<0))if(0===c)o.lerp(r,c,u),u.vsub(i,d),d.normalize(),this.reportIntersection(d,u,n,s,-1);else{const t=(-h-Math.sqrt(c))/(2*l),e=(-h+Math.sqrt(c))/(2*l);if(t>=0&&t<=1&&(o.lerp(r,t,u),u.vsub(i,d),d.normalize(),this.reportIntersection(d,u,n,s,-1)),this.result.shouldStop)return;e>=0&&e<=1&&(o.lerp(r,e,u),u.vsub(i,d),d.normalize(),this.reportIntersection(d,u,n,s,-1))}}_intersectConvex(t,e,i,s,n,o){const r=Bt,a=At,l=o&&o.faceList||null,h=t.faces,c=t.vertices,u=t.faceNormals,d=this.direction,p=this.from,y=this.to,v=p.distanceTo(y),m=l?l.length:h.length,w=this.result;for(let t=0;!w.shouldStop&&t<m;t++){const o=l?l[t]:t,y=h[o],m=u[o],f=e,g=i;a.copy(c[y[0]]),f.vmult(a,a),a.vadd(g,a),a.vsub(p,a),f.vmult(m,r);const x=d.dot(r);if(Math.abs(x)<this.precision)continue;const b=r.dot(a)/x;if(!(b<0)){d.scale(b,mt),mt.vadd(p,mt),wt.copy(c[y[0]]),f.vmult(wt,wt),g.vadd(wt,wt);for(let t=1;!w.shouldStop&&t<y.length-1;t++){ft.copy(c[y[t]]),gt.copy(c[y[t+1]]),f.vmult(ft,ft),f.vmult(gt,gt),g.vadd(ft,ft),g.vadd(gt,gt);const e=mt.distanceTo(p);!ht.pointInTriangle(mt,wt,ft,gt)&&!ht.pointInTriangle(mt,ft,wt,gt)||e>v||this.reportIntersection(r,mt,n,s,o)}}}}_intersectTrimesh(t,e,i,s,n,o){const r=Mt,a=It,l=Pt,h=At,c=Ft,u=qt,d=Nt,p=Tt,y=Rt,v=t.indices;t.vertices;const m=this.from,w=this.to,g=this.direction;l.position.copy(i),l.quaternion.copy(e),f.vectorToLocalFrame(i,e,g,c),f.pointToLocalFrame(i,e,m,u),f.pointToLocalFrame(i,e,w,d),d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,u.x*=t.scale.x,u.y*=t.scale.y,u.z*=t.scale.z,d.vsub(u,c),c.normalize();const x=u.distanceSquared(d);t.tree.rayQuery(this,l,a);for(let o=0,l=a.length;!this.result.shouldStop&&o!==l;o++){const l=a[o];t.getNormal(l,r),t.getVertex(v[3*l],wt),wt.vsub(u,h);const d=c.dot(r),m=r.dot(h)/d;if(m<0)continue;c.scale(m,mt),mt.vadd(u,mt),t.getVertex(v[3*l+1],ft),t.getVertex(v[3*l+2],gt);const w=mt.distanceSquared(u);!ht.pointInTriangle(mt,ft,wt,gt)&&!ht.pointInTriangle(mt,wt,ft,gt)||w>x||(f.vectorToWorldFrame(e,r,y),f.pointToWorldFrame(i,e,mt,p),this.reportIntersection(y,p,n,s,l))}a.length=0}reportIntersection(t,e,i,s,n){const o=this.from,r=this.to,a=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=void 0!==n?n:-1,this.mode){case ht.ALL:this.hasHit=!0,l.set(o,r,t,e,i,s,a),l.hasHit=!0,this.callback(l);break;case ht.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,i,s,a));break;case ht.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,i,s,a),l.shouldStop=!0}}static pointInTriangle(t,e,i,s){s.vsub(e,jt),i.vsub(e,dt),t.vsub(e,pt);const n=jt.dot(jt),o=jt.dot(dt),r=jt.dot(pt),a=dt.dot(dt),l=dt.dot(pt);let h,c;return(h=a*r-o*l)>=0&&(c=n*l-o*r)>=0&&h+c<n*a-o*o}}ht.CLOSEST=rt,ht.ANY=at,ht.ALL=lt;const ct=new h,ut=[],dt=new o,pt=new o,yt=new o,vt=new y,mt=new o,wt=new o,ft=new o,gt=new o;new o,new Q;const xt={faceList:[0]},bt=new o,Et=new ht,zt=[],St=new o,Ct=new o,Bt=new o,At=(new o,new o,new o),Mt=new o,Ft=new o,qt=new o,Nt=new o,Rt=new o,Tt=new o;new h;const It=[],Pt=new f,jt=new o,Lt=new o;class Ot{static defaults(t,e){void 0===t&&(t={});for(let i in e)i in t||(t[i]=e[i]);return t}}class kt{constructor(t,e,i){void 0===i&&(i={}),i=Ot.defaults(i,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=kt.idCounter++,this.collideConnected=i.collideConnected,i.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}kt.idCounter=0;class Wt{constructor(){this.spatial=new o,this.rotational=new o}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Vt{constructor(t,e,i,s){void 0===i&&(i=-1e6),void 0===s&&(s=1e6),this.id=Vt.idCounter++,this.minForce=i,this.maxForce=s,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Wt,this.jacobianElementB=new Wt,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,i){const s=e,n=t,o=i;this.a=4/(o*(1+4*s)),this.b=4*s/(1+4*s),this.eps=4/(o*o*n*(1+4*s))}computeB(t,e,i){const s=this.computeGW();return-this.computeGq()*t-s*e-this.computeGiMf()*i}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.position,o=s.position;return t.spatial.dot(n)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.velocity,o=s.velocity,r=i.angularVelocity,a=s.angularVelocity;return t.multiplyVectors(n,r)+e.multiplyVectors(o,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.vlambda,o=s.vlambda,r=i.wlambda,a=s.wlambda;return t.multiplyVectors(n,r)+e.multiplyVectors(o,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.force,o=i.torque,r=s.force,a=s.torque,l=i.invMassSolve,h=s.invMassSolve;return n.scale(l,Ht),r.scale(h,Dt),i.invInertiaWorldSolve.vmult(o,Gt),s.invInertiaWorldSolve.vmult(a,Yt),t.multiplyVectors(Ht,Gt)+e.multiplyVectors(Dt,Yt)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.invMassSolve,o=s.invMassSolve,r=i.invInertiaWorldSolve,a=s.invInertiaWorldSolve;let l=n+o;return r.vmult(t.rotational,Ut),l+=Ut.dot(t.rotational),a.vmult(e.rotational,Ut),l+=Ut.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,i=this.jacobianElementB,s=this.bi,n=this.bj,o=_t;s.vlambda.addScaledVector(s.invMassSolve*t,e.spatial,s.vlambda),n.vlambda.addScaledVector(n.invMassSolve*t,i.spatial,n.vlambda),s.invInertiaWorldSolve.vmult(e.rotational,o),s.wlambda.addScaledVector(t,o,s.wlambda),n.invInertiaWorldSolve.vmult(i.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Vt.idCounter=0;const Ht=new o,Dt=new o,Gt=new o,Yt=new o,Ut=new o,_t=new o;class Xt extends Vt{constructor(t,e,i){void 0===i&&(i=1e6),super(t,e,0,i),this.restitution=0,this.ri=new o,this.rj=new o,this.ni=new o}computeB(t){const e=this.a,i=this.b,s=this.bi,n=this.bj,o=this.ri,r=this.rj,a=$t,l=Kt,h=s.velocity,c=s.angularVelocity;s.force,s.torque;const u=n.velocity,d=n.angularVelocity;n.force,n.torque;const p=Zt,y=this.jacobianElementA,v=this.jacobianElementB,m=this.ni;o.cross(m,a),r.cross(m,l),m.negate(y.spatial),a.negate(y.rotational),v.spatial.copy(m),v.rotational.copy(l),p.copy(n.position),p.vadd(r,p),p.vsub(s.position,p),p.vsub(o,p);const w=m.dot(p),f=this.restitution+1;return-w*e-(f*u.dot(m)-f*h.dot(m)+d.dot(l)-c.dot(a))*i-t*this.computeGiMf()}getImpactVelocityAlongNormal(){const t=Qt,e=Jt,i=te,s=ee,n=ie;return this.bi.position.vadd(this.ri,i),this.bj.position.vadd(this.rj,s),this.bi.getVelocityAtWorldPoint(i,t),this.bj.getVelocityAtWorldPoint(s,e),t.vsub(e,n),this.ni.dot(n)}}const $t=new o,Kt=new o,Zt=new o,Qt=new o,Jt=new o,te=new o,ee=new o,ie=new o;new o,new o;new o,new o;new o,new o;new o,new o;new o,new o;class se extends Vt{constructor(t,e,i){super(t,e,-i,i),this.ri=new o,this.rj=new o,this.t=new o}computeB(t){this.a;const e=this.b;this.bi,this.bj;const i=this.ri,s=this.rj,n=ne,o=oe,r=this.t;i.cross(r,n),s.cross(r,o);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),n.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(o);return-this.computeGW()*e-t*this.computeGiMf()}}const ne=new o,oe=new o;class re{constructor(t,e,i){i=Ot.defaults(i,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=re.idCounter++,this.materials=[t,e],this.friction=i.friction,this.restitution=i.restitution,this.contactEquationStiffness=i.contactEquationStiffness,this.contactEquationRelaxation=i.contactEquationRelaxation,this.frictionEquationStiffness=i.frictionEquationStiffness,this.frictionEquationRelaxation=i.frictionEquationRelaxation}}re.idCounter=0;class ae{constructor(t){void 0===t&&(t={});let e="";"string"==typeof t&&(e=t,t={}),this.name=e,this.id=ae.idCounter++,this.friction=void 0!==t.friction?t.friction:-1,this.restitution=void 0!==t.restitution?t.restitution:-1}}ae.idCounter=0;new o,new o,new o,new o,new o,new o,new o,new o,new o,new o,new o;new o,new o;new o,new o,new o;new o,new o,new o;new ht,new o;new o,new o,new o(1,0,0),new o(0,1,0),new o(0,0,1),new o,new o,new o,new o;new o,new o,new o,new o;new o,new o,new o;new o,new o;new o,new o,new o,new o,new o,new o,new o;new o;new o,new o,new o,new o,new o,new o,new o,new o,new o;new o,new h;new o,new h,new o,new o,new o,new o,new o,new o,new o,new h,new o,new f,new h;class le{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){!t.enabled||t.bi.isTrigger||t.bj.isTrigger||this.equations.push(t)}removeEquation(t){const e=this.equations,i=e.indexOf(t);-1!==i&&e.splice(i,1)}removeAllEquations(){this.equations.length=0}}class he extends le{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let i=0;const s=this.iterations,n=this.tolerance*this.tolerance,o=this.equations,r=o.length,a=e.bodies,l=a.length,h=t;let c,u,d,p,y,v;if(0!==r)for(let t=0;t!==l;t++)a[t].updateSolveMassProperties();const m=ue,w=de,f=ce;m.length=r,w.length=r,f.length=r;for(let t=0;t!==r;t++){const e=o[t];f[t]=0,w[t]=e.computeB(h),m[t]=1/e.computeC()}if(0!==r){for(let t=0;t!==l;t++){const e=a[t],i=e.vlambda,s=e.wlambda;i.set(0,0,0),s.set(0,0,0)}for(i=0;i!==s;i++){p=0;for(let t=0;t!==r;t++){const e=o[t];c=w[t],u=m[t],v=f[t],y=e.computeGWlambda(),d=u*(c-y-e.eps*v),v+d<e.minForce?d=e.minForce-v:v+d>e.maxForce&&(d=e.maxForce-v),f[t]+=d,p+=d>0?d:-d,e.addToWlambda(d)}if(p*p<n)break}for(let t=0;t!==l;t++){const e=a[t],i=e.velocity,s=e.angularVelocity;e.vlambda.vmul(e.linearFactor,e.vlambda),i.vadd(e.vlambda,i),e.wlambda.vmul(e.angularFactor,e.wlambda),s.vadd(e.wlambda,s)}let t=o.length;const e=1/h;for(;t--;)o[t].multiplier=f[t]*e}return i}}const ce=[],ue=[],de=[];R.STATIC;class pe{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class ye extends pe{constructor(){super(...arguments),this.type=o}constructObject(){return new o}}const ve=w.types.SPHERE,me=w.types.SPHERE|w.types.PLANE,we=w.types.BOX|w.types.BOX,fe=w.types.SPHERE|w.types.BOX,ge=w.types.PLANE|w.types.BOX,xe=w.types.CONVEXPOLYHEDRON,be=w.types.SPHERE|w.types.CONVEXPOLYHEDRON,Ee=w.types.PLANE|w.types.CONVEXPOLYHEDRON,ze=w.types.BOX|w.types.CONVEXPOLYHEDRON,Se=w.types.SPHERE|w.types.HEIGHTFIELD,Ce=w.types.BOX|w.types.HEIGHTFIELD,Be=w.types.CONVEXPOLYHEDRON|w.types.HEIGHTFIELD,Ae=w.types.PARTICLE|w.types.SPHERE,Me=w.types.PLANE|w.types.PARTICLE,Fe=w.types.BOX|w.types.PARTICLE,qe=w.types.PARTICLE|w.types.CONVEXPOLYHEDRON,Ne=w.types.CYLINDER,Re=w.types.SPHERE|w.types.CYLINDER,Te=w.types.PLANE|w.types.CYLINDER,Ie=w.types.BOX|w.types.CYLINDER,Pe=w.types.CONVEXPOLYHEDRON|w.types.CYLINDER,je=w.types.HEIGHTFIELD|w.types.CYLINDER,Le=w.types.PARTICLE|w.types.CYLINDER,Oe=w.types.SPHERE|w.types.TRIMESH,ke=w.types.PLANE|w.types.TRIMESH;class We{get[ve](){return this.sphereSphere}get[me](){return this.spherePlane}get[we](){return this.boxBox}get[fe](){return this.sphereBox}get[ge](){return this.planeBox}get[xe](){return this.convexConvex}get[be](){return this.sphereConvex}get[Ee](){return this.planeConvex}get[ze](){return this.boxConvex}get[Se](){return this.sphereHeightfield}get[Ce](){return this.boxHeightfield}get[Be](){return this.convexHeightfield}get[Ae](){return this.sphereParticle}get[Me](){return this.planeParticle}get[Fe](){return this.boxParticle}get[qe](){return this.convexParticle}get[Ne](){return this.convexConvex}get[Re](){return this.sphereConvex}get[Te](){return this.planeConvex}get[Ie](){return this.boxConvex}get[Pe](){return this.convexConvex}get[je](){return this.heightfieldCylinder}get[Le](){return this.particleCylinder}get[Oe](){return this.sphereTrimesh}get[ke](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new ye,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,i,s,n,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Xt(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&i.collisionResponse&&s.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=i.material||t.material,h=s.material||e.material;return l&&h&&l.restitution>=0&&h.restitution>=0&&(r.restitution=l.restitution*h.restitution),r.si=n||i,r.sj=o||s,r}createFrictionEquationsFromContact(t,e){const i=t.bi,s=t.bj,n=t.si,o=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const h=n.material||i.material,c=o.material||s.material;if(h&&c&&h.friction>=0&&c.friction>=0&&(l=h.friction*c.friction),l>0){const n=l*(r.frictionGravity||r.gravity).length();let o=i.invMass+s.invMass;o>0&&(o=1/o);const h=this.frictionEquationPool,c=h.length?h.pop():new se(i,s,n*o),u=h.length?h.pop():new se(i,s,n*o);return c.bi=u.bi=i,c.bj=u.bj=s,c.minForce=u.minForce=-n*o,c.maxForce=u.maxForce=n*o,c.ri.copy(t.ri),c.rj.copy(t.rj),u.ri.copy(t.ri),u.rj.copy(t.rj),t.ni.tangents(c.t,u.t),c.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),u.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),c.enabled=u.enabled=t.enabled,e.push(c,u),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const i=this.frictionResult[this.frictionResult.length-2],s=this.frictionResult[this.frictionResult.length-1];Ve.setZero(),He.setZero(),De.setZero();const n=e.bi;e.bj;for(let i=0;i!==t;i++)e=this.result[this.result.length-1-i],e.bi!==n?(Ve.vadd(e.ni,Ve),He.vadd(e.ri,He),De.vadd(e.rj,De)):(Ve.vsub(e.ni,Ve),He.vadd(e.rj,He),De.vadd(e.ri,De));const o=1/t;He.scale(o,i.ri),De.scale(o,i.rj),s.ri.copy(i.ri),s.rj.copy(i.rj),Ve.normalize(),Ve.tangents(i.t,s.t)}getContacts(t,e,i,s,n,o,r){this.contactPointPool=n,this.frictionEquationPool=r,this.result=s,this.frictionResult=o;const a=Ue,l=_e,h=Ge,c=Ye;for(let s=0,n=t.length;s!==n;s++){const n=t[s],o=e[s];let r=null;n.material&&o.material&&(r=i.getContactMaterial(n.material,o.material)||null);const u=n.type&R.KINEMATIC&&o.type&R.STATIC||n.type&R.STATIC&&o.type&R.KINEMATIC||n.type&R.KINEMATIC&&o.type&R.KINEMATIC;for(let t=0;t<n.shapes.length;t++){n.quaternion.mult(n.shapeOrientations[t],a),n.quaternion.vmult(n.shapeOffsets[t],h),h.vadd(n.position,h);const e=n.shapes[t];for(let t=0;t<o.shapes.length;t++){o.quaternion.mult(o.shapeOrientations[t],l),o.quaternion.vmult(o.shapeOffsets[t],c),c.vadd(o.position,c);const s=o.shapes[t];if(!(e.collisionFilterMask&s.collisionFilterGroup&&s.collisionFilterMask&e.collisionFilterGroup))continue;if(h.distanceTo(c)>e.boundingSphereRadius+s.boundingSphereRadius)continue;let d=null;e.material&&s.material&&(d=i.getContactMaterial(e.material,s.material)||null),this.currentContactMaterial=d||r||i.defaultContactMaterial;const p=this[e.type|s.type];if(p){let t=!1;t=e.type<s.type?p.call(this,e,s,h,c,a,l,n,o,e,s,u):p.call(this,s,e,c,h,l,a,o,n,e,s,u),t&&u&&(i.shapeOverlapKeeper.set(e.id,s.id),i.bodyOverlapKeeper.set(n.id,o.id))}}}}}sphereSphere(t,e,i,s,n,o,r,a,l,h,c){if(c)return i.distanceSquared(s)<(t.radius+e.radius)**2;const u=this.createContactEquation(r,a,t,e,l,h);s.vsub(i,u.ni),u.ni.normalize(),u.ri.copy(u.ni),u.rj.copy(u.ni),u.ri.scale(t.radius,u.ri),u.rj.scale(-e.radius,u.rj),u.ri.vadd(i,u.ri),u.ri.vsub(r.position,u.ri),u.rj.vadd(s,u.rj),u.rj.vsub(a.position,u.rj),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}spherePlane(t,e,i,s,n,o,r,a,l,h,c){const u=this.createContactEquation(r,a,t,e,l,h);if(u.ni.set(0,0,1),o.vmult(u.ni,u.ni),u.ni.negate(u.ni),u.ni.normalize(),u.ni.scale(t.radius,u.ri),i.vsub(s,di),u.ni.scale(u.ni.dot(di),pi),di.vsub(pi,u.rj),-di.dot(u.ni)<=t.radius){if(c)return!0;const t=u.ri,e=u.rj;t.vadd(i,t),t.vsub(r.position,t),e.vadd(s,e),e.vsub(a.position,e),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}}boxBox(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,i,s,n,o,r,a,t,e,c)}sphereBox(t,e,i,s,n,o,r,a,l,h,c){const u=this.v3pool,d=Ei;i.vsub(s,fi),e.getSideNormals(d,o);const p=t.radius;let y=!1;const v=Si,m=Ci,w=Bi;let f=null,g=0,x=0,b=0,E=null;for(let t=0,e=d.length;t!==e&&!1===y;t++){const e=gi;e.copy(d[t]);const i=e.length();e.normalize();const s=fi.dot(e);if(s<i+p&&s>0){const n=xi,o=bi;n.copy(d[(t+1)%3]),o.copy(d[(t+2)%3]);const r=n.length(),a=o.length();n.normalize(),o.normalize();const l=fi.dot(n),h=fi.dot(o);if(l<r&&l>-r&&h<a&&h>-a){const t=Math.abs(s-i-p);if((null===E||t<E)&&(E=t,x=l,b=h,f=i,v.copy(e),m.copy(n),w.copy(o),g++,c))return!0}}}if(g){y=!0;const n=this.createContactEquation(r,a,t,e,l,h);v.scale(-p,n.ri),n.ni.copy(v),n.ni.negate(n.ni),v.scale(f,v),m.scale(x,m),v.vadd(m,v),w.scale(b,w),v.vadd(w,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}let z=u.get();const S=zi;for(let n=0;2!==n&&!y;n++)for(let o=0;2!==o&&!y;o++)for(let u=0;2!==u&&!y;u++)if(z.set(0,0,0),n?z.vadd(d[0],z):z.vsub(d[0],z),o?z.vadd(d[1],z):z.vsub(d[1],z),u?z.vadd(d[2],z):z.vsub(d[2],z),s.vadd(z,S),S.vsub(i,S),S.lengthSquared()<p*p){if(c)return!0;y=!0;const n=this.createContactEquation(r,a,t,e,l,h);n.ri.copy(S),n.ri.normalize(),n.ni.copy(n.ri),n.ri.scale(p,n.ri),n.rj.copy(z),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}u.release(z),z=null;const C=u.get(),B=u.get(),A=u.get(),M=u.get(),F=u.get(),q=d.length;for(let n=0;n!==q&&!y;n++)for(let o=0;o!==q&&!y;o++)if(n%3!=o%3){d[o].cross(d[n],C),C.normalize(),d[n].vadd(d[o],B),A.copy(i),A.vsub(B,A),A.vsub(s,A);const u=A.dot(C);C.scale(u,M);let v=0;for(;v===n%3||v===o%3;)v++;F.copy(i),F.vsub(M,F),F.vsub(B,F),F.vsub(s,F);const m=Math.abs(u),w=F.length();if(m<d[v].length()&&w<p){if(c)return!0;y=!0;const n=this.createContactEquation(r,a,t,e,l,h);B.vadd(M,n.rj),n.rj.copy(n.rj),F.negate(n.ni),n.ni.normalize(),n.ri.copy(n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(i,n.ri),n.ri.normalize(),n.ri.scale(p,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}u.release(C,B,A,M,F)}planeBox(t,e,i,s,n,o,r,a,l,h,c){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,i,s,n,o,r,a,t,e,c)}convexConvex(t,e,i,s,n,o,r,a,l,h,c,u,d){const p=Vi;if(!(i.distanceTo(s)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,i,n,s,o,p,u,d)){const u=[],d=Hi;t.clipAgainstHull(i,n,e,s,o,p,-100,100,u);let y=0;for(let n=0;n!==u.length;n++){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h),v=o.ri,m=o.rj;p.negate(o.ni),u[n].normal.negate(d),d.scale(u[n].depth,d),u[n].point.vadd(d,v),m.copy(u[n].point),v.vsub(i,v),m.vsub(s,m),v.vadd(i,v),v.vsub(r.position,v),m.vadd(s,m),m.vsub(a.position,m),this.result.push(o),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(o,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,i,s,n,o,r,a,l,h,c){const u=this.v3pool;i.vsub(s,Ai);const d=e.faceNormals,p=e.faces,y=e.vertices,v=t.radius;let m=!1;for(let n=0;n!==y.length;n++){const u=y[n],d=Ni;o.vmult(u,d),s.vadd(d,d);const p=qi;if(d.vsub(i,p),p.lengthSquared()<v*v){if(c)return!0;m=!0;const n=this.createContactEquation(r,a,t,e,l,h);return n.ri.copy(p),n.ri.normalize(),n.ni.copy(n.ri),n.ri.scale(v,n.ri),d.vsub(s,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),void this.createFrictionEquationsFromContact(n,this.frictionResult)}}for(let n=0,w=p.length;n!==w&&!1===m;n++){const w=d[n],f=p[n],g=Ri;o.vmult(w,g);const x=Ti;o.vmult(y[f[0]],x),x.vadd(s,x);const b=Ii;g.scale(-v,b),i.vadd(b,b);const E=Pi;b.vsub(x,E);const z=E.dot(g),S=ji;if(i.vsub(x,S),z<0&&S.dot(g)>0){const n=[];for(let t=0,e=f.length;t!==e;t++){const e=u.get();o.vmult(y[f[t]],e),s.vadd(e,e),n.push(e)}if(wi(n,g,i)){if(c)return!0;m=!0;const o=this.createContactEquation(r,a,t,e,l,h);g.scale(-v,o.ri),g.negate(o.ni);const d=u.get();g.scale(-z,d);const p=u.get();g.scale(-v,p),i.vsub(s,o.rj),o.rj.vadd(p,o.rj),o.rj.vadd(d,o.rj),o.rj.vadd(s,o.rj),o.rj.vsub(a.position,o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),u.release(d),u.release(p),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult);for(let t=0,e=n.length;t!==e;t++)u.release(n[t]);return}for(let d=0;d!==f.length;d++){const p=u.get(),m=u.get();o.vmult(y[f[(d+1)%f.length]],p),o.vmult(y[f[(d+2)%f.length]],m),s.vadd(p,p),s.vadd(m,m);const w=Mi;m.vsub(p,w);const g=Fi;w.unit(g);const x=u.get(),b=u.get();i.vsub(p,b);const E=b.dot(g);g.scale(E,x),x.vadd(p,x);const z=u.get();if(x.vsub(i,z),E>0&&E*E<w.lengthSquared()&&z.lengthSquared()<v*v){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h);x.vsub(s,o.rj),x.vsub(i,o.ni),o.ni.normalize(),o.ni.scale(v,o.ri),o.rj.vadd(s,o.rj),o.rj.vsub(a.position,o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult);for(let t=0,e=n.length;t!==e;t++)u.release(n[t]);return u.release(p),u.release(m),u.release(x),u.release(z),void u.release(b)}u.release(p),u.release(m),u.release(x),u.release(z),u.release(b)}for(let t=0,e=n.length;t!==e;t++)u.release(n[t])}}}planeConvex(t,e,i,s,n,o,r,a,l,h,c){const u=Li,d=Oi;d.set(0,0,1),n.vmult(d,d);let p=0;const y=ki;for(let n=0;n!==e.vertices.length;n++){u.copy(e.vertices[n]),o.vmult(u,u),s.vadd(u,u),u.vsub(i,y);if(d.dot(y)<=0){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h),o=Wi;d.scale(d.dot(y),o),u.vsub(o,o),o.vsub(i,n.ri),n.ni.copy(d),u.vsub(s,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(n,this.frictionResult)}}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,i,s,n,o,r,a,t,e,c)}sphereHeightfield(t,e,i,s,n,o,r,a,l,h,c){const u=e.data,d=t.radius,p=e.elementSize,y=is,v=es;f.pointToLocalFrame(s,o,i,v);let m=Math.floor((v.x-d)/p)-1,w=Math.ceil((v.x+d)/p)+1,g=Math.floor((v.y-d)/p)-1,x=Math.ceil((v.y+d)/p)+1;if(w<0||x<0||m>u.length||g>u[0].length)return;m<0&&(m=0),w<0&&(w=0),g<0&&(g=0),x<0&&(x=0),m>=u.length&&(m=u.length-1),w>=u.length&&(w=u.length-1),x>=u[0].length&&(x=u[0].length-1),g>=u[0].length&&(g=u[0].length-1);const b=[];e.getRectMinMax(m,g,w,x,b);const E=b[0],z=b[1];if(v.z-d>z||v.z+d<E)return;const S=this.result;for(let l=m;l<w;l++)for(let h=g;h<x;h++){const u=S.length;let d=!1;if(e.getConvexTrianglePillar(l,h,!1),f.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,i,y,n,o,r,a,t,e,c)),c&&d)return!0;if(e.getConvexTrianglePillar(l,h,!0),f.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,i,y,n,o,r,a,t,e,c)),c&&d)return!0;if(S.length-u>2)return}}boxHeightfield(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,i,s,n,o,r,a,t,e,c)}convexHeightfield(t,e,i,s,n,o,r,a,l,h,c){const u=e.data,d=e.elementSize,p=t.boundingSphereRadius,y=Ji,v=ts,m=Qi;f.pointToLocalFrame(s,o,i,m);let w=Math.floor((m.x-p)/d)-1,g=Math.ceil((m.x+p)/d)+1,x=Math.floor((m.y-p)/d)-1,b=Math.ceil((m.y+p)/d)+1;if(g<0||b<0||w>u.length||x>u[0].length)return;w<0&&(w=0),g<0&&(g=0),x<0&&(x=0),b<0&&(b=0),w>=u.length&&(w=u.length-1),g>=u.length&&(g=u.length-1),b>=u[0].length&&(b=u[0].length-1),x>=u[0].length&&(x=u[0].length-1);const E=[];e.getRectMinMax(w,x,g,b,E);const z=E[0],S=E[1];if(!(m.z-p>S||m.z+p<z))for(let l=w;l<g;l++)for(let h=x;h<b;h++){let u=!1;if(e.getConvexTrianglePillar(l,h,!1),f.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,i,y,n,o,r,a,null,null,c,v,null)),c&&u)return!0;if(e.getConvexTrianglePillar(l,h,!0),f.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,i,y,n,o,r,a,null,null,c,v,null)),c&&u)return!0}}sphereParticle(t,e,i,s,n,o,r,a,l,h,c){const u=Ui;u.set(0,0,1),s.vsub(i,u);if(u.lengthSquared()<=t.radius*t.radius){if(c)return!0;const i=this.createContactEquation(a,r,e,t,l,h);u.normalize(),i.rj.copy(u),i.rj.scale(t.radius,i.rj),i.ni.copy(u),i.ni.negate(i.ni),i.ri.set(0,0,0),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}planeParticle(t,e,i,s,n,o,r,a,l,h,c){const u=Di;u.set(0,0,1),r.quaternion.vmult(u,u);const d=Gi;s.vsub(r.position,d);if(u.dot(d)<=0){if(c)return!0;const i=this.createContactEquation(a,r,e,t,l,h);i.ni.copy(u),i.ni.negate(i.ni),i.ri.set(0,0,0);const n=Yi;u.scale(u.dot(s),n),s.vsub(n,n),i.rj.copy(n),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}boxParticle(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,i,s,n,o,r,a,t,e,c)}convexParticle(t,e,i,s,n,o,r,a,l,h,c){let u=-1;const d=$i,p=Zi;let y=null;const v=Xi;if(v.copy(s),v.vsub(i,v),n.conjugate(_i),_i.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(i,n),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(n);for(let e=0,i=t.faces.length;e!==i;e++){const i=[t.worldVertices[t.faces[e][0]]],n=t.worldFaceNormals[e];s.vsub(i[0],Ki);const o=-n.dot(Ki);if(null===y||Math.abs(o)<Math.abs(y)){if(c)return!0;y=o,u=e,d.copy(n)}}if(-1!==u){const n=this.createContactEquation(a,r,e,t,l,h);d.scale(y,p),p.vadd(s,p),p.vsub(i,p),n.rj.copy(p),d.negate(n.ni),n.ri.set(0,0,0);const o=n.ri,c=n.rj;o.vadd(s,o),o.vsub(a.position,o),c.vadd(i,c),c.vsub(r.position,c),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,i,s,n,o,r,a,l,h,c){return this.convexHeightfield(e,t,s,i,o,n,a,r,l,h,c)}particleCylinder(t,e,i,s,n,o,r,a,l,h,c){return this.convexParticle(e,t,s,i,o,n,a,r,l,h,c)}sphereTrimesh(t,e,i,s,n,o,r,a,l,h,c){const u=ei,d=ii,p=si,y=ni,v=oi,m=ri,w=ci,g=ti,x=Qe,b=ui;f.pointToLocalFrame(s,o,i,v);const E=t.radius;w.lowerBound.set(v.x-E,v.y-E,v.z-E),w.upperBound.set(v.x+E,v.y+E,v.z+E),e.getTrianglesInAABB(w,b);const z=Je,S=t.radius*t.radius;for(let n=0;n<b.length;n++)for(let u=0;u<3;u++)if(e.getVertex(e.indices[3*b[n]+u],z),z.vsub(v,x),x.lengthSquared()<=S){if(g.copy(z),f.pointToWorldFrame(s,o,g,z),z.vsub(i,x),c)return!0;let n=this.createContactEquation(r,a,t,e,l,h);n.ni.copy(x),n.ni.normalize(),n.ri.copy(n.ni),n.ri.scale(t.radius,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.copy(z),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}for(let n=0;n<b.length;n++)for(let w=0;w<3;w++){e.getVertex(e.indices[3*b[n]+w],u),e.getVertex(e.indices[3*b[n]+(w+1)%3],d),d.vsub(u,p),v.vsub(d,m);const g=m.dot(p);v.vsub(u,m);let x=m.dot(p);if(x>0&&g<0){v.vsub(u,m),y.copy(p),y.normalize(),x=m.dot(y),y.scale(x,m),m.vadd(u,m);if(m.distanceTo(v)<t.radius){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h);m.vsub(v,n.ni),n.ni.normalize(),n.ni.scale(t.radius,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),f.pointToWorldFrame(s,o,m,m),m.vsub(a.position,n.rj),f.vectorToWorldFrame(o,n.ni,n.ni),f.vectorToWorldFrame(o,n.ri,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}}const C=ai,B=li,A=hi,M=Ze;for(let n=0,u=b.length;n!==u;n++){e.getTriangleVertices(b[n],C,B,A),e.getNormal(b[n],M),v.vsub(C,m);let u=m.dot(M);if(M.scale(u,m),v.vsub(m,m),u=m.distanceTo(v),ht.pointInTriangle(m,C,B,A)&&u<t.radius){if(c)return!0;let n=this.createContactEquation(r,a,t,e,l,h);m.vsub(v,n.ni),n.ni.normalize(),n.ni.scale(t.radius,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),f.pointToWorldFrame(s,o,m,m),m.vsub(a.position,n.rj),f.vectorToWorldFrame(o,n.ni,n.ni),f.vectorToWorldFrame(o,n.ri,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}b.length=0}planeTrimesh(t,e,i,s,n,r,a,l,h,c,u){const d=new o,p=Xe;p.set(0,0,1),n.vmult(p,p);for(let n=0;n<e.vertices.length/3;n++){e.getVertex(n,d);const y=new o;y.copy(d),f.pointToWorldFrame(s,r,y,d);const v=$e;d.vsub(i,v);if(p.dot(v)<=0){if(u)return!0;const i=this.createContactEquation(a,l,t,e,h,c);i.ni.copy(p);const s=Ke;p.scale(v.dot(p),s),d.vsub(s,s),i.ri.copy(s),i.ri.vsub(a.position,i.ri),i.rj.copy(d),i.rj.vsub(l.position,i.rj),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}}}const Ve=new o,He=new o,De=new o,Ge=new o,Ye=new o,Ue=new y,_e=new y,Xe=new o,$e=new o,Ke=new o,Ze=new o,Qe=new o;new o;const Je=new o,ti=new o,ei=new o,ii=new o,si=new o,ni=new o,oi=new o,ri=new o,ai=new o,li=new o,hi=new o,ci=new h,ui=[],di=new o,pi=new o,yi=new o,vi=new o,mi=new o;function wi(t,e,i){let s=null;const n=t.length;for(let o=0;o!==n;o++){const r=t[o],a=yi;t[(o+1)%n].vsub(r,a);const l=vi;a.cross(e,l);const h=mi;i.vsub(r,h);const c=l.dot(h);if(!(null===s||c>0&&!0===s||c<=0&&!1===s))return!1;null===s&&(s=c>0)}return!0}const fi=new o,gi=new o,xi=new o,bi=new o,Ei=[new o,new o,new o,new o,new o,new o],zi=new o,Si=new o,Ci=new o,Bi=new o,Ai=new o,Mi=new o,Fi=new o,qi=new o,Ni=new o,Ri=new o,Ti=new o,Ii=new o,Pi=new o,ji=new o;new o,new o;const Li=new o,Oi=new o,ki=new o,Wi=new o,Vi=new o,Hi=new o,Di=new o,Gi=new o,Yi=new o,Ui=new o,_i=new y,Xi=new o;new o;const $i=new o,Ki=new o,Zi=new o,Qi=new o,Ji=new o,ts=[0],es=new o,is=new o;class ss{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const i=e;e=t,t=i}return t<<16|e}set(t,e){const i=this.getKey(t,e),s=this.current;let n=0;for(;i>s[n];)n++;if(i!==s[n]){for(let t=s.length-1;t>=n;t--)s[t+1]=s[t];s[n]=i}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const i=this.current,s=this.previous,n=i.length,o=s.length;let r=0;for(let e=0;e<n;e++){let n=!1;const o=i[e];for(;o>s[r];)r++;n=o===s[r],n||ns(t,o)}r=0;for(let t=0;t<o;t++){let n=!1;const o=s[t];for(;o>i[r];)r++;n=i[r]===o,n||ns(e,o)}}}function ns(t,e){t.push((4294901760&e)>>16,65535&e)}const os=(t,e)=>t<e?`${t}-${e}`:`${e}-${t}`;class rs{constructor(){this.data={keys:[]}}get(t,e){const i=os(t,e);return this.data[i]}set(t,e,i){const s=os(t,e);this.get(t,e)||this.data.keys.push(s),this.data[s]=i}delete(t,e){const i=os(t,e),s=this.data.keys.indexOf(i);-1!==s&&this.data.keys.splice(s,1),delete this.data[i]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){delete t[e.pop()]}}}class as extends p{constructor(t){void 0===t&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new o,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new o,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=void 0!==t.broadphase?t.broadphase:new Z,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new he,this.constraints=[],this.narrowphase=new We(this),this.collisionMatrix=new d,this.collisionMatrixPrevious=new d,this.bodyOverlapKeeper=new ss,this.shapeOverlapKeeper=new ss,this.contactmaterials=[],this.contactMaterialTable=new rs,this.defaultMaterial=new ae("default"),this.defaultContactMaterial=new re(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,i){i instanceof Q?this.raycastClosest(t,e,{skipBackfaces:!0},i):this.raycastAll(t,e,{skipBackfaces:!0},i)}raycastAll(t,e,i,s){return void 0===i&&(i={}),i.mode=ht.ALL,i.from=t,i.to=e,i.callback=s,ls.intersectWorld(this,i)}raycastAny(t,e,i,s){return void 0===i&&(i={}),i.mode=ht.ANY,i.from=t,i.to=e,i.result=s,ls.intersectWorld(this,i)}raycastClosest(t,e,i,s){return void 0===i&&(i={}),i.mode=ht.CLOSEST,i.from=t,i.to=e,i.result=s,ls.intersectWorld(this,i)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof R&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,i=this.bodies,s=i.indexOf(t);if(-1!==s){i.splice(s,1);for(let t=0;t!==i.length;t++)i[t].index=t;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let i=0;i<e.length;i++){const s=e[i].shapes;for(let e=0;e<s.length;e++){const i=s[e];if(i.id===t)return i}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);-1!==e&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){void 0===t&&(t=1/60),void 0===e&&(e=10);const i=hs.now()/1e3;if(this.lastCallTime){const s=i-this.lastCallTime;this.step(t,s,e)}else this.step(t,void 0,e);this.lastCallTime=i}step(t,e,i){if(void 0===i&&(i=10),void 0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const s=hs.now();let n=0;for(;this.accumulator>=t&&n<i&&(this.internalStep(t),this.accumulator-=t,n++,!(hs.now()-s>1e3*t)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let t=0;t!==this.bodies.length;t++){const e=this.bodies[t];e.previousPosition.lerp(e.position,o,e.interpolatedPosition),e.previousQuaternion.slerp(e.quaternion,o,e.interpolatedQuaternion),e.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,i=vs,s=ms,n=this.bodies.length,o=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,h=this.profile,c=R.DYNAMIC;let u=-1/0;const d=this.constraints,p=ys;a.length();const y=a.x,v=a.y,m=a.z;let w=0;for(l&&(u=hs.now()),w=0;w!==n;w++){const t=o[w];if(t.type===c){const e=t.force,i=t.mass;e.x+=i*y,e.y+=i*v,e.z+=i*m}}for(let t=0,e=this.subsystems.length;t!==e;t++)this.subsystems[t].update();l&&(u=hs.now()),i.length=0,s.length=0,this.broadphase.collisionPairs(this,i,s),l&&(h.broadphase=hs.now()-u);let f=d.length;for(w=0;w!==f;w++){const t=d[w];if(!t.collideConnected)for(let e=i.length-1;e>=0;e-=1)(t.bodyA===i[e]&&t.bodyB===s[e]||t.bodyB===i[e]&&t.bodyA===s[e])&&(i.splice(e,1),s.splice(e,1))}this.collisionMatrixTick(),l&&(u=hs.now());const g=ps,x=e.length;for(w=0;w!==x;w++)g.push(e[w]);e.length=0;const b=this.frictionEquations.length;for(w=0;w!==b;w++)p.push(this.frictionEquations[w]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(i,s,this,e,g,this.frictionEquations,p),l&&(h.narrowphase=hs.now()-u),l&&(u=hs.now()),w=0;w<this.frictionEquations.length;w++)r.addEquation(this.frictionEquations[w]);const E=e.length;for(let t=0;t!==E;t++){const i=e[t],s=i.bi,n=i.bj,o=i.si,a=i.sj;let l;if(l=s.material&&n.material&&this.getContactMaterial(s.material,n.material)||this.defaultContactMaterial,l.friction,s.material&&n.material&&(s.material.friction>=0&&n.material.friction>=0&&(s.material.friction,n.material.friction),s.material.restitution>=0&&n.material.restitution>=0&&(i.restitution=s.material.restitution*n.material.restitution)),r.addEquation(i),s.allowSleep&&s.type===R.DYNAMIC&&s.sleepState===R.SLEEPING&&n.sleepState===R.AWAKE&&n.type!==R.STATIC){n.velocity.lengthSquared()+n.angularVelocity.lengthSquared()>=2*n.sleepSpeedLimit**2&&(s.wakeUpAfterNarrowphase=!0)}if(n.allowSleep&&n.type===R.DYNAMIC&&n.sleepState===R.SLEEPING&&s.sleepState===R.AWAKE&&s.type!==R.STATIC){s.velocity.lengthSquared()+s.angularVelocity.lengthSquared()>=2*s.sleepSpeedLimit**2&&(n.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(s,n,!0),this.collisionMatrixPrevious.get(s,n)||(ds.body=n,ds.contact=i,s.dispatchEvent(ds),ds.body=s,n.dispatchEvent(ds)),this.bodyOverlapKeeper.set(s.id,n.id),this.shapeOverlapKeeper.set(o.id,a.id)}for(this.emitContactEvents(),l&&(h.makeContactConstraints=hs.now()-u,u=hs.now()),w=0;w!==n;w++){const t=o[w];t.wakeUpAfterNarrowphase&&(t.wakeUp(),t.wakeUpAfterNarrowphase=!1)}for(f=d.length,w=0;w!==f;w++){const t=d[w];t.update();for(let e=0,i=t.equations.length;e!==i;e++){const i=t.equations[e];r.addEquation(i)}}r.solve(t,this),l&&(h.solve=hs.now()-u),r.removeAllEquations();const z=Math.pow;for(w=0;w!==n;w++){const e=o[w];if(e.type&c){const i=z(1-e.linearDamping,t),s=e.velocity;s.scale(i,s);const n=e.angularVelocity;if(n){const i=z(1-e.angularDamping,t);n.scale(i,n)}}}this.dispatchEvent(us),l&&(u=hs.now());const S=this.stepnumber%(this.quatNormalizeSkip+1)==0,C=this.quatNormalizeFast;for(w=0;w!==n;w++)o[w].integrate(t,S,C);this.clearForces(),this.broadphase.dirty=!0,l&&(h.integrate=hs.now()-u),this.stepnumber+=1,this.dispatchEvent(cs);let B=!0;if(this.allowSleep)for(B=!1,w=0;w!==n;w++){const t=o[w];t.sleepTick(this.time),t.sleepState!==R.SLEEPING&&(B=!0)}this.hasActiveBodies=B}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(ws,fs),t){for(let t=0,e=ws.length;t<e;t+=2)gs.bodyA=this.getBodyById(ws[t]),gs.bodyB=this.getBodyById(ws[t+1]),this.dispatchEvent(gs);gs.bodyA=gs.bodyB=null}if(e){for(let t=0,e=fs.length;t<e;t+=2)xs.bodyA=this.getBodyById(fs[t]),xs.bodyB=this.getBodyById(fs[t+1]),this.dispatchEvent(xs);xs.bodyA=xs.bodyB=null}ws.length=fs.length=0;const i=this.hasAnyEventListener("beginShapeContact"),s=this.hasAnyEventListener("endShapeContact");if((i||s)&&this.shapeOverlapKeeper.getDiff(ws,fs),i){for(let t=0,e=ws.length;t<e;t+=2){const e=this.getShapeById(ws[t]),i=this.getShapeById(ws[t+1]);bs.shapeA=e,bs.shapeB=i,e&&(bs.bodyA=e.body),i&&(bs.bodyB=i.body),this.dispatchEvent(bs)}bs.bodyA=bs.bodyB=bs.shapeA=bs.shapeB=null}if(s){for(let t=0,e=fs.length;t<e;t+=2){const e=this.getShapeById(fs[t]),i=this.getShapeById(fs[t+1]);Es.shapeA=e,Es.shapeB=i,e&&(Es.bodyA=e.body),i&&(Es.bodyB=i.body),this.dispatchEvent(Es)}Es.bodyA=Es.bodyB=Es.shapeA=Es.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let i=0;i!==e;i++){const e=t[i];e.force,e.torque,e.force.set(0,0,0),e.torque.set(0,0,0)}}}new h;const ls=new ht,hs=globalThis.performance||{};if(!hs.now){let t=Date.now();hs.timing&&hs.timing.navigationStart&&(t=hs.timing.navigationStart),hs.now=()=>Date.now()-t}new o;const cs={type:"postStep"},us={type:"preStep"},ds={type:R.COLLIDE_EVENT_NAME,body:null,contact:null},ps=[],ys=[],vs=[],ms=[],ws=[],fs=[],gs={type:"beginContact",bodyA:null,bodyB:null},xs={type:"endContact",bodyA:null,bodyB:null},bs={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},Es={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null}}}]);