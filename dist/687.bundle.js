"use strict";(self.webpackChunkstrworld=self.webpackChunkstrworld||[]).push([[687],{687:(t,e,s)=>{s.d(e,{AO:()=>n,Ab:()=>Ge,Hb:()=>F,XM:()=>he,_C:()=>xe,_f:()=>y,q3:()=>Gi,uT:()=>q,xu:()=>A,zN:()=>ae});class i{constructor(t){void 0===t&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){void 0===t&&(t=new n);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){void 0===e&&(e=new n);const s=this.elements,i=t.x,o=t.y,r=t.z;return e.x=s[0]*i+s[1]*o+s[2]*r,e.y=s[3]*i+s[4]*o+s[5]*r,e.z=s[6]*i+s[7]*o+s[8]*r,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){void 0===e&&(e=new i);const s=this.elements,o=t.elements,n=e.elements,r=s[0],a=s[1],l=s[2],h=s[3],c=s[4],u=s[5],d=s[6],p=s[7],y=s[8],v=o[0],m=o[1],w=o[2],f=o[3],g=o[4],x=o[5],b=o[6],E=o[7],S=o[8];return n[0]=r*v+a*f+l*b,n[1]=r*m+a*g+l*E,n[2]=r*w+a*x+l*S,n[3]=h*v+c*f+u*b,n[4]=h*m+c*g+u*E,n[5]=h*w+c*x+u*S,n[6]=d*v+p*f+y*b,n[7]=d*m+p*g+y*E,n[8]=d*w+p*x+y*S,e}scale(t,e){void 0===e&&(e=new i);const s=this.elements,o=e.elements;for(let e=0;3!==e;e++)o[3*e+0]=t.x*s[3*e+0],o[3*e+1]=t.y*s[3*e+1],o[3*e+2]=t.z*s[3*e+2];return e}solve(t,e){void 0===e&&(e=new n);const s=[];let i,o;for(i=0;i<12;i++)s.push(0);for(i=0;i<3;i++)for(o=0;o<3;o++)s[i+4*o]=this.elements[i+3*o];s[3]=t.x,s[7]=t.y,s[11]=t.z;let r=3;const a=r;let l;let h;do{if(i=a-r,0===s[i+4*i])for(o=i+1;o<a;o++)if(0!==s[i+4*o]){l=4;do{h=4-l,s[h+4*i]+=s[h+4*o]}while(--l);break}if(0!==s[i+4*i])for(o=i+1;o<a;o++){const t=s[i+4*o]/s[i+4*i];l=4;do{h=4-l,s[h+4*o]=h<=i?0:s[h+4*o]-s[h+4*i]*t}while(--l)}}while(--r);if(e.z=s[11]/s[10],e.y=(s[7]-s[6]*e.z)/s[5],e.x=(s[3]-s[2]*e.z-s[1]*e.y)/s[0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(void 0===s)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";for(let e=0;e<9;e++)t+=this.elements[e]+",";return t}reverse(t){void 0===t&&(t=new i);const e=o;let s,n;for(s=0;s<3;s++)for(n=0;n<3;n++)e[s+6*n]=this.elements[s+3*n];e[3]=1,e[9]=0,e[15]=0,e[4]=0,e[10]=1,e[16]=0,e[5]=0,e[11]=0,e[17]=1;let r=3;const a=r;let l;let h;do{if(s=a-r,0===e[s+6*s])for(n=s+1;n<a;n++)if(0!==e[s+6*n]){l=6;do{h=6-l,e[h+6*s]+=e[h+6*n]}while(--l);break}if(0!==e[s+6*s])for(n=s+1;n<a;n++){const t=e[s+6*n]/e[s+6*s];l=6;do{h=6-l,e[h+6*n]=h<=s?0:e[h+6*n]-e[h+6*s]*t}while(--l)}}while(--r);s=2;do{n=s-1;do{const t=e[s+6*n]/e[s+6*s];l=6;do{h=6-l,e[h+6*n]=e[h+6*n]-e[h+6*s]*t}while(--l)}while(n--)}while(--s);s=2;do{const t=1/e[s+6*s];l=6;do{h=6-l,e[h+6*s]=e[h+6*s]*t}while(--l)}while(s--);s=2;do{n=2;do{if(h=e[3+n+6*s],isNaN(h)||h===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(s,n,h)}while(n--)}while(s--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,i=t.z,o=t.w,n=e+e,r=s+s,a=i+i,l=e*n,h=e*r,c=e*a,u=s*r,d=s*a,p=i*a,y=o*n,v=o*r,m=o*a,w=this.elements;return w[0]=1-(u+p),w[1]=h-m,w[2]=c+v,w[3]=h+m,w[4]=1-(l+p),w[5]=d-y,w[6]=c-v,w[7]=d+y,w[8]=1-(l+u),this}transpose(t){void 0===t&&(t=new i);const e=this.elements,s=t.elements;let o;return s[0]=e[0],s[4]=e[4],s[8]=e[8],o=e[1],s[1]=e[3],s[3]=o,o=e[2],s[2]=e[6],s[6]=o,o=e[5],s[5]=e[7],s[7]=o,t}}const o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class n{constructor(t,e,s){void 0===t&&(t=0),void 0===e&&(e=0),void 0===s&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){void 0===e&&(e=new n);const s=t.x,i=t.y,o=t.z,r=this.x,a=this.y,l=this.z;return e.x=a*o-l*i,e.y=l*s-r*o,e.z=r*i-a*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new n(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new n(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new i([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,i=Math.sqrt(t*t+e*e+s*s);if(i>0){const t=1/i;this.x*=t,this.y*=t,this.z*=t}else this.x=0,this.y=0,this.z=0;return i}unit(t){void 0===t&&(t=new n);const e=this.x,s=this.y,i=this.z;let o=Math.sqrt(e*e+s*s+i*i);return o>0?(o=1/o,t.x=e*o,t.y=s*o,t.z=i*o):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,i=this.z,o=t.x,n=t.y,r=t.z;return Math.sqrt((o-e)*(o-e)+(n-s)*(n-s)+(r-i)*(r-i))}distanceSquared(t){const e=this.x,s=this.y,i=this.z,o=t.x,n=t.y,r=t.z;return(o-e)*(o-e)+(n-s)*(n-s)+(r-i)*(r-i)}scale(t,e){void 0===e&&(e=new n);const s=this.x,i=this.y,o=this.z;return e.x=t*s,e.y=t*i,e.z=t*o,e}vmul(t,e){return void 0===e&&(e=new n),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return void 0===s&&(s=new n),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t){return void 0===t&&(t=new n),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const i=r,o=1/s;i.set(this.x*o,this.y*o,this.z*o);const n=a;Math.abs(i.x)<.9?(n.set(1,0,0),i.cross(n,t)):(n.set(0,1,0),i.cross(n,t)),i.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const i=this.x,o=this.y,n=this.z;s.x=i+(t.x-i)*e,s.y=o+(t.y-o)*e,s.z=n+(t.z-n)*e}almostEquals(t,e){return void 0===e&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return void 0===t&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(l),l.almostEquals(t,e)}clone(){return new n(this.x,this.y,this.z)}}n.ZERO=new n(0,0,0),n.UNIT_X=new n(1,0,0),n.UNIT_Y=new n(0,1,0),n.UNIT_Z=new n(0,0,1);const r=new n,a=new n,l=new n;class h{constructor(t){void 0===t&&(t={}),this.lowerBound=new n,this.upperBound=new n,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,i){const o=this.lowerBound,n=this.upperBound,r=s;o.copy(t[0]),r&&r.vmult(o,o),n.copy(o);for(let e=1;e<t.length;e++){let s=t[e];r&&(r.vmult(s,c),s=c),s.x>n.x&&(n.x=s.x),s.x<o.x&&(o.x=s.x),s.y>n.y&&(n.y=s.y),s.y<o.y&&(o.y=s.y),s.z>n.z&&(n.z=s.z),s.z<o.z&&(o.z=s.z)}return e&&(e.vadd(o,o),e.vadd(n,n)),i&&(o.x-=i,o.y-=i,o.z-=i,n.x+=i,n.y+=i,n.z+=i),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new h).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,o=t.upperBound,n=i.x<=s.x&&s.x<=o.x||e.x<=o.x&&o.x<=s.x,r=i.y<=s.y&&s.y<=o.y||e.y<=o.y&&o.y<=s.y,a=i.z<=s.z&&s.z<=o.z||e.z<=o.z&&o.z<=s.z;return n&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,o=t.upperBound;return e.x<=i.x&&s.x>=o.x&&e.y<=i.y&&s.y>=o.y&&e.z<=i.z&&s.z>=o.z}getCorners(t,e,s,i,o,n,r,a){const l=this.lowerBound,h=this.upperBound;t.copy(l),e.set(h.x,l.y,l.z),s.set(h.x,h.y,l.z),i.set(l.x,h.y,h.z),o.set(h.x,l.y,h.z),n.set(l.x,h.y,l.z),r.set(l.x,l.y,h.z),a.copy(h)}toLocalFrame(t,e){const s=u,i=s[0],o=s[1],n=s[2],r=s[3],a=s[4],l=s[5],h=s[6],c=s[7];this.getCorners(i,o,n,r,a,l,h,c);for(let e=0;8!==e;e++){const i=s[e];t.pointToLocal(i,i)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=u,i=s[0],o=s[1],n=s[2],r=s[3],a=s[4],l=s[5],h=s[6],c=s[7];this.getCorners(i,o,n,r,a,l,h,c);for(let e=0;8!==e;e++){const i=s[e];t.pointToWorld(i,i)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,i=1/e.x,o=1/e.y,n=1/e.z,r=(this.lowerBound.x-s.x)*i,a=(this.upperBound.x-s.x)*i,l=(this.lowerBound.y-s.y)*o,h=(this.upperBound.y-s.y)*o,c=(this.lowerBound.z-s.z)*n,u=(this.upperBound.z-s.z)*n,d=Math.max(Math.max(Math.min(r,a),Math.min(l,h)),Math.min(c,u)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,h)),Math.max(c,u));return!(p<0)&&!(d>p)}}const c=new n,u=[new n,new n,new n,new n,new n,new n,new n,new n];class d{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:i}=e;if(i>s){const t=i;i=s,s=t}return this.matrix[(s*(s+1)>>1)+i-1]}set(t,e,s){let{index:i}=t,{index:o}=e;if(o>i){const t=o;o=i,i=t}this.matrix[(i*(i+1)>>1)+o-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class p{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const s=this._listeners;return void 0===s[t]&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const s=this._listeners;return!(void 0===s[t]||!s[t].includes(e))}hasAnyEventListener(t){if(void 0===this._listeners)return!1;return void 0!==this._listeners[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const s=this._listeners;if(void 0===s[t])return this;const i=s[t].indexOf(e);return-1!==i&&s[t].splice(i,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const e=this._listeners[t.type];if(void 0!==e){t.target=this;for(let s=0,i=e.length;s<i;s++)e[s].call(this,t)}return this}}class y{constructor(t,e,s,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===s&&(s=0),void 0===i&&(i=1),this.x=t,this.y=e,this.z=s,this.w=i}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(.5*e);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(.5*e),this}toAxisAngle(t){void 0===t&&(t=new n),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const e=v,s=m;t.tangents(e,s),this.setFromAxisAngle(e,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){void 0===e&&(e=new y);const s=this.x,i=this.y,o=this.z,n=this.w,r=t.x,a=t.y,l=t.z,h=t.w;return e.x=s*h+n*r+i*l-o*a,e.y=i*h+n*a+o*r-s*l,e.z=o*h+n*l+s*a-i*r,e.w=n*h-s*r-i*a-o*l,e}inverse(t){void 0===t&&(t=new y);const e=this.x,s=this.y,i=this.z,o=this.w;this.conjugate(t);const n=1/(e*e+s*s+i*i+o*o);return t.x*=n,t.y*=n,t.z*=n,t.w*=n,t}conjugate(t){return void 0===t&&(t=new y),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){void 0===e&&(e=new n);const s=t.x,i=t.y,o=t.z,r=this.x,a=this.y,l=this.z,h=this.w,c=h*s+a*o-l*i,u=h*i+l*s-r*o,d=h*o+r*i-a*s,p=-r*s-a*i-l*o;return e.x=c*h+p*-r+u*-l-d*-a,e.y=u*h+p*-a+d*-r-c*-l,e.z=d*h+p*-l+c*-a-u*-r,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){let s,i,o;void 0===e&&(e="YZX");const n=this.x,r=this.y,a=this.z,l=this.w;if("YZX"!==e)throw new Error(`Euler order ${e} not supported yet.`);{const t=n*r+a*l;if(t>.499&&(s=2*Math.atan2(n,l),i=Math.PI/2,o=0),t<-.499&&(s=-2*Math.atan2(n,l),i=-Math.PI/2,o=0),void 0===s){const e=n*n,h=r*r,c=a*a;s=Math.atan2(2*r*l-2*n*a,1-2*h-2*c),i=Math.asin(2*t),o=Math.atan2(2*n*l-2*r*a,1-2*e-2*c)}}t.y=s,t.z=i,t.x=o}setFromEuler(t,e,s,i){void 0===i&&(i="XYZ");const o=Math.cos(t/2),n=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),l=Math.sin(e/2),h=Math.sin(s/2);return"XYZ"===i?(this.x=a*n*r+o*l*h,this.y=o*l*r-a*n*h,this.z=o*n*h+a*l*r,this.w=o*n*r-a*l*h):"YXZ"===i?(this.x=a*n*r+o*l*h,this.y=o*l*r-a*n*h,this.z=o*n*h-a*l*r,this.w=o*n*r+a*l*h):"ZXY"===i?(this.x=a*n*r-o*l*h,this.y=o*l*r+a*n*h,this.z=o*n*h+a*l*r,this.w=o*n*r-a*l*h):"ZYX"===i?(this.x=a*n*r-o*l*h,this.y=o*l*r+a*n*h,this.z=o*n*h-a*l*r,this.w=o*n*r+a*l*h):"YZX"===i?(this.x=a*n*r+o*l*h,this.y=o*l*r+a*n*h,this.z=o*n*h-a*l*r,this.w=o*n*r-a*l*h):"XZY"===i&&(this.x=a*n*r-o*l*h,this.y=o*l*r-a*n*h,this.z=o*n*h+a*l*r,this.w=o*n*r+a*l*h),this}clone(){return new y(this.x,this.y,this.z,this.w)}slerp(t,e,s){void 0===s&&(s=new y);const i=this.x,o=this.y,n=this.z,r=this.w;let a,l,h,c,u,d=t.x,p=t.y,v=t.z,m=t.w;return l=i*d+o*p+n*v+r*m,l<0&&(l=-l,d=-d,p=-p,v=-v,m=-m),1-l>1e-6?(a=Math.acos(l),h=Math.sin(a),c=Math.sin((1-e)*a)/h,u=Math.sin(e*a)/h):(c=1-e,u=e),s.x=c*i+u*d,s.y=c*o+u*p,s.z=c*n+u*v,s.w=c*r+u*m,s}integrate(t,e,s,i){void 0===i&&(i=new y);const o=t.x*s.x,n=t.y*s.y,r=t.z*s.z,a=this.x,l=this.y,h=this.z,c=this.w,u=.5*e;return i.x+=u*(o*c+n*h-r*l),i.y+=u*(n*c+r*a-o*h),i.z+=u*(r*c+o*l-n*a),i.w+=u*(-o*a-n*l-r*h),i}}const v=new n,m=new n;class w{constructor(t){void 0===t&&(t={}),this.id=w.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=!t.collisionResponse||t.collisionResponse,this.collisionFilterGroup=void 0!==t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask=void 0!==t.collisionFilterMask?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,i){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}w.idCounter=0,w.types={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class f{constructor(t){void 0===t&&(t={}),this.position=new n,this.quaternion=new y,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return f.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return f.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return void 0===e&&(e=new n),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,i){return void 0===i&&(i=new n),s.vsub(t,i),e.conjugate(g),g.vmult(i,i),i}static pointToWorldFrame(t,e,s,i){return void 0===i&&(i=new n),e.vmult(s,i),i.vadd(t,i),i}static vectorToWorldFrame(t,e,s){return void 0===s&&(s=new n),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,i){return void 0===i&&(i=new n),e.w*=-1,e.vmult(s,i),e.w*=-1,i}}const g=new y;class x extends w{constructor(t){void 0===t&&(t={});const{vertices:e=[],faces:s=[],normals:i=[],axes:o,boundingSphereRadius:n}=t;super({type:w.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=i,0===this.faceNormals.length&&this.computeNormals(),n?this.boundingSphereRadius=n:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=o?o.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const i=new n;for(let o=0;o!==t.length;o++){const n=t[o],r=n.length;for(let t=0;t!==r;t++){const o=(t+1)%r;e[n[t]].vsub(e[n[o]],i),i.normalize();let a=!1;for(let t=0;t!==s.length;t++)if(s[t].almostEquals(i)||s[t].almostEquals(i)){a=!0;break}a||s.push(i.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let e=0;e<this.faces[t].length;e++)if(!this.vertices[this.faces[t][e]])throw new Error(`Vertex ${this.faces[t][e]} not found!`);const e=this.faceNormals[t]||new n;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let e=0;e<this.faces[t].length;e++)console.warn(`.vertices[${this.faces[t][e]}] = Vec3(${this.vertices[this.faces[t][e]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],i=this.vertices[s[0]],o=this.vertices[s[1]],n=this.vertices[s[2]];x.computeNormal(i,o,n,e)}static computeNormal(t,e,s,i){const o=new n,r=new n;e.vsub(t,r),s.vsub(e,o),o.cross(r,i),i.isZero()||i.normalize()}clipAgainstHull(t,e,s,i,o,r,a,l,h){const c=new n;let u=-1,d=-Number.MAX_VALUE;for(let t=0;t<s.faces.length;t++){c.copy(s.faceNormals[t]),o.vmult(c,c);const e=c.dot(r);e>d&&(d=e,u=t)}const p=[];for(let t=0;t<s.faces[u].length;t++){const e=s.vertices[s.faces[u][t]],r=new n;r.copy(e),o.vmult(r,r),i.vadd(r,r),p.push(r)}u>=0&&this.clipFaceAgainstHull(r,t,e,p,a,l,h)}findSeparatingAxis(t,e,s,i,o,r,a,l){const h=new n,c=new n,u=new n,d=new n,p=new n,y=new n;let v=Number.MAX_VALUE;const m=this;if(m.uniqueAxes)for(let n=0;n!==m.uniqueAxes.length;n++){s.vmult(m.uniqueAxes[n],h);const a=m.testSepAxis(h,t,e,s,i,o);if(!1===a)return!1;a<v&&(v=a,r.copy(h))}else{const n=a?a.length:m.faces.length;for(let l=0;l<n;l++){const n=a?a[l]:l;h.copy(m.faceNormals[n]),s.vmult(h,h);const c=m.testSepAxis(h,t,e,s,i,o);if(!1===c)return!1;c<v&&(v=c,r.copy(h))}}if(t.uniqueAxes)for(let n=0;n!==t.uniqueAxes.length;n++){o.vmult(t.uniqueAxes[n],c);const a=m.testSepAxis(c,t,e,s,i,o);if(!1===a)return!1;a<v&&(v=a,r.copy(c))}else{const n=l?l.length:t.faces.length;for(let a=0;a<n;a++){const n=l?l[a]:a;c.copy(t.faceNormals[n]),o.vmult(c,c);const h=m.testSepAxis(c,t,e,s,i,o);if(!1===h)return!1;h<v&&(v=h,r.copy(c))}}for(let n=0;n!==m.uniqueEdges.length;n++){s.vmult(m.uniqueEdges[n],d);for(let n=0;n!==t.uniqueEdges.length;n++)if(o.vmult(t.uniqueEdges[n],p),d.cross(p,y),!y.almostZero()){y.normalize();const n=m.testSepAxis(y,t,e,s,i,o);if(!1===n)return!1;n<v&&(v=n,r.copy(y))}}return i.vsub(e,u),u.dot(r)>0&&r.negate(r),!0}testSepAxis(t,e,s,i,o,n){x.project(this,t,s,i,b),x.project(e,t,o,n,E);const r=b[0],a=b[1],l=E[0],h=E[1];if(r<h||l<a)return!1;const c=r-h,u=l-a;return c<u?c:u}calculateLocalInertia(t,e){const s=new n,i=new n;this.computeLocalAABB(i,s);const o=s.x-i.x,r=s.y-i.y,a=s.z-i.z;e.x=1/12*t*(2*r*2*r+2*a*2*a),e.y=1/12*t*(2*o*2*o+2*a*2*a),e.z=1/12*t*(2*r*2*r+2*o*2*o)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],i=this.vertices[e[0]];return-s.dot(i)}clipFaceAgainstHull(t,e,s,i,o,r,a){const l=new n,h=new n,c=new n,u=new n,d=new n,p=new n,y=new n,v=new n,m=this,w=i,f=[];let g=-1,x=Number.MAX_VALUE;for(let e=0;e<m.faces.length;e++){l.copy(m.faceNormals[e]),s.vmult(l,l);const i=l.dot(t);i<x&&(x=i,g=e)}if(g<0)return;const b=m.faces[g];b.connectedFaces=[];for(let t=0;t<m.faces.length;t++)for(let e=0;e<m.faces[t].length;e++)-1!==b.indexOf(m.faces[t][e])&&t!==g&&-1===b.connectedFaces.indexOf(t)&&b.connectedFaces.push(t);const E=b.length;for(let t=0;t<E;t++){const i=m.vertices[b[t]],o=m.vertices[b[(t+1)%E]];i.vsub(o,h),c.copy(h),s.vmult(c,c),e.vadd(c,c),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),c.cross(u,d),d.negate(d),p.copy(i),s.vmult(p,p),e.vadd(p,p);const n=b.connectedFaces[t];y.copy(this.faceNormals[n]);const r=this.getPlaneConstantOfFace(n);v.copy(y),s.vmult(v,v);const a=r-v.dot(e);for(this.clipFaceAgainstPlane(w,f,v,a);w.length;)w.shift();for(;f.length;)w.push(f.shift())}y.copy(this.faceNormals[g]);const S=this.getPlaneConstantOfFace(g);v.copy(y),s.vmult(v,v);const z=S-v.dot(e);for(let t=0;t<w.length;t++){let e=v.dot(w[t])+z;if(e<=o&&(console.log(`clamped: depth=${e} to minDist=${o}`),e=o),e<=r){const s=w[t];if(e<=1e-6){const t={point:s,normal:v,depth:e};a.push(t)}}}}clipFaceAgainstPlane(t,e,s,i){let o,r;const a=t.length;if(a<2)return e;let l=t[t.length-1],h=t[0];o=s.dot(l)+i;for(let c=0;c<a;c++){if(h=t[c],r=s.dot(h)+i,o<0)if(r<0){const t=new n;t.copy(h),e.push(t)}else{const t=new n;l.lerp(h,o/(o-r),t),e.push(t)}else if(r<0){const t=new n;l.lerp(h,o/(o-r),t),e.push(t),e.push(h)}l=h,o=r}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new n);const s=this.vertices,i=this.worldVertices;for(let o=0;o!==this.vertices.length;o++)e.vmult(s[o],i[o]),t.vadd(i[o],i[o]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let i=0;i<this.vertices.length;i++){const o=s[i];o.x<t.x?t.x=o.x:o.x>e.x&&(e.x=o.x),o.y<t.y?t.y=o.y:o.y>e.y&&(e.y=o.y),o.z<t.z?t.z=o.z:o.z>e.z&&(e.z=o.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new n);const s=this.faceNormals,i=this.worldFaceNormals;for(let o=0;o!==e;o++)t.vmult(s[o],i[o]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const i=e[s].lengthSquared();i>t&&(t=i)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const o=this.vertices;let r,a,l,h,c,u,d=new n;for(let s=0;s<o.length;s++){d.copy(o[s]),e.vmult(d,d),t.vadd(d,d);const i=d;(void 0===r||i.x<r)&&(r=i.x),(void 0===h||i.x>h)&&(h=i.x),(void 0===a||i.y<a)&&(a=i.y),(void 0===c||i.y>c)&&(c=i.y),(void 0===l||i.z<l)&&(l=i.z),(void 0===u||i.z>u)&&(u=i.z)}s.set(r,a,l),i.set(h,c,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){void 0===t&&(t=new n);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,i=this.vertices;if(e){for(let t=0;t<s;t++){const s=i[t];e.vmult(s,s)}for(let t=0;t<this.faceNormals.length;t++){const s=this.faceNormals[t];e.vmult(s,s)}}if(t)for(let e=0;e<s;e++){const s=i[e];s.vadd(t,s)}}pointIsInside(t){const e=this.vertices,s=this.faces,i=this.faceNormals,o=new n;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let a=i[r];const l=e[s[r][0]],h=new n;t.vsub(l,h);const c=a.dot(h),u=new n;o.vsub(l,u);const d=a.dot(u);if(c<0&&d>0||c>0&&d<0)return!1}return-1}static project(t,e,s,i,o){const n=t.vertices.length,r=S;let a=0,l=0;const h=z,c=t.vertices;h.setZero(),f.vectorToLocalFrame(s,i,e,r),f.pointToLocalFrame(s,i,h,h);const u=h.dot(r);l=a=c[0].dot(r);for(let t=1;t<n;t++){const e=c[t].dot(r);e>a&&(a=e),e<l&&(l=e)}if(l-=u,a-=u,l>a){const t=l;l=a,a=t}o[0]=a,o[1]=l}}const b=[],E=[],S=(new n,new n),z=new n;class A extends w{constructor(t){super({type:w.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,i=n,o=[new i(-t,-e,-s),new i(t,-e,-s),new i(t,e,-s),new i(-t,e,-s),new i(-t,-e,s),new i(t,-e,s),new i(t,e,s),new i(-t,e,s)],r=[new i(0,0,1),new i(0,1,0),new i(1,0,0)],a=new x({vertices:o,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e){return void 0===e&&(e=new n),A.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const i=t;s.x=1/12*e*(2*i.y*2*i.y+2*i.z*2*i.z),s.y=1/12*e*(2*i.x*2*i.x+2*i.z*2*i.z),s.z=1/12*e*(2*i.y*2*i.y+2*i.x*2*i.x)}getSideNormals(t,e){const s=t,i=this.halfExtents;if(s[0].set(i.x,0,0),s[1].set(0,i.y,0),s[2].set(0,0,i.z),s[3].set(-i.x,0,0),s[4].set(0,-i.y,0),s[5].set(0,0,-i.z),void 0!==e)for(let t=0;t!==s.length;t++)e.vmult(s[t],s[t]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const i=this.halfExtents,o=[[i.x,i.y,i.z],[-i.x,i.y,i.z],[-i.x,-i.y,i.z],[-i.x,-i.y,-i.z],[i.x,-i.y,-i.z],[i.x,i.y,-i.z],[-i.x,i.y,-i.z],[i.x,-i.y,i.z]];for(let i=0;i<o.length;i++)C.set(o[i][0],o[i][1],o[i][2]),e.vmult(C,C),t.vadd(C,C),s(C.x,C.y,C.z)}calculateWorldAABB(t,e,s,i){const o=this.halfExtents;B[0].set(o.x,o.y,o.z),B[1].set(-o.x,o.y,o.z),B[2].set(-o.x,-o.y,o.z),B[3].set(-o.x,-o.y,-o.z),B[4].set(o.x,-o.y,-o.z),B[5].set(o.x,o.y,-o.z),B[6].set(-o.x,o.y,-o.z),B[7].set(o.x,-o.y,o.z);const n=B[0];e.vmult(n,n),t.vadd(n,n),i.copy(n),s.copy(n);for(let o=1;o<8;o++){const n=B[o];e.vmult(n,n),t.vadd(n,n);const r=n.x,a=n.y,l=n.z;r>i.x&&(i.x=r),a>i.y&&(i.y=a),l>i.z&&(i.z=l),r<s.x&&(s.x=r),a<s.y&&(s.y=a),l<s.z&&(s.z=l)}}}const C=new n,B=[new n,new n,new n,new n,new n,new n,new n,new n],F={DYNAMIC:1,STATIC:2,KINEMATIC:4},R=0,I=1,M=2;class q extends p{constructor(t){void 0===t&&(t={}),super(),this.id=q.idCounter++,this.index=-1,this.world=null,this.vlambda=new n,this.collisionFilterGroup="number"==typeof t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask="number"==typeof t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionResponse="boolean"!=typeof t.collisionResponse||t.collisionResponse,this.position=new n,this.previousPosition=new n,this.interpolatedPosition=new n,this.initPosition=new n,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new n,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new n,this.force=new n;const e="number"==typeof t.mass?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping="number"==typeof t.linearDamping?t.linearDamping:.01,this.type=e<=0?q.STATIC:q.DYNAMIC,typeof t.type==typeof q.STATIC&&(this.type=t.type),this.allowSleep=void 0===t.allowSleep||t.allowSleep,this.sleepState=q.AWAKE,this.sleepSpeedLimit=void 0!==t.sleepSpeedLimit?t.sleepSpeedLimit:.1,this.sleepTimeLimit=void 0!==t.sleepTimeLimit?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new n,this.quaternion=new y,this.initQuaternion=new y,this.previousQuaternion=new y,this.interpolatedQuaternion=new y,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new n,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new n,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new n,this.invInertia=new n,this.invInertiaWorld=new i,this.invMassSolve=0,this.invInertiaSolve=new n,this.invInertiaWorldSolve=new i,this.fixedRotation=void 0!==t.fixedRotation&&t.fixedRotation,this.angularDamping=void 0!==t.angularDamping?t.angularDamping:.01,this.linearFactor=new n(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new n(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new h,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new n,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=q.AWAKE,this.wakeUpAfterNarrowphase=!1,t===q.SLEEPING&&this.dispatchEvent(q.wakeupEvent)}sleep(){this.sleepState=q.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),i=this.sleepSpeedLimit**2;e===q.AWAKE&&s<i?(this.sleepState=q.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(q.sleepyEvent)):e===q.SLEEPY&&s>i?this.wakeUp():e===q.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(q.sleepEvent))}}updateSolveMassProperties(){this.sleepState===q.SLEEPING||this.type===q.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return void 0===e&&(e=new n),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return void 0===e&&(e=new n),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return void 0===e&&(e=new n),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return void 0===e&&(e=new n),this.quaternion.vmult(t,e),e}addShape(t,e,s){const i=new n,o=new y;return e&&i.copy(e),s&&o.copy(s),this.shapes.push(t),this.shapeOffsets.push(i),this.shapeOrientations.push(o),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return-1===e?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let i=0;for(let o=0;o!==s;o++){const s=t[o];s.updateBoundingSphereRadius();const n=e[o].length(),r=s.boundingSphereRadius;n+r>i&&(i=n+r)}this.boundingRadius=i}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,i=t.length,o=T,n=N,r=this.quaternion,a=this.aabb,l=P;for(let h=0;h!==i;h++){const i=t[h];r.vmult(e[h],o),o.vadd(this.position,o),r.mult(s[h],n),i.calculateWorldAABB(o,n,l.lowerBound,l.upperBound),0===h?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const t=W,s=L;t.setRotationFromQuaternion(this.quaternion),t.transpose(s),t.scale(e,t),t.mmult(s,this.invInertiaWorld)}else;}applyForce(t,e){if(void 0===e&&(e=new n),this.type!==q.DYNAMIC)return;this.sleepState===q.SLEEPING&&this.wakeUp();const s=j;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(void 0===e&&(e=new n),this.type!==q.DYNAMIC)return;const s=k,i=V;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyForce(s,i)}applyTorque(t){this.type===q.DYNAMIC&&(this.sleepState===q.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(void 0===e&&(e=new n),this.type!==q.DYNAMIC)return;this.sleepState===q.SLEEPING&&this.wakeUp();const s=e,i=O;i.copy(t),i.scale(this.invMass,i),this.velocity.vadd(i,this.velocity);const o=D;s.cross(t,o),this.invInertiaWorld.vmult(o,o),this.angularVelocity.vadd(o,this.angularVelocity)}applyLocalImpulse(t,e){if(void 0===e&&(e=new n),this.type!==q.DYNAMIC)return;const s=H,i=G;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyImpulse(s,i)}updateMassProperties(){const t=Y;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),A.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new n;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==q.DYNAMIC&&this.type!==q.KINEMATIC||this.sleepState===q.SLEEPING)return;const i=this.velocity,o=this.angularVelocity,n=this.position,r=this.force,a=this.torque,l=this.quaternion,h=this.invMass,c=this.invInertiaWorld,u=this.linearFactor,d=h*t;i.x+=r.x*d*u.x,i.y+=r.y*d*u.y,i.z+=r.z*d*u.z;const p=c.elements,y=this.angularFactor,v=a.x*y.x,m=a.y*y.y,w=a.z*y.z;o.x+=t*(p[0]*v+p[1]*m+p[2]*w),o.y+=t*(p[3]*v+p[4]*m+p[5]*w),o.z+=t*(p[6]*v+p[7]*m+p[8]*w),n.x+=i.x*t,n.y+=i.y*t,n.z+=i.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}q.idCounter=0,q.COLLIDE_EVENT_NAME="collide",q.DYNAMIC=F.DYNAMIC,q.STATIC=F.STATIC,q.KINEMATIC=F.KINEMATIC,q.AWAKE=R,q.SLEEPY=I,q.SLEEPING=M,q.wakeupEvent={type:"wakeup"},q.sleepyEvent={type:"sleepy"},q.sleepEvent={type:"sleep"};const T=new n,N=new y,P=new h,W=new i,L=new i,j=(new i,new n),k=new n,V=new n,O=new n,D=new n,H=new n,G=new n,Y=new n;class U{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return 0!=(t.collisionFilterGroup&e.collisionFilterMask)&&0!=(e.collisionFilterGroup&t.collisionFilterMask)&&(0==(t.type&q.STATIC)&&t.sleepState!==q.SLEEPING||0==(e.type&q.STATIC)&&e.sleepState!==q.SLEEPING)}intersectionTest(t,e,s,i){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,i):this.doBoundingSphereBroadphase(t,e,s,i)}doBoundingSphereBroadphase(t,e,s,i){const o=_;e.position.vsub(t.position,o);const n=(t.boundingRadius+e.boundingRadius)**2;o.lengthSquared()<n&&(s.push(t),i.push(e))}doBoundingBoxBroadphase(t,e,s,i){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),i.push(e))}makePairsUnique(t,e){const s=X,i=$,o=K,n=t.length;for(let s=0;s!==n;s++)i[s]=t[s],o[s]=e[s];t.length=0,e.length=0;for(let t=0;t!==n;t++){const e=i[t].id,n=o[t].id,r=e<n?`${e},${n}`:`${n},${e}`;s[r]=t,s.keys.push(r)}for(let n=0;n!==s.keys.length;n++){const n=s.keys.pop(),r=s[n];t.push(i[r]),e.push(o[r]),delete s[n]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new n;t.position.vsub(e.position,s);const i=t.shapes[0],o=e.shapes[0];return Math.pow(i.boundingSphereRadius+o.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const _=new n;new n,new y,new n;const X={keys:[]},$=[],K=[];new n;new n;new n;class Z extends U{constructor(){super()}collisionPairs(t,e,s){const i=t.bodies,o=i.length;let n,r;for(let t=0;t!==o;t++)for(let o=0;o!==t;o++)n=i[t],r=i[o],this.needBroadphaseCollision(n,r)&&this.intersectionTest(n,r,e,s)}aabbQuery(t,e,s){void 0===s&&(s=[]);for(let i=0;i<t.bodies.length;i++){const o=t.bodies[i];o.aabbNeedsUpdate&&o.updateAABB(),o.aabb.overlaps(e)&&s.push(o)}return s}}class Q{constructor(){this.rayFromWorld=new n,this.rayToWorld=new n,this.hitNormalWorld=new n,this.hitPointWorld=new n,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,i,o,n,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(i),this.shape=o,this.body=n,this.distance=r}}let J,tt,et,st,it,ot,nt;const rt=1,at=2,lt=4;J=w.types.SPHERE,tt=w.types.PLANE,et=w.types.BOX,st=w.types.CYLINDER,it=w.types.CONVEXPOLYHEDRON,ot=w.types.HEIGHTFIELD,nt=w.types.TRIMESH;class ht{get[J](){return this._intersectSphere}get[tt](){return this._intersectPlane}get[et](){return this._intersectBox}get[st](){return this._intersectConvex}get[it](){return this._intersectConvex}get[ot](){return this._intersectHeightfield}get[nt](){return this._intersectTrimesh}constructor(t,e){void 0===t&&(t=new n),void 0===e&&(e=new n),this.from=t.clone(),this.to=e.clone(),this.direction=new n,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=ht.ANY,this.result=new Q,this.hasHit=!1,this.callback=t=>{}}intersectWorld(t,e){return this.mode=e.mode||ht.ANY,this.result=e.result||new Q,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=void 0!==e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionFilterGroup=void 0!==e.collisionFilterGroup?e.collisionFilterGroup:-1,this.checkCollisionResponse=void 0===e.checkCollisionResponse||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(ct),ut.length=0,t.broadphase.aabbQuery(t,ct,ut),this.intersectBodies(ut),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse)return;if(0==(this.collisionFilterGroup&t.collisionFilterMask)||0==(t.collisionFilterGroup&this.collisionFilterMask))return;const i=yt,o=vt;for(let e=0,n=t.shapes.length;e<n;e++){const n=t.shapes[e];if((!s||n.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[e],o),t.quaternion.vmult(t.shapeOffsets[e],i),i.vadd(t.position,i),this.intersectShape(n,o,i,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let e=0,s=t.length;!this.result.shouldStop&&e<s;e++)this.intersectBody(t[e])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,i){const o=function(t,e,s){s.vsub(t,Wt);const i=Wt.dot(e);e.scale(i,Lt),Lt.vadd(t,Lt);const o=s.distanceTo(Lt);return o}(this.from,this.direction,s);if(o>t.boundingSphereRadius)return;const n=this[t.type];n&&n.call(this,t,e,s,i,t)}_intersectBox(t,e,s,i,o){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,i,o)}_intersectPlane(t,e,s,i,o){const r=this.from,a=this.to,l=this.direction,h=new n(0,0,1);e.vmult(h,h);const c=new n;r.vsub(s,c);const u=c.dot(h);a.vsub(s,c);if(u*c.dot(h)>0)return;if(r.distanceTo(a)<u)return;const d=h.dot(l);if(Math.abs(d)<this.precision)return;const p=new n,y=new n,v=new n;r.vsub(s,p);const m=-h.dot(p)/d;l.scale(m,y),r.vadd(y,v),this.reportIntersection(h,v,o,i,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,i=this.to,o=this.from;e.x=Math.min(i.x,o.x),e.y=Math.min(i.y,o.y),e.z=Math.min(i.z,o.z),s.x=Math.max(i.x,o.x),s.y=Math.max(i.y,o.y),s.z=Math.max(i.z,o.z)}_intersectHeightfield(t,e,s,i,o){t.data,t.elementSize;const n=Et;n.from.copy(this.from),n.to.copy(this.to),f.pointToLocalFrame(s,e,n.from,n.from),f.pointToLocalFrame(s,e,n.to,n.to),n.updateDirection();const r=St;let a,l,c,u;a=l=0,c=u=t.data.length-1;const d=new h;n.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),c=Math.min(c,r[0]+1),u=Math.min(u,r[1]+1);for(let r=a;r<c;r++)for(let a=l;a<u;a++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(r,a,d),d.overlapsRay(n)){if(t.getConvexTrianglePillar(r,a,!1),f.pointToWorldFrame(s,e,t.pillarOffset,bt),this._intersectConvex(t.pillarConvex,e,bt,i,o,xt),this.result.shouldStop)return;t.getConvexTrianglePillar(r,a,!0),f.pointToWorldFrame(s,e,t.pillarOffset,bt),this._intersectConvex(t.pillarConvex,e,bt,i,o,xt)}}}_intersectSphere(t,e,s,i,o){const n=this.from,r=this.to,a=t.radius,l=(r.x-n.x)**2+(r.y-n.y)**2+(r.z-n.z)**2,h=2*((r.x-n.x)*(n.x-s.x)+(r.y-n.y)*(n.y-s.y)+(r.z-n.z)*(n.z-s.z)),c=h**2-4*l*((n.x-s.x)**2+(n.y-s.y)**2+(n.z-s.z)**2-a**2),u=zt,d=At;if(!(c<0))if(0===c)n.lerp(r,c,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,o,i,-1);else{const t=(-h-Math.sqrt(c))/(2*l),e=(-h+Math.sqrt(c))/(2*l);if(t>=0&&t<=1&&(n.lerp(r,t,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,o,i,-1)),this.result.shouldStop)return;e>=0&&e<=1&&(n.lerp(r,e,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,o,i,-1))}}_intersectConvex(t,e,s,i,o,n){const r=Ct,a=Bt,l=n&&n.faceList||null,h=t.faces,c=t.vertices,u=t.faceNormals,d=this.direction,p=this.from,y=this.to,v=p.distanceTo(y),m=l?l.length:h.length,w=this.result;for(let t=0;!w.shouldStop&&t<m;t++){const n=l?l[t]:t,y=h[n],m=u[n],f=e,g=s;a.copy(c[y[0]]),f.vmult(a,a),a.vadd(g,a),a.vsub(p,a),f.vmult(m,r);const x=d.dot(r);if(Math.abs(x)<this.precision)continue;const b=r.dot(a)/x;if(!(b<0)){d.scale(b,mt),mt.vadd(p,mt),wt.copy(c[y[0]]),f.vmult(wt,wt),g.vadd(wt,wt);for(let t=1;!w.shouldStop&&t<y.length-1;t++){ft.copy(c[y[t]]),gt.copy(c[y[t+1]]),f.vmult(ft,ft),f.vmult(gt,gt),g.vadd(ft,ft),g.vadd(gt,gt);const e=mt.distanceTo(p);!ht.pointInTriangle(mt,wt,ft,gt)&&!ht.pointInTriangle(mt,ft,wt,gt)||e>v||this.reportIntersection(r,mt,o,i,n)}}}}_intersectTrimesh(t,e,s,i,o,n){const r=Ft,a=Nt,l=Pt,h=Bt,c=Rt,u=It,d=Mt,p=Tt,y=qt,v=t.indices;t.vertices;const m=this.from,w=this.to,g=this.direction;l.position.copy(s),l.quaternion.copy(e),f.vectorToLocalFrame(s,e,g,c),f.pointToLocalFrame(s,e,m,u),f.pointToLocalFrame(s,e,w,d),d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,u.x*=t.scale.x,u.y*=t.scale.y,u.z*=t.scale.z,d.vsub(u,c),c.normalize();const x=u.distanceSquared(d);t.tree.rayQuery(this,l,a);for(let n=0,l=a.length;!this.result.shouldStop&&n!==l;n++){const l=a[n];t.getNormal(l,r),t.getVertex(v[3*l],wt),wt.vsub(u,h);const d=c.dot(r),m=r.dot(h)/d;if(m<0)continue;c.scale(m,mt),mt.vadd(u,mt),t.getVertex(v[3*l+1],ft),t.getVertex(v[3*l+2],gt);const w=mt.distanceSquared(u);!ht.pointInTriangle(mt,ft,wt,gt)&&!ht.pointInTriangle(mt,wt,ft,gt)||w>x||(f.vectorToWorldFrame(e,r,y),f.pointToWorldFrame(s,e,mt,p),this.reportIntersection(y,p,o,i,l))}a.length=0}reportIntersection(t,e,s,i,o){const n=this.from,r=this.to,a=n.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=void 0!==o?o:-1,this.mode){case ht.ALL:this.hasHit=!0,l.set(n,r,t,e,s,i,a),l.hasHit=!0,this.callback(l);break;case ht.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,s,i,a));break;case ht.ANY:this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,s,i,a),l.shouldStop=!0}}static pointInTriangle(t,e,s,i){i.vsub(e,Wt),s.vsub(e,dt),t.vsub(e,pt);const o=Wt.dot(Wt),n=Wt.dot(dt),r=Wt.dot(pt),a=dt.dot(dt),l=dt.dot(pt);let h,c;return(h=a*r-n*l)>=0&&(c=o*l-n*r)>=0&&h+c<o*a-n*n}}ht.CLOSEST=rt,ht.ANY=at,ht.ALL=lt;const ct=new h,ut=[],dt=new n,pt=new n,yt=new n,vt=new y,mt=new n,wt=new n,ft=new n,gt=new n;new n,new Q;const xt={faceList:[0]},bt=new n,Et=new ht,St=[],zt=new n,At=new n,Ct=new n,Bt=(new n,new n,new n),Ft=new n,Rt=new n,It=new n,Mt=new n,qt=new n,Tt=new n;new h;const Nt=[],Pt=new f,Wt=new n,Lt=new n;class jt{static defaults(t,e){void 0===t&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class kt{constructor(t,e,s){void 0===s&&(s={}),s=jt.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=kt.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}kt.idCounter=0;class Vt{constructor(){this.spatial=new n,this.rotational=new n}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Ot{constructor(t,e,s,i){void 0===s&&(s=-1e6),void 0===i&&(i=1e6),this.id=Ot.idCounter++,this.minForce=s,this.maxForce=i,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Vt,this.jacobianElementB=new Vt,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const i=e,o=t,n=s;this.a=4/(n*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(n*n*o*(1+4*i))}computeB(t,e,s){const i=this.computeGW();return-this.computeGq()*t-i*e-this.computeGiMf()*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.position,n=i.position;return t.spatial.dot(o)+e.spatial.dot(n)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.velocity,n=i.velocity,r=s.angularVelocity,a=i.angularVelocity;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.vlambda,n=i.vlambda,r=s.wlambda,a=i.wlambda;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.force,n=s.torque,r=i.force,a=i.torque,l=s.invMassSolve,h=i.invMassSolve;return o.scale(l,Dt),r.scale(h,Ht),s.invInertiaWorldSolve.vmult(n,Gt),i.invInertiaWorldSolve.vmult(a,Yt),t.multiplyVectors(Dt,Gt)+e.multiplyVectors(Ht,Yt)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.invMassSolve,n=i.invMassSolve,r=s.invInertiaWorldSolve,a=i.invInertiaWorldSolve;let l=o+n;return r.vmult(t.rotational,Ut),l+=Ut.dot(t.rotational),a.vmult(e.rotational,Ut),l+=Ut.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,i=this.bi,o=this.bj,n=_t;i.vlambda.addScaledVector(i.invMassSolve*t,e.spatial,i.vlambda),o.vlambda.addScaledVector(o.invMassSolve*t,s.spatial,o.vlambda),i.invInertiaWorldSolve.vmult(e.rotational,n),i.wlambda.addScaledVector(t,n,i.wlambda),o.invInertiaWorldSolve.vmult(s.rotational,n),o.wlambda.addScaledVector(t,n,o.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Ot.idCounter=0;const Dt=new n,Ht=new n,Gt=new n,Yt=new n,Ut=new n,_t=new n;class Xt extends Ot{constructor(t,e,s){void 0===s&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new n,this.rj=new n,this.ni=new n}computeB(t){const e=this.a,s=this.b,i=this.bi,o=this.bj,n=this.ri,r=this.rj,a=$t,l=Kt,h=i.velocity,c=i.angularVelocity;i.force,i.torque;const u=o.velocity,d=o.angularVelocity;o.force,o.torque;const p=Zt,y=this.jacobianElementA,v=this.jacobianElementB,m=this.ni;n.cross(m,a),r.cross(m,l),m.negate(y.spatial),a.negate(y.rotational),v.spatial.copy(m),v.rotational.copy(l),p.copy(o.position),p.vadd(r,p),p.vsub(i.position,p),p.vsub(n,p);const w=m.dot(p),f=this.restitution+1;return-w*e-(f*u.dot(m)-f*h.dot(m)+d.dot(l)-c.dot(a))*s-t*this.computeGiMf()}getImpactVelocityAlongNormal(){const t=Qt,e=Jt,s=te,i=ee,o=se;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,i),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(i,e),t.vsub(e,o),this.ni.dot(o)}}const $t=new n,Kt=new n,Zt=new n,Qt=new n,Jt=new n,te=new n,ee=new n,se=new n;class ie extends kt{constructor(t,e,s,i,o){void 0===e&&(e=new n),void 0===i&&(i=new n),void 0===o&&(o=1e6),super(t,s),this.pivotA=e.clone(),this.pivotB=i.clone();const r=this.equationX=new Xt(t,s),a=this.equationY=new Xt(t,s),l=this.equationZ=new Xt(t,s);this.equations.push(r,a,l),r.minForce=a.minForce=l.minForce=-o,r.maxForce=a.maxForce=l.maxForce=o,r.ni.set(1,0,0),a.ni.set(0,1,0),l.ni.set(0,0,1)}update(){const t=this.bodyA,e=this.bodyB,s=this.equationX,i=this.equationY,o=this.equationZ;t.quaternion.vmult(this.pivotA,s.ri),e.quaternion.vmult(this.pivotB,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),o.ri.copy(s.ri),o.rj.copy(s.rj)}}new n,new n;class oe extends Ot{constructor(t,e,s){void 0===s&&(s={});const i=void 0!==s.maxForce?s.maxForce:1e6;super(t,e,-i,i),this.axisA=s.axisA?s.axisA.clone():new n(1,0,0),this.axisB=s.axisB?s.axisB.clone():new n(0,1,0),this.maxAngle=Math.PI/2}computeB(t){const e=this.a,s=this.b,i=this.axisA,o=this.axisB,n=ne,r=re,a=this.jacobianElementA,l=this.jacobianElementB;i.cross(o,n),o.cross(i,r),a.rotational.copy(r),l.rotational.copy(n);return-(Math.cos(this.maxAngle)-i.dot(o))*e-this.computeGW()*s-t*this.computeGiMf()}}const ne=new n,re=new n;new n,new n;class ae extends kt{constructor(t,e,s,i){void 0===i&&(i=1e6),super(t,e),void 0===s&&(s=t.position.distanceTo(e.position)),this.distance=s;const o=this.distanceEquation=new Xt(t,e);this.equations.push(o),o.minForce=-i,o.maxForce=i}update(){const t=this.bodyA,e=this.bodyB,s=this.distanceEquation,i=.5*this.distance,o=s.ni;e.position.vsub(t.position,o),o.normalize(),o.scale(i,s.ri),o.scale(-i,s.rj)}}new n,new n;class le extends Ot{constructor(t,e,s){void 0===s&&(s=1e6),super(t,e,-s,s),this.axisA=new n,this.axisB=new n,this.targetVelocity=0}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.axisA,i=this.axisB,o=this.jacobianElementA,n=this.jacobianElementB;o.rotational.copy(s),i.negate(n.rotational);return-(this.computeGW()-this.targetVelocity)*e-t*this.computeGiMf()}}class he extends ie{constructor(t,e,s){void 0===s&&(s={});const i=void 0!==s.maxForce?s.maxForce:1e6;super(t,s.pivotA?s.pivotA.clone():new n,e,s.pivotB?s.pivotB.clone():new n,i);(this.axisA=s.axisA?s.axisA.clone():new n(1,0,0)).normalize();(this.axisB=s.axisB?s.axisB.clone():new n(1,0,0)).normalize(),this.collideConnected=!!s.collideConnected;const o=this.rotationalEquation1=new oe(t,e,s),r=this.rotationalEquation2=new oe(t,e,s),a=this.motorEquation=new le(t,e,i);a.enabled=!1,this.equations.push(o,r,a)}enableMotor(){this.motorEquation.enabled=!0}disableMotor(){this.motorEquation.enabled=!1}setMotorSpeed(t){this.motorEquation.targetVelocity=t}setMotorMaxForce(t){this.motorEquation.maxForce=t,this.motorEquation.minForce=-t}update(){const t=this.bodyA,e=this.bodyB,s=this.motorEquation,i=this.rotationalEquation1,o=this.rotationalEquation2,n=ce,r=ue,a=this.axisA,l=this.axisB;super.update(),t.quaternion.vmult(a,n),e.quaternion.vmult(l,r),n.tangents(i.axisA,o.axisA),i.axisB.copy(r),o.axisB.copy(r),this.motorEquation.enabled&&(t.quaternion.vmult(this.axisA,s.axisA),e.quaternion.vmult(this.axisB,s.axisB))}}const ce=new n,ue=new n;class de extends Ot{constructor(t,e,s){super(t,e,-s,s),this.ri=new n,this.rj=new n,this.t=new n}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,i=this.rj,o=pe,n=ye,r=this.t;s.cross(r,o),i.cross(r,n);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),o.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(n);return-this.computeGW()*e-t*this.computeGiMf()}}const pe=new n,ye=new n;class ve{constructor(t,e,s){s=jt.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=ve.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}ve.idCounter=0;class me{constructor(t){void 0===t&&(t={});let e="";"string"==typeof t&&(e=t,t={}),this.name=e,this.id=me.idCounter++,this.friction=void 0!==t.friction?t.friction:-1,this.restitution=void 0!==t.restitution?t.restitution:-1}}me.idCounter=0;new n,new n,new n,new n,new n,new n,new n,new n,new n,new n,new n;class we{constructor(t){void 0===t&&(t={}),t=jt.defaults(t,{chassisConnectionPointLocal:new n,chassisConnectionPointWorld:new n,directionLocal:new n,directionWorld:new n,axleLocal:new n,axleWorld:new n,suspensionRestLength:1,suspensionMaxLength:2,radius:1,suspensionStiffness:100,dampingCompression:10,dampingRelaxation:10,frictionSlip:10.5,forwardAcceleration:1,sideAcceleration:1,steering:0,rotation:0,deltaRotation:0,rollInfluence:.01,maxSuspensionForce:Number.MAX_VALUE,isFrontWheel:!0,clippedInvContactDotSuspension:1,suspensionRelativeVelocity:0,suspensionForce:0,slipInfo:0,skidInfo:0,suspensionLength:0,maxSuspensionTravel:1,useCustomSlidingRotationalSpeed:!1,customSlidingRotationalSpeed:-.1}),this.maxSuspensionTravel=t.maxSuspensionTravel,this.customSlidingRotationalSpeed=t.customSlidingRotationalSpeed,this.useCustomSlidingRotationalSpeed=t.useCustomSlidingRotationalSpeed,this.sliding=!1,this.chassisConnectionPointLocal=t.chassisConnectionPointLocal.clone(),this.chassisConnectionPointWorld=t.chassisConnectionPointWorld.clone(),this.directionLocal=t.directionLocal.clone(),this.directionWorld=t.directionWorld.clone(),this.axleLocal=t.axleLocal.clone(),this.axleWorld=t.axleWorld.clone(),this.suspensionRestLength=t.suspensionRestLength,this.suspensionMaxLength=t.suspensionMaxLength,this.radius=t.radius,this.suspensionStiffness=t.suspensionStiffness,this.dampingCompression=t.dampingCompression,this.dampingRelaxation=t.dampingRelaxation,this.frictionSlip=t.frictionSlip,this.forwardAcceleration=t.forwardAcceleration,this.sideAcceleration=t.sideAcceleration,this.steering=0,this.rotation=0,this.deltaRotation=0,this.rollInfluence=t.rollInfluence,this.maxSuspensionForce=t.maxSuspensionForce,this.engineForce=0,this.brake=0,this.isFrontWheel=t.isFrontWheel,this.clippedInvContactDotSuspension=1,this.suspensionRelativeVelocity=0,this.suspensionForce=0,this.slipInfo=0,this.skidInfo=0,this.suspensionLength=0,this.sideImpulse=0,this.forwardImpulse=0,this.raycastResult=new Q,this.worldTransform=new f,this.isInContact=!1}updateWheel(t){const e=this.raycastResult;if(this.isInContact){const s=e.hitNormalWorld.dot(e.directionWorld);e.hitPointWorld.vsub(t.position,ge),t.getVelocityAtWorldPoint(ge,fe);const i=e.hitNormalWorld.dot(fe);if(s>=-.1)this.suspensionRelativeVelocity=0,this.clippedInvContactDotSuspension=10;else{const t=-1/s;this.suspensionRelativeVelocity=i*t,this.clippedInvContactDotSuspension=t}}else e.suspensionLength=this.suspensionRestLength,this.suspensionRelativeVelocity=0,e.directionWorld.scale(-1,e.hitNormalWorld),this.clippedInvContactDotSuspension=1}}const fe=new n,ge=new n;class xe{constructor(t){this.chassisBody=t.chassisBody,this.wheelInfos=[],this.sliding=!1,this.world=null,this.indexRightAxis=void 0!==t.indexRightAxis?t.indexRightAxis:2,this.indexForwardAxis=void 0!==t.indexForwardAxis?t.indexForwardAxis:0,this.indexUpAxis=void 0!==t.indexUpAxis?t.indexUpAxis:1,this.constraints=[],this.preStepCallback=()=>{},this.currentVehicleSpeedKmHour=0,this.numWheelsOnGround=0}addWheel(t){void 0===t&&(t={});const e=new we(t),s=this.wheelInfos.length;return this.wheelInfos.push(e),s}setSteeringValue(t,e){this.wheelInfos[e].steering=t}applyEngineForce(t,e){this.wheelInfos[e].engineForce=t}setBrake(t,e){this.wheelInfos[e].brake=t}addToWorld(t){t.addBody(this.chassisBody);const e=this;this.preStepCallback=()=>{e.updateVehicle(t.dt)},t.addEventListener("preStep",this.preStepCallback),this.world=t}getVehicleAxisWorld(t,e){e.set(0===t?1:0,1===t?1:0,2===t?1:0),this.chassisBody.vectorToWorldFrame(e,e)}updateVehicle(t){const e=this.wheelInfos,s=e.length,i=this.chassisBody;for(let t=0;t<s;t++)this.updateWheelTransform(t);this.currentVehicleSpeedKmHour=3.6*i.velocity.length();const o=new n;this.getVehicleAxisWorld(this.indexForwardAxis,o),o.dot(i.velocity)<0&&(this.currentVehicleSpeedKmHour*=-1);for(let t=0;t<s;t++)this.castRay(e[t]);this.updateSuspension(t);const r=new n,a=new n;for(let o=0;o<s;o++){const s=e[o];let n=s.suspensionForce;n>s.maxSuspensionForce&&(n=s.maxSuspensionForce),s.raycastResult.hitNormalWorld.scale(n*t,r),s.raycastResult.hitPointWorld.vsub(i.position,a),i.applyImpulse(r,a)}this.updateFriction(t);const l=new n,h=new n,c=new n;for(let o=0;o<s;o++){const s=e[o];i.getVelocityAtWorldPoint(s.chassisConnectionPointWorld,c);let n=1;if(1===this.indexUpAxis)n=-1;if(s.isInContact){this.getVehicleAxisWorld(this.indexForwardAxis,h);const e=h.dot(s.raycastResult.hitNormalWorld);s.raycastResult.hitNormalWorld.scale(e,l),h.vsub(l,h);const i=h.dot(c);s.deltaRotation=n*i*t/s.radius}!s.sliding&&s.isInContact||0===s.engineForce||!s.useCustomSlidingRotationalSpeed||(s.deltaRotation=(s.engineForce>0?1:-1)*s.customSlidingRotationalSpeed*t),Math.abs(s.brake)>Math.abs(s.engineForce)&&(s.deltaRotation=0),s.rotation+=s.deltaRotation,s.deltaRotation*=.99}}updateSuspension(t){const e=this.chassisBody.mass,s=this.wheelInfos,i=s.length;for(let t=0;t<i;t++){const i=s[t];if(i.isInContact){let t;const s=i.suspensionRestLength-i.suspensionLength;t=i.suspensionStiffness*s*i.clippedInvContactDotSuspension;const o=i.suspensionRelativeVelocity;let n;n=o<0?i.dampingCompression:i.dampingRelaxation,t-=n*o,i.suspensionForce=t*e,i.suspensionForce<0&&(i.suspensionForce=0)}else i.suspensionForce=0}}removeFromWorld(t){this.constraints,t.removeBody(this.chassisBody),t.removeEventListener("preStep",this.preStepCallback),this.world=null}castRay(t){const e=ze,s=Ae;this.updateWheelTransformWorld(t);const i=this.chassisBody;let o=-1;const r=t.suspensionRestLength+t.radius;t.directionWorld.scale(r,e);const a=t.chassisConnectionPointWorld;a.vadd(e,s);const l=t.raycastResult;l.reset();const h=i.collisionResponse;i.collisionResponse=!1,this.world.rayTest(a,s,l),i.collisionResponse=h;const c=l.body;if(t.raycastResult.groundObject=0,c){o=l.distance,t.raycastResult.hitNormalWorld=l.hitNormalWorld,t.isInContact=!0;const e=l.distance;t.suspensionLength=e-t.radius;const s=t.suspensionRestLength-t.maxSuspensionTravel,r=t.suspensionRestLength+t.maxSuspensionTravel;t.suspensionLength<s&&(t.suspensionLength=s),t.suspensionLength>r&&(t.suspensionLength=r,t.raycastResult.reset());const a=t.raycastResult.hitNormalWorld.dot(t.directionWorld),h=new n;i.getVelocityAtWorldPoint(t.raycastResult.hitPointWorld,h);const c=t.raycastResult.hitNormalWorld.dot(h);if(a>=-.1)t.suspensionRelativeVelocity=0,t.clippedInvContactDotSuspension=10;else{const e=-1/a;t.suspensionRelativeVelocity=c*e,t.clippedInvContactDotSuspension=e}}else t.suspensionLength=t.suspensionRestLength+0*t.maxSuspensionTravel,t.suspensionRelativeVelocity=0,t.directionWorld.scale(-1,t.raycastResult.hitNormalWorld),t.clippedInvContactDotSuspension=1;return o}updateWheelTransformWorld(t){t.isInContact=!1;const e=this.chassisBody;e.pointToWorldFrame(t.chassisConnectionPointLocal,t.chassisConnectionPointWorld),e.vectorToWorldFrame(t.directionLocal,t.directionWorld),e.vectorToWorldFrame(t.axleLocal,t.axleWorld)}updateWheelTransform(t){const e=be,s=Ee,i=Se,o=this.wheelInfos[t];this.updateWheelTransformWorld(o),o.directionLocal.scale(-1,e),s.copy(o.axleLocal),e.cross(s,i),i.normalize(),s.normalize();const n=o.steering,r=new y;r.setFromAxisAngle(e,n);const a=new y;a.setFromAxisAngle(s,o.rotation);const l=o.worldTransform.quaternion;this.chassisBody.quaternion.mult(r,l),l.mult(a,l),l.normalize();const h=o.worldTransform.position;h.copy(o.directionWorld),h.scale(o.suspensionLength,h),h.vadd(o.chassisConnectionPointWorld,h)}getWheelTransformWorld(t){return this.wheelInfos[t].worldTransform}updateFriction(t){const e=Be,s=this.wheelInfos,i=s.length,o=this.chassisBody,r=Re,a=Fe;this.numWheelsOnGround=0;for(let t=0;t<i;t++){const e=s[t];e.raycastResult.body&&this.numWheelsOnGround++,e.sideImpulse=0,e.forwardImpulse=0,r[t]||(r[t]=new n),a[t]||(a[t]=new n)}for(let t=0;t<i;t++){const i=s[t],n=i.raycastResult.body;if(n){const s=a[t];this.getWheelTransformWorld(t).vectorToWorldFrame(Ce[this.indexRightAxis],s);const l=i.raycastResult.hitNormalWorld,h=s.dot(l);l.scale(h,e),s.vsub(e,s),s.normalize(),l.cross(s,r[t]),r[t].normalize(),i.sideImpulse=He(o,i.raycastResult.hitPointWorld,n,i.raycastResult.hitPointWorld,s),i.sideImpulse*=Ie}}this.sliding=!1;for(let e=0;e<i;e++){const i=s[e],n=i.raycastResult.body;let a=0;if(i.slipInfo=1,n){const s=0,l=i.brake?i.brake:s;a=Ne(o,n,i.raycastResult.hitPointWorld,r[e],l),a+=i.engineForce*t;const h=l/a;i.slipInfo*=h}if(i.forwardImpulse=0,i.skidInfo=1,n){i.skidInfo=1;const e=i.suspensionForce*t*i.frictionSlip,s=e*e;i.forwardImpulse=a;const o=.5*i.forwardImpulse/i.forwardAcceleration,n=1*i.sideImpulse/i.sideAcceleration,r=o*o+n*n;if(i.sliding=!1,r>s){this.sliding=!0,i.sliding=!0;const t=e/Math.sqrt(r);i.skidInfo*=t}}}if(this.sliding)for(let t=0;t<i;t++){const e=s[t];0!==e.sideImpulse&&e.skidInfo<1&&(e.forwardImpulse*=e.skidInfo,e.sideImpulse*=e.skidInfo)}for(let t=0;t<i;t++){const e=s[t],i=new n;if(e.raycastResult.hitPointWorld.vsub(o.position,i),0!==e.forwardImpulse){const s=new n;r[t].scale(e.forwardImpulse,s),o.applyImpulse(s,i)}if(0!==e.sideImpulse){const s=e.raycastResult.body,r=new n;e.raycastResult.hitPointWorld.vsub(s.position,r);const l=new n;a[t].scale(e.sideImpulse,l),o.vectorToLocalFrame(i,i),i["xyz"[this.indexUpAxis]]*=e.rollInfluence,o.vectorToWorldFrame(i,i),o.applyImpulse(l,i),l.scale(-1,l),s.applyImpulse(l,r)}}}}new n,new n,new n;const be=new n,Ee=new n,Se=new n;new ht,new n;const ze=new n,Ae=new n,Ce=[new n(1,0,0),new n(0,1,0),new n(0,0,1)],Be=new n,Fe=[],Re=[],Ie=1,Me=new n,qe=new n,Te=new n;function Ne(t,e,s,i,o){let n=0;const r=s,a=Me,l=qe,h=Te;t.getVelocityAtWorldPoint(r,a),e.getVelocityAtWorldPoint(r,l),a.vsub(l,h);return n=-i.dot(h)*(1/(ke(t,s,i)+ke(e,s,i))),o<n&&(n=o),n<-o&&(n=-o),n}const Pe=new n,We=new n,Le=new n,je=new n;function ke(t,e,s){const i=Pe,o=We,n=Le,r=je;return e.vsub(t.position,i),i.cross(s,o),t.invInertiaWorld.vmult(o,r),r.cross(i,n),t.invMass+s.dot(n)}const Ve=new n,Oe=new n,De=new n;function He(t,e,s,i,o){if(o.lengthSquared()>1.1)return 0;const n=Ve,r=Oe,a=De;t.getVelocityAtWorldPoint(e,n),s.getVelocityAtWorldPoint(i,r),n.vsub(r,a);return-.2*o.dot(a)*(1/(t.invMass+s.invMass))}new n,new n;new n,new n,new n,new n,new n,new n,new n;class Ge extends x{constructor(t,e,s,i){if(void 0===t&&(t=1),void 0===e&&(e=1),void 0===s&&(s=1),void 0===i&&(i=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const o=i,r=[],a=[],l=[],h=[],c=[],u=Math.cos,d=Math.sin;r.push(new n(-e*d(0),.5*-s,e*u(0))),h.push(0),r.push(new n(-t*d(0),.5*s,t*u(0))),c.push(1);for(let i=0;i<o;i++){const p=2*Math.PI/o*(i+1),y=2*Math.PI/o*(i+.5);i<o-1?(r.push(new n(-e*d(p),.5*-s,e*u(p))),h.push(2*i+2),r.push(new n(-t*d(p),.5*s,t*u(p))),c.push(2*i+3),l.push([2*i,2*i+1,2*i+3,2*i+2])):l.push([2*i,2*i+1,1,0]),(o%2==1||i<o/2)&&a.push(new n(-d(y),0,u(y)))}l.push(h),a.push(new n(0,1,0));const p=[];for(let t=0;t<c.length;t++)p.push(c[c.length-t-1]);l.push(p),super({vertices:r,faces:l,axes:a}),this.type=w.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=i}}new n;new n,new n,new n,new n,new n,new n,new n,new n,new n;new n,new h;new n,new h,new n,new n,new n,new n,new n,new n,new n,new h,new n,new f,new h;class Ye{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){!t.enabled||t.bi.isTrigger||t.bj.isTrigger||this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);-1!==s&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class Ue extends Ye{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const i=this.iterations,o=this.tolerance*this.tolerance,n=this.equations,r=n.length,a=e.bodies,l=a.length,h=t;let c,u,d,p,y,v;if(0!==r)for(let t=0;t!==l;t++)a[t].updateSolveMassProperties();const m=Xe,w=$e,f=_e;m.length=r,w.length=r,f.length=r;for(let t=0;t!==r;t++){const e=n[t];f[t]=0,w[t]=e.computeB(h),m[t]=1/e.computeC()}if(0!==r){for(let t=0;t!==l;t++){const e=a[t],s=e.vlambda,i=e.wlambda;s.set(0,0,0),i.set(0,0,0)}for(s=0;s!==i;s++){p=0;for(let t=0;t!==r;t++){const e=n[t];c=w[t],u=m[t],v=f[t],y=e.computeGWlambda(),d=u*(c-y-e.eps*v),v+d<e.minForce?d=e.minForce-v:v+d>e.maxForce&&(d=e.maxForce-v),f[t]+=d,p+=d>0?d:-d,e.addToWlambda(d)}if(p*p<o)break}for(let t=0;t!==l;t++){const e=a[t],s=e.velocity,i=e.angularVelocity;e.vlambda.vmul(e.linearFactor,e.vlambda),s.vadd(e.vlambda,s),e.wlambda.vmul(e.angularFactor,e.wlambda),i.vadd(e.wlambda,i)}let t=n.length;const e=1/h;for(;t--;)n[t].multiplier=f[t]*e}return s}}const _e=[],Xe=[],$e=[];q.STATIC;class Ke{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class Ze extends Ke{constructor(){super(...arguments),this.type=n}constructObject(){return new n}}const Qe=w.types.SPHERE,Je=w.types.SPHERE|w.types.PLANE,ts=w.types.BOX|w.types.BOX,es=w.types.SPHERE|w.types.BOX,ss=w.types.PLANE|w.types.BOX,is=w.types.CONVEXPOLYHEDRON,os=w.types.SPHERE|w.types.CONVEXPOLYHEDRON,ns=w.types.PLANE|w.types.CONVEXPOLYHEDRON,rs=w.types.BOX|w.types.CONVEXPOLYHEDRON,as=w.types.SPHERE|w.types.HEIGHTFIELD,ls=w.types.BOX|w.types.HEIGHTFIELD,hs=w.types.CONVEXPOLYHEDRON|w.types.HEIGHTFIELD,cs=w.types.PARTICLE|w.types.SPHERE,us=w.types.PLANE|w.types.PARTICLE,ds=w.types.BOX|w.types.PARTICLE,ps=w.types.PARTICLE|w.types.CONVEXPOLYHEDRON,ys=w.types.CYLINDER,vs=w.types.SPHERE|w.types.CYLINDER,ms=w.types.PLANE|w.types.CYLINDER,ws=w.types.BOX|w.types.CYLINDER,fs=w.types.CONVEXPOLYHEDRON|w.types.CYLINDER,gs=w.types.HEIGHTFIELD|w.types.CYLINDER,xs=w.types.PARTICLE|w.types.CYLINDER,bs=w.types.SPHERE|w.types.TRIMESH,Es=w.types.PLANE|w.types.TRIMESH;class Ss{get[Qe](){return this.sphereSphere}get[Je](){return this.spherePlane}get[ts](){return this.boxBox}get[es](){return this.sphereBox}get[ss](){return this.planeBox}get[is](){return this.convexConvex}get[os](){return this.sphereConvex}get[ns](){return this.planeConvex}get[rs](){return this.boxConvex}get[as](){return this.sphereHeightfield}get[ls](){return this.boxHeightfield}get[hs](){return this.convexHeightfield}get[cs](){return this.sphereParticle}get[us](){return this.planeParticle}get[ds](){return this.boxParticle}get[ps](){return this.convexParticle}get[ys](){return this.convexConvex}get[vs](){return this.sphereConvex}get[ms](){return this.planeConvex}get[ws](){return this.boxConvex}get[fs](){return this.convexConvex}get[gs](){return this.heightfieldCylinder}get[xs](){return this.particleCylinder}get[bs](){return this.sphereTrimesh}get[Es](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Ze,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,i,o,n){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Xt(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&i.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,h=i.material||e.material;return l&&h&&l.restitution>=0&&h.restitution>=0&&(r.restitution=l.restitution*h.restitution),r.si=o||s,r.sj=n||i,r}createFrictionEquationsFromContact(t,e){const s=t.bi,i=t.bj,o=t.si,n=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const h=o.material||s.material,c=n.material||i.material;if(h&&c&&h.friction>=0&&c.friction>=0&&(l=h.friction*c.friction),l>0){const o=l*(r.frictionGravity||r.gravity).length();let n=s.invMass+i.invMass;n>0&&(n=1/n);const h=this.frictionEquationPool,c=h.length?h.pop():new de(s,i,o*n),u=h.length?h.pop():new de(s,i,o*n);return c.bi=u.bi=s,c.bj=u.bj=i,c.minForce=u.minForce=-o*n,c.maxForce=u.maxForce=o*n,c.ri.copy(t.ri),c.rj.copy(t.rj),u.ri.copy(t.ri),u.rj.copy(t.rj),t.ni.tangents(c.t,u.t),c.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),u.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),c.enabled=u.enabled=t.enabled,e.push(c,u),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const s=this.frictionResult[this.frictionResult.length-2],i=this.frictionResult[this.frictionResult.length-1];zs.setZero(),As.setZero(),Cs.setZero();const o=e.bi;e.bj;for(let s=0;s!==t;s++)e=this.result[this.result.length-1-s],e.bi!==o?(zs.vadd(e.ni,zs),As.vadd(e.ri,As),Cs.vadd(e.rj,Cs)):(zs.vsub(e.ni,zs),As.vadd(e.rj,As),Cs.vadd(e.ri,Cs));const n=1/t;As.scale(n,s.ri),Cs.scale(n,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),zs.normalize(),zs.tangents(s.t,i.t)}getContacts(t,e,s,i,o,n,r){this.contactPointPool=o,this.frictionEquationPool=r,this.result=i,this.frictionResult=n;const a=Rs,l=Is,h=Bs,c=Fs;for(let i=0,o=t.length;i!==o;i++){const o=t[i],n=e[i];let r=null;o.material&&n.material&&(r=s.getContactMaterial(o.material,n.material)||null);const u=o.type&q.KINEMATIC&&n.type&q.STATIC||o.type&q.STATIC&&n.type&q.KINEMATIC||o.type&q.KINEMATIC&&n.type&q.KINEMATIC;for(let t=0;t<o.shapes.length;t++){o.quaternion.mult(o.shapeOrientations[t],a),o.quaternion.vmult(o.shapeOffsets[t],h),h.vadd(o.position,h);const e=o.shapes[t];for(let t=0;t<n.shapes.length;t++){n.quaternion.mult(n.shapeOrientations[t],l),n.quaternion.vmult(n.shapeOffsets[t],c),c.vadd(n.position,c);const i=n.shapes[t];if(!(e.collisionFilterMask&i.collisionFilterGroup&&i.collisionFilterMask&e.collisionFilterGroup))continue;if(h.distanceTo(c)>e.boundingSphereRadius+i.boundingSphereRadius)continue;let d=null;e.material&&i.material&&(d=s.getContactMaterial(e.material,i.material)||null),this.currentContactMaterial=d||r||s.defaultContactMaterial;const p=this[e.type|i.type];if(p){let t=!1;t=e.type<i.type?p.call(this,e,i,h,c,a,l,o,n,e,i,u):p.call(this,i,e,c,h,l,a,n,o,e,i,u),t&&u&&(s.shapeOverlapKeeper.set(e.id,i.id),s.bodyOverlapKeeper.set(o.id,n.id))}}}}}sphereSphere(t,e,s,i,o,n,r,a,l,h,c){if(c)return s.distanceSquared(i)<(t.radius+e.radius)**2;const u=this.createContactEquation(r,a,t,e,l,h);i.vsub(s,u.ni),u.ni.normalize(),u.ri.copy(u.ni),u.rj.copy(u.ni),u.ri.scale(t.radius,u.ri),u.rj.scale(-e.radius,u.rj),u.ri.vadd(s,u.ri),u.ri.vsub(r.position,u.ri),u.rj.vadd(i,u.rj),u.rj.vsub(a.position,u.rj),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}spherePlane(t,e,s,i,o,n,r,a,l,h,c){const u=this.createContactEquation(r,a,t,e,l,h);if(u.ni.set(0,0,1),n.vmult(u.ni,u.ni),u.ni.negate(u.ni),u.ni.normalize(),u.ni.scale(t.radius,u.ri),s.vsub(i,$s),u.ni.scale(u.ni.dot($s),Ks),$s.vsub(Ks,u.rj),-$s.dot(u.ni)<=t.radius){if(c)return!0;const t=u.ri,e=u.rj;t.vadd(s,t),t.vsub(r.position,t),e.vadd(i,e),e.vsub(a.position,e),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}}boxBox(t,e,s,i,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,i,o,n,r,a,t,e,c)}sphereBox(t,e,s,i,o,n,r,a,l,h,c){const u=this.v3pool,d=ni;s.vsub(i,ei),e.getSideNormals(d,n);const p=t.radius;let y=!1;const v=ai,m=li,w=hi;let f=null,g=0,x=0,b=0,E=null;for(let t=0,e=d.length;t!==e&&!1===y;t++){const e=si;e.copy(d[t]);const s=e.length();e.normalize();const i=ei.dot(e);if(i<s+p&&i>0){const o=ii,n=oi;o.copy(d[(t+1)%3]),n.copy(d[(t+2)%3]);const r=o.length(),a=n.length();o.normalize(),n.normalize();const l=ei.dot(o),h=ei.dot(n);if(l<r&&l>-r&&h<a&&h>-a){const t=Math.abs(i-s-p);if((null===E||t<E)&&(E=t,x=l,b=h,f=s,v.copy(e),m.copy(o),w.copy(n),g++,c))return!0}}}if(g){y=!0;const o=this.createContactEquation(r,a,t,e,l,h);v.scale(-p,o.ri),o.ni.copy(v),o.ni.negate(o.ni),v.scale(f,v),m.scale(x,m),v.vadd(m,v),w.scale(b,w),v.vadd(w,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}let S=u.get();const z=ri;for(let o=0;2!==o&&!y;o++)for(let n=0;2!==n&&!y;n++)for(let u=0;2!==u&&!y;u++)if(S.set(0,0,0),o?S.vadd(d[0],S):S.vsub(d[0],S),n?S.vadd(d[1],S):S.vsub(d[1],S),u?S.vadd(d[2],S):S.vsub(d[2],S),i.vadd(S,z),z.vsub(s,z),z.lengthSquared()<p*p){if(c)return!0;y=!0;const o=this.createContactEquation(r,a,t,e,l,h);o.ri.copy(z),o.ri.normalize(),o.ni.copy(o.ri),o.ri.scale(p,o.ri),o.rj.copy(S),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}u.release(S),S=null;const A=u.get(),C=u.get(),B=u.get(),F=u.get(),R=u.get(),I=d.length;for(let o=0;o!==I&&!y;o++)for(let n=0;n!==I&&!y;n++)if(o%3!=n%3){d[n].cross(d[o],A),A.normalize(),d[o].vadd(d[n],C),B.copy(s),B.vsub(C,B),B.vsub(i,B);const u=B.dot(A);A.scale(u,F);let v=0;for(;v===o%3||v===n%3;)v++;R.copy(s),R.vsub(F,R),R.vsub(C,R),R.vsub(i,R);const m=Math.abs(u),w=R.length();if(m<d[v].length()&&w<p){if(c)return!0;y=!0;const o=this.createContactEquation(r,a,t,e,l,h);C.vadd(F,o.rj),o.rj.copy(o.rj),R.negate(o.ni),o.ni.normalize(),o.ri.copy(o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(s,o.ri),o.ri.normalize(),o.ri.scale(p,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}u.release(A,C,B,F,R)}planeBox(t,e,s,i,o,n,r,a,l,h,c){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,i,o,n,r,a,t,e,c)}convexConvex(t,e,s,i,o,n,r,a,l,h,c,u,d){const p=zi;if(!(s.distanceTo(i)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,o,i,n,p,u,d)){const u=[],d=Ai;t.clipAgainstHull(s,o,e,i,n,p,-100,100,u);let y=0;for(let o=0;o!==u.length;o++){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h),v=n.ri,m=n.rj;p.negate(n.ni),u[o].normal.negate(d),d.scale(u[o].depth,d),u[o].point.vadd(d,v),m.copy(u[o].point),v.vsub(s,v),m.vsub(i,m),v.vadd(s,v),v.vsub(r.position,v),m.vadd(i,m),m.vsub(a.position,m),this.result.push(n),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(n,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,s,i,o,n,r,a,l,h,c){const u=this.v3pool;s.vsub(i,ci);const d=e.faceNormals,p=e.faces,y=e.vertices,v=t.radius;let m=!1;for(let o=0;o!==y.length;o++){const u=y[o],d=yi;n.vmult(u,d),i.vadd(d,d);const p=pi;if(d.vsub(s,p),p.lengthSquared()<v*v){if(c)return!0;m=!0;const o=this.createContactEquation(r,a,t,e,l,h);return o.ri.copy(p),o.ri.normalize(),o.ni.copy(o.ri),o.ri.scale(v,o.ri),d.vsub(i,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),void this.createFrictionEquationsFromContact(o,this.frictionResult)}}for(let o=0,w=p.length;o!==w&&!1===m;o++){const w=d[o],f=p[o],g=vi;n.vmult(w,g);const x=mi;n.vmult(y[f[0]],x),x.vadd(i,x);const b=wi;g.scale(-v,b),s.vadd(b,b);const E=fi;b.vsub(x,E);const S=E.dot(g),z=gi;if(s.vsub(x,z),S<0&&z.dot(g)>0){const o=[];for(let t=0,e=f.length;t!==e;t++){const e=u.get();n.vmult(y[f[t]],e),i.vadd(e,e),o.push(e)}if(ti(o,g,s)){if(c)return!0;m=!0;const n=this.createContactEquation(r,a,t,e,l,h);g.scale(-v,n.ri),g.negate(n.ni);const d=u.get();g.scale(-S,d);const p=u.get();g.scale(-v,p),s.vsub(i,n.rj),n.rj.vadd(p,n.rj),n.rj.vadd(d,n.rj),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),u.release(d),u.release(p),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult);for(let t=0,e=o.length;t!==e;t++)u.release(o[t]);return}for(let d=0;d!==f.length;d++){const p=u.get(),m=u.get();n.vmult(y[f[(d+1)%f.length]],p),n.vmult(y[f[(d+2)%f.length]],m),i.vadd(p,p),i.vadd(m,m);const w=ui;m.vsub(p,w);const g=di;w.unit(g);const x=u.get(),b=u.get();s.vsub(p,b);const E=b.dot(g);g.scale(E,x),x.vadd(p,x);const S=u.get();if(x.vsub(s,S),E>0&&E*E<w.lengthSquared()&&S.lengthSquared()<v*v){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h);x.vsub(i,n.rj),x.vsub(s,n.ni),n.ni.normalize(),n.ni.scale(v,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult);for(let t=0,e=o.length;t!==e;t++)u.release(o[t]);return u.release(p),u.release(m),u.release(x),u.release(S),void u.release(b)}u.release(p),u.release(m),u.release(x),u.release(S),u.release(b)}for(let t=0,e=o.length;t!==e;t++)u.release(o[t])}}}planeConvex(t,e,s,i,o,n,r,a,l,h,c){const u=xi,d=bi;d.set(0,0,1),o.vmult(d,d);let p=0;const y=Ei;for(let o=0;o!==e.vertices.length;o++){u.copy(e.vertices[o]),n.vmult(u,u),i.vadd(u,u),u.vsub(s,y);if(d.dot(y)<=0){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h),n=Si;d.scale(d.dot(y),n),u.vsub(n,n),n.vsub(s,o.ri),o.ni.copy(d),u.vsub(i,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(o,this.frictionResult)}}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,i,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,c)}sphereHeightfield(t,e,s,i,o,n,r,a,l,h,c){const u=e.data,d=t.radius,p=e.elementSize,y=ki,v=ji;f.pointToLocalFrame(i,n,s,v);let m=Math.floor((v.x-d)/p)-1,w=Math.ceil((v.x+d)/p)+1,g=Math.floor((v.y-d)/p)-1,x=Math.ceil((v.y+d)/p)+1;if(w<0||x<0||m>u.length||g>u[0].length)return;m<0&&(m=0),w<0&&(w=0),g<0&&(g=0),x<0&&(x=0),m>=u.length&&(m=u.length-1),w>=u.length&&(w=u.length-1),x>=u[0].length&&(x=u[0].length-1),g>=u[0].length&&(g=u[0].length-1);const b=[];e.getRectMinMax(m,g,w,x,b);const E=b[0],S=b[1];if(v.z-d>S||v.z+d<E)return;const z=this.result;for(let l=m;l<w;l++)for(let h=g;h<x;h++){const u=z.length;let d=!1;if(e.getConvexTrianglePillar(l,h,!1),f.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,s,y,o,n,r,a,t,e,c)),c&&d)return!0;if(e.getConvexTrianglePillar(l,h,!0),f.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,s,y,o,n,r,a,t,e,c)),c&&d)return!0;if(z.length-u>2)return}}boxHeightfield(t,e,s,i,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,c)}convexHeightfield(t,e,s,i,o,n,r,a,l,h,c){const u=e.data,d=e.elementSize,p=t.boundingSphereRadius,y=Wi,v=Li,m=Pi;f.pointToLocalFrame(i,n,s,m);let w=Math.floor((m.x-p)/d)-1,g=Math.ceil((m.x+p)/d)+1,x=Math.floor((m.y-p)/d)-1,b=Math.ceil((m.y+p)/d)+1;if(g<0||b<0||w>u.length||x>u[0].length)return;w<0&&(w=0),g<0&&(g=0),x<0&&(x=0),b<0&&(b=0),w>=u.length&&(w=u.length-1),g>=u.length&&(g=u.length-1),b>=u[0].length&&(b=u[0].length-1),x>=u[0].length&&(x=u[0].length-1);const E=[];e.getRectMinMax(w,x,g,b,E);const S=E[0],z=E[1];if(!(m.z-p>z||m.z+p<S))for(let l=w;l<g;l++)for(let h=x;h<b;h++){let u=!1;if(e.getConvexTrianglePillar(l,h,!1),f.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,s,y,o,n,r,a,null,null,c,v,null)),c&&u)return!0;if(e.getConvexTrianglePillar(l,h,!0),f.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,s,y,o,n,r,a,null,null,c,v,null)),c&&u)return!0}}sphereParticle(t,e,s,i,o,n,r,a,l,h,c){const u=Ri;u.set(0,0,1),i.vsub(s,u);if(u.lengthSquared()<=t.radius*t.radius){if(c)return!0;const s=this.createContactEquation(a,r,e,t,l,h);u.normalize(),s.rj.copy(u),s.rj.scale(t.radius,s.rj),s.ni.copy(u),s.ni.negate(s.ni),s.ri.set(0,0,0),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}planeParticle(t,e,s,i,o,n,r,a,l,h,c){const u=Ci;u.set(0,0,1),r.quaternion.vmult(u,u);const d=Bi;i.vsub(r.position,d);if(u.dot(d)<=0){if(c)return!0;const s=this.createContactEquation(a,r,e,t,l,h);s.ni.copy(u),s.ni.negate(s.ni),s.ri.set(0,0,0);const o=Fi;u.scale(u.dot(i),o),i.vsub(o,o),s.rj.copy(o),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}boxParticle(t,e,s,i,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,c)}convexParticle(t,e,s,i,o,n,r,a,l,h,c){let u=-1;const d=qi,p=Ni;let y=null;const v=Mi;if(v.copy(i),v.vsub(s,v),o.conjugate(Ii),Ii.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,o),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(o);for(let e=0,s=t.faces.length;e!==s;e++){const s=[t.worldVertices[t.faces[e][0]]],o=t.worldFaceNormals[e];i.vsub(s[0],Ti);const n=-o.dot(Ti);if(null===y||Math.abs(n)<Math.abs(y)){if(c)return!0;y=n,u=e,d.copy(o)}}if(-1!==u){const o=this.createContactEquation(a,r,e,t,l,h);d.scale(y,p),p.vadd(i,p),p.vsub(s,p),o.rj.copy(p),d.negate(o.ni),o.ri.set(0,0,0);const n=o.ri,c=o.rj;n.vadd(i,n),n.vsub(a.position,n),c.vadd(s,c),c.vsub(r.position,c),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,i,o,n,r,a,l,h,c){return this.convexHeightfield(e,t,i,s,n,o,a,r,l,h,c)}particleCylinder(t,e,s,i,o,n,r,a,l,h,c){return this.convexParticle(e,t,i,s,n,o,a,r,l,h,c)}sphereTrimesh(t,e,s,i,o,n,r,a,l,h,c){const u=js,d=ks,p=Vs,y=Os,v=Ds,m=Hs,w=_s,g=Ls,x=Ps,b=Xs;f.pointToLocalFrame(i,n,s,v);const E=t.radius;w.lowerBound.set(v.x-E,v.y-E,v.z-E),w.upperBound.set(v.x+E,v.y+E,v.z+E),e.getTrianglesInAABB(w,b);const S=Ws,z=t.radius*t.radius;for(let o=0;o<b.length;o++)for(let u=0;u<3;u++)if(e.getVertex(e.indices[3*b[o]+u],S),S.vsub(v,x),x.lengthSquared()<=z){if(g.copy(S),f.pointToWorldFrame(i,n,g,S),S.vsub(s,x),c)return!0;let o=this.createContactEquation(r,a,t,e,l,h);o.ni.copy(x),o.ni.normalize(),o.ri.copy(o.ni),o.ri.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.copy(S),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}for(let o=0;o<b.length;o++)for(let w=0;w<3;w++){e.getVertex(e.indices[3*b[o]+w],u),e.getVertex(e.indices[3*b[o]+(w+1)%3],d),d.vsub(u,p),v.vsub(d,m);const g=m.dot(p);v.vsub(u,m);let x=m.dot(p);if(x>0&&g<0){v.vsub(u,m),y.copy(p),y.normalize(),x=m.dot(y),y.scale(x,m),m.vadd(u,m);if(m.distanceTo(v)<t.radius){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h);m.vsub(v,o.ni),o.ni.normalize(),o.ni.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),f.pointToWorldFrame(i,n,m,m),m.vsub(a.position,o.rj),f.vectorToWorldFrame(n,o.ni,o.ni),f.vectorToWorldFrame(n,o.ri,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}}const A=Gs,C=Ys,B=Us,F=Ns;for(let o=0,u=b.length;o!==u;o++){e.getTriangleVertices(b[o],A,C,B),e.getNormal(b[o],F),v.vsub(A,m);let u=m.dot(F);if(F.scale(u,m),v.vsub(m,m),u=m.distanceTo(v),ht.pointInTriangle(m,A,C,B)&&u<t.radius){if(c)return!0;let o=this.createContactEquation(r,a,t,e,l,h);m.vsub(v,o.ni),o.ni.normalize(),o.ni.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),f.pointToWorldFrame(i,n,m,m),m.vsub(a.position,o.rj),f.vectorToWorldFrame(n,o.ni,o.ni),f.vectorToWorldFrame(n,o.ri,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}b.length=0}planeTrimesh(t,e,s,i,o,r,a,l,h,c,u){const d=new n,p=Ms;p.set(0,0,1),o.vmult(p,p);for(let o=0;o<e.vertices.length/3;o++){e.getVertex(o,d);const y=new n;y.copy(d),f.pointToWorldFrame(i,r,y,d);const v=qs;d.vsub(s,v);if(p.dot(v)<=0){if(u)return!0;const s=this.createContactEquation(a,l,t,e,h,c);s.ni.copy(p);const i=Ts;p.scale(v.dot(p),i),d.vsub(i,i),s.ri.copy(i),s.ri.vsub(a.position,s.ri),s.rj.copy(d),s.rj.vsub(l.position,s.rj),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}}}const zs=new n,As=new n,Cs=new n,Bs=new n,Fs=new n,Rs=new y,Is=new y,Ms=new n,qs=new n,Ts=new n,Ns=new n,Ps=new n;new n;const Ws=new n,Ls=new n,js=new n,ks=new n,Vs=new n,Os=new n,Ds=new n,Hs=new n,Gs=new n,Ys=new n,Us=new n,_s=new h,Xs=[],$s=new n,Ks=new n,Zs=new n,Qs=new n,Js=new n;function ti(t,e,s){let i=null;const o=t.length;for(let n=0;n!==o;n++){const r=t[n],a=Zs;t[(n+1)%o].vsub(r,a);const l=Qs;a.cross(e,l);const h=Js;s.vsub(r,h);const c=l.dot(h);if(!(null===i||c>0&&!0===i||c<=0&&!1===i))return!1;null===i&&(i=c>0)}return!0}const ei=new n,si=new n,ii=new n,oi=new n,ni=[new n,new n,new n,new n,new n,new n],ri=new n,ai=new n,li=new n,hi=new n,ci=new n,ui=new n,di=new n,pi=new n,yi=new n,vi=new n,mi=new n,wi=new n,fi=new n,gi=new n;new n,new n;const xi=new n,bi=new n,Ei=new n,Si=new n,zi=new n,Ai=new n,Ci=new n,Bi=new n,Fi=new n,Ri=new n,Ii=new y,Mi=new n;new n;const qi=new n,Ti=new n,Ni=new n,Pi=new n,Wi=new n,Li=[0],ji=new n,ki=new n;class Vi{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),i=this.current;let o=0;for(;s>i[o];)o++;if(s!==i[o]){for(let t=i.length-1;t>=o;t--)i[t+1]=i[t];i[o]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,i=this.previous,o=s.length,n=i.length;let r=0;for(let e=0;e<o;e++){let o=!1;const n=s[e];for(;n>i[r];)r++;o=n===i[r],o||Oi(t,n)}r=0;for(let t=0;t<n;t++){let o=!1;const n=i[t];for(;n>s[r];)r++;o=s[r]===n,o||Oi(e,n)}}}function Oi(t,e){t.push((4294901760&e)>>16,65535&e)}const Di=(t,e)=>t<e?`${t}-${e}`:`${e}-${t}`;class Hi{constructor(){this.data={keys:[]}}get(t,e){const s=Di(t,e);return this.data[s]}set(t,e,s){const i=Di(t,e);this.get(t,e)||this.data.keys.push(i),this.data[i]=s}delete(t,e){const s=Di(t,e),i=this.data.keys.indexOf(s);-1!==i&&this.data.keys.splice(i,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){delete t[e.pop()]}}}class Gi extends p{constructor(t){void 0===t&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new n,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new n,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=void 0!==t.broadphase?t.broadphase:new Z,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new Ue,this.constraints=[],this.narrowphase=new Ss(this),this.collisionMatrix=new d,this.collisionMatrixPrevious=new d,this.bodyOverlapKeeper=new Vi,this.shapeOverlapKeeper=new Vi,this.contactmaterials=[],this.contactMaterialTable=new Hi,this.defaultMaterial=new me("default"),this.defaultContactMaterial=new ve(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Q?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,i){return void 0===s&&(s={}),s.mode=ht.ALL,s.from=t,s.to=e,s.callback=i,Yi.intersectWorld(this,s)}raycastAny(t,e,s,i){return void 0===s&&(s={}),s.mode=ht.ANY,s.from=t,s.to=e,s.result=i,Yi.intersectWorld(this,s)}raycastClosest(t,e,s,i){return void 0===s&&(s={}),s.mode=ht.CLOSEST,s.from=t,s.to=e,s.result=i,Yi.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof q&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,i=s.indexOf(t);if(-1!==i){s.splice(i,1);for(let t=0;t!==s.length;t++)s[t].index=t;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const i=e[s].shapes;for(let e=0;e<i.length;e++){const s=i[e];if(s.id===t)return s}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);-1!==e&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){void 0===t&&(t=1/60),void 0===e&&(e=10);const s=Ui.now()/1e3;if(this.lastCallTime){const i=s-this.lastCallTime;this.step(t,i,e)}else this.step(t,void 0,e);this.lastCallTime=s}step(t,e,s){if(void 0===s&&(s=10),void 0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const i=Ui.now();let o=0;for(;this.accumulator>=t&&o<s&&(this.internalStep(t),this.accumulator-=t,o++,!(Ui.now()-i>1e3*t)););this.accumulator=this.accumulator%t;const n=this.accumulator/t;for(let t=0;t!==this.bodies.length;t++){const e=this.bodies[t];e.previousPosition.lerp(e.position,n,e.interpolatedPosition),e.previousQuaternion.slerp(e.quaternion,n,e.interpolatedQuaternion),e.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=Qi,i=Ji,o=this.bodies.length,n=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,h=this.profile,c=q.DYNAMIC;let u=-1/0;const d=this.constraints,p=Zi;a.length();const y=a.x,v=a.y,m=a.z;let w=0;for(l&&(u=Ui.now()),w=0;w!==o;w++){const t=n[w];if(t.type===c){const e=t.force,s=t.mass;e.x+=s*y,e.y+=s*v,e.z+=s*m}}for(let t=0,e=this.subsystems.length;t!==e;t++)this.subsystems[t].update();l&&(u=Ui.now()),s.length=0,i.length=0,this.broadphase.collisionPairs(this,s,i),l&&(h.broadphase=Ui.now()-u);let f=d.length;for(w=0;w!==f;w++){const t=d[w];if(!t.collideConnected)for(let e=s.length-1;e>=0;e-=1)(t.bodyA===s[e]&&t.bodyB===i[e]||t.bodyB===s[e]&&t.bodyA===i[e])&&(s.splice(e,1),i.splice(e,1))}this.collisionMatrixTick(),l&&(u=Ui.now());const g=Ki,x=e.length;for(w=0;w!==x;w++)g.push(e[w]);e.length=0;const b=this.frictionEquations.length;for(w=0;w!==b;w++)p.push(this.frictionEquations[w]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,i,this,e,g,this.frictionEquations,p),l&&(h.narrowphase=Ui.now()-u),l&&(u=Ui.now()),w=0;w<this.frictionEquations.length;w++)r.addEquation(this.frictionEquations[w]);const E=e.length;for(let t=0;t!==E;t++){const s=e[t],i=s.bi,o=s.bj,n=s.si,a=s.sj;let l;if(l=i.material&&o.material&&this.getContactMaterial(i.material,o.material)||this.defaultContactMaterial,l.friction,i.material&&o.material&&(i.material.friction>=0&&o.material.friction>=0&&(i.material.friction,o.material.friction),i.material.restitution>=0&&o.material.restitution>=0&&(s.restitution=i.material.restitution*o.material.restitution)),r.addEquation(s),i.allowSleep&&i.type===q.DYNAMIC&&i.sleepState===q.SLEEPING&&o.sleepState===q.AWAKE&&o.type!==q.STATIC){o.velocity.lengthSquared()+o.angularVelocity.lengthSquared()>=2*o.sleepSpeedLimit**2&&(i.wakeUpAfterNarrowphase=!0)}if(o.allowSleep&&o.type===q.DYNAMIC&&o.sleepState===q.SLEEPING&&i.sleepState===q.AWAKE&&i.type!==q.STATIC){i.velocity.lengthSquared()+i.angularVelocity.lengthSquared()>=2*i.sleepSpeedLimit**2&&(o.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(i,o,!0),this.collisionMatrixPrevious.get(i,o)||($i.body=o,$i.contact=s,i.dispatchEvent($i),$i.body=i,o.dispatchEvent($i)),this.bodyOverlapKeeper.set(i.id,o.id),this.shapeOverlapKeeper.set(n.id,a.id)}for(this.emitContactEvents(),l&&(h.makeContactConstraints=Ui.now()-u,u=Ui.now()),w=0;w!==o;w++){const t=n[w];t.wakeUpAfterNarrowphase&&(t.wakeUp(),t.wakeUpAfterNarrowphase=!1)}for(f=d.length,w=0;w!==f;w++){const t=d[w];t.update();for(let e=0,s=t.equations.length;e!==s;e++){const s=t.equations[e];r.addEquation(s)}}r.solve(t,this),l&&(h.solve=Ui.now()-u),r.removeAllEquations();const S=Math.pow;for(w=0;w!==o;w++){const e=n[w];if(e.type&c){const s=S(1-e.linearDamping,t),i=e.velocity;i.scale(s,i);const o=e.angularVelocity;if(o){const s=S(1-e.angularDamping,t);o.scale(s,o)}}}this.dispatchEvent(Xi),l&&(u=Ui.now());const z=this.stepnumber%(this.quatNormalizeSkip+1)==0,A=this.quatNormalizeFast;for(w=0;w!==o;w++)n[w].integrate(t,z,A);this.clearForces(),this.broadphase.dirty=!0,l&&(h.integrate=Ui.now()-u),this.stepnumber+=1,this.dispatchEvent(_i);let C=!0;if(this.allowSleep)for(C=!1,w=0;w!==o;w++){const t=n[w];t.sleepTick(this.time),t.sleepState!==q.SLEEPING&&(C=!0)}this.hasActiveBodies=C}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(to,eo),t){for(let t=0,e=to.length;t<e;t+=2)so.bodyA=this.getBodyById(to[t]),so.bodyB=this.getBodyById(to[t+1]),this.dispatchEvent(so);so.bodyA=so.bodyB=null}if(e){for(let t=0,e=eo.length;t<e;t+=2)io.bodyA=this.getBodyById(eo[t]),io.bodyB=this.getBodyById(eo[t+1]),this.dispatchEvent(io);io.bodyA=io.bodyB=null}to.length=eo.length=0;const s=this.hasAnyEventListener("beginShapeContact"),i=this.hasAnyEventListener("endShapeContact");if((s||i)&&this.shapeOverlapKeeper.getDiff(to,eo),s){for(let t=0,e=to.length;t<e;t+=2){const e=this.getShapeById(to[t]),s=this.getShapeById(to[t+1]);oo.shapeA=e,oo.shapeB=s,e&&(oo.bodyA=e.body),s&&(oo.bodyB=s.body),this.dispatchEvent(oo)}oo.bodyA=oo.bodyB=oo.shapeA=oo.shapeB=null}if(i){for(let t=0,e=eo.length;t<e;t+=2){const e=this.getShapeById(eo[t]),s=this.getShapeById(eo[t+1]);no.shapeA=e,no.shapeB=s,e&&(no.bodyA=e.body),s&&(no.bodyB=s.body),this.dispatchEvent(no)}no.bodyA=no.bodyB=no.shapeA=no.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const e=t[s];e.force,e.torque,e.force.set(0,0,0),e.torque.set(0,0,0)}}}new h;const Yi=new ht,Ui=globalThis.performance||{};if(!Ui.now){let t=Date.now();Ui.timing&&Ui.timing.navigationStart&&(t=Ui.timing.navigationStart),Ui.now=()=>Date.now()-t}new n;const _i={type:"postStep"},Xi={type:"preStep"},$i={type:q.COLLIDE_EVENT_NAME,body:null,contact:null},Ki=[],Zi=[],Qi=[],Ji=[],to=[],eo=[],so={type:"beginContact",bodyA:null,bodyB:null},io={type:"endContact",bodyA:null,bodyB:null},oo={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},no={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null}}}]);