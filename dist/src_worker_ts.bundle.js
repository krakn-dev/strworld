/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ecs/commands.ts":
/*!*****************************!*\
  !*** ./src/ecs/commands.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CameraFollowGeometry: () => (/* binding */ CameraFollowGeometry),\n/* harmony export */   CommandTypes: () => (/* binding */ CommandTypes),\n/* harmony export */   CreateScene: () => (/* binding */ CreateScene),\n/* harmony export */   CreateStickman: () => (/* binding */ CreateStickman),\n/* harmony export */   MoveGeometry: () => (/* binding */ MoveGeometry),\n/* harmony export */   MovePlayer: () => (/* binding */ MovePlayer),\n/* harmony export */   RunCode: () => (/* binding */ RunCode),\n/* harmony export */   SendGraphicComponentsToRender: () => (/* binding */ SendGraphicComponentsToRender),\n/* harmony export */   SyncRigidBody: () => (/* binding */ SyncRigidBody),\n/* harmony export */   TheFirst: () => (/* binding */ TheFirst),\n/* harmony export */   getInstanceFromEnum: () => (/* binding */ getInstanceFromEnum)\n/* harmony export */ });\n/* harmony import */ var _ecs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ecs */ \"./src/ecs/ecs.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./src/utils.ts\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components */ \"./src/ecs/components.ts\");\n/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../serialization */ \"./src/serialization.ts\");\n/* harmony import */ var cannon_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cannon-es */ \"./node_modules/cannon-es/dist/cannon-es.js\");\n\n\n\n\n\n// order in which they get executed\nvar CommandTypes;\n(function (CommandTypes) {\n    CommandTypes[CommandTypes[\"TheFirst\"] = 0] = \"TheFirst\";\n    CommandTypes[CommandTypes[\"RunCode\"] = 1] = \"RunCode\";\n    CommandTypes[CommandTypes[\"CreateStickman\"] = 2] = \"CreateStickman\";\n    CommandTypes[CommandTypes[\"MovePlayer\"] = 3] = \"MovePlayer\";\n    CommandTypes[CommandTypes[\"MoveGeometry\"] = 4] = \"MoveGeometry\";\n    //    SetEntityElementsPositionAndDisplayElement = 3,\n    //    SendComputedElementsToRender = 4,\n    //    CreateShadows = 5,\n    //    WatchDevBox = 6,\n    //    RemoveShadows = 7,\n    //    PlayAnimations = 8,\n    //    UpdateShadowNumber = 9,\n    //    UpdateShadowProperties = 10,\n    //    TickTimer = 11,\n    //    UpdateAnimationTimerNumber = 12,\n    //    CreateAnimationTimers = 13,\n    //    MoveCameraWithPlayer = 14,\n    //    CreateDog = 15,\n    //    MoveDog = 16,\n    CommandTypes[CommandTypes[\"CreateScene\"] = 5] = \"CreateScene\";\n    CommandTypes[CommandTypes[\"SendGraphicComponentsToRender\"] = 6] = \"SendGraphicComponentsToRender\";\n    CommandTypes[CommandTypes[\"SyncRigidbody\"] = 7] = \"SyncRigidbody\";\n    CommandTypes[CommandTypes[\"CameraFollowGeometry\"] = 8] = \"CameraFollowGeometry\";\n})(CommandTypes || (CommandTypes = {}));\nfunction getInstanceFromEnum(commandEnum) {\n    switch (commandEnum) {\n        case CommandTypes.TheFirst:\n            return new TheFirst();\n        //        case Commands.MoveCameraWithPlayer:\n        //            return new MoveCameraWithPlayer()\n        //\n        case CommandTypes.RunCode:\n            return new RunCode();\n        case CommandTypes.MoveGeometry:\n            return new MoveGeometry();\n        case CommandTypes.SyncRigidbody:\n            return new SyncRigidBody();\n        case CommandTypes.CameraFollowGeometry:\n            return new CameraFollowGeometry();\n        //\n        //        case Commands.MoveDog:\n        //            return new MoveDog()\n        //\n        //        case Commands.CreateDog:\n        //            return new CreateDog()\n        //\n        case CommandTypes.SendGraphicComponentsToRender:\n            return new SendGraphicComponentsToRender();\n        case CommandTypes.CreateStickman:\n            return new CreateStickman();\n        case CommandTypes.MovePlayer:\n            return new MovePlayer();\n        case CommandTypes.CreateScene:\n            return new CreateScene();\n    }\n}\n// the first\nclass TheFirst {\n    constructor() {\n        this.commandType = CommandTypes.TheFirst;\n    }\n    run(system, _) {\n        //        system.addCommand(CommandTypes.CreateStickman)\n        system.addCommand(CommandTypes.CreateScene);\n        system.addCommand(CommandTypes.SendGraphicComponentsToRender);\n        //system.addCommand(Commands.CreateDog)\n        system.addCommand(CommandTypes.RunCode);\n        system.addCommand(CommandTypes.SyncRigidbody);\n        system.removeCommand(CommandTypes.TheFirst);\n    }\n}\nclass RunCode {\n    constructor() {\n        this.commandType = CommandTypes.RunCode;\n    }\n    run(system, resources) {\n        resources.physics.world.fixedStep();\n        //if (resources.input.code == undefined) {\n        //    return\n        //}\n        //return\n        //try {\n        //    let f = new Function()\n        //    //            f()\n        //}\n        //catch (e: any) {\n        //            let line = e.stack.split(\"\\n\").find((e:any) => e.includes(\"<anonymous>:\") || e.includes(\"Function:\"));\n        //            let lineIndex = (line.includes(\"<anonymous>:\") && line.indexOf(\"<anonymous>:\") + \"<anonymous>:\".length) ||  (line.includes(\"Function:\") && line.indexOf(\"Function:\") + \"Function:\".length);\n        //            console.log(+line.substring(lineIndex, lineIndex + 1) - 2);\n        //            if (e instanceof SyntaxError) {\n        //                console.log(\":( syntax error\")\n        //            }\n        //            else if (e instanceof ReferenceError) {\n        //                console.log(\":( reference error\")\n        //            }\n        //console.log(e)\n        //            console.log((e as any).lineNumber)\n    }\n}\nclass CameraFollowGeometry {\n    constructor() {\n        this.commandType = CommandTypes.CameraFollowGeometry;\n    }\n    run(system, resources) {\n        let foundHardCodedIdComponent = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.All, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.HardCodedId], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.Any, null]);\n        if (foundHardCodedIdComponent[0].length == 0) {\n            console.log(\"no hardcodedid found\");\n            return;\n        }\n        let geometryUid = foundHardCodedIdComponent[0][0].entityUid;\n        for (let cPC of resources.componentChanges.changedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Position]) {\n            if (cPC.entityUid != geometryUid)\n                continue;\n            let foundCameraComponent = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.All, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Position], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.EntityType, _components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.Camera]);\n            if (foundCameraComponent[0].length == 0)\n                return;\n            let cameraPositionComponent = foundCameraComponent[0][0];\n            let geometryPositionComponent = cPC;\n            let offset = new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 13, 13);\n            cameraPositionComponent.x = geometryPositionComponent.x + offset.x;\n            cameraPositionComponent.y = geometryPositionComponent.y + offset.y;\n            cameraPositionComponent.z = geometryPositionComponent.z + offset.z;\n        }\n    }\n}\nclass CreateScene {\n    constructor() {\n        this.commandType = CommandTypes.CreateScene;\n    }\n    run(system, resources) {\n        {\n            let camera = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n            let cameraComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Camera(45, 0.1, 500, resources.domState.windowWidth / resources.domState.windowHeight, camera);\n            let positionComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Position(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), camera);\n            let rotationComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Rotation(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(-45, 0, 0), camera);\n            let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.Camera, camera);\n            system.addComponent(cameraComponent);\n            system.addComponent(rotationComponent);\n            system.addComponent(positionComponent);\n            system.addComponent(entityTypeComponent);\n            system.addCommand(CommandTypes.CameraFollowGeometry);\n        }\n        {\n            let pointLight = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n            let lightComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Light(_components__WEBPACK_IMPORTED_MODULE_2__.LightTypes.PointLight, 50, 0xffffff, 10, 0, pointLight);\n            let positionComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Position(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(3, 8, 3), pointLight);\n            let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.Light, pointLight);\n            system.addComponent(lightComponent);\n            system.addComponent(positionComponent);\n            system.addComponent(entityTypeComponent);\n        }\n        {\n            let ambientLight = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n            let lightComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Light(_components__WEBPACK_IMPORTED_MODULE_2__.LightTypes.AmbientLight, 1, 0xffffff, 0, 0, ambientLight);\n            let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.Light, ambientLight);\n            system.addComponent(lightComponent);\n            system.addComponent(entityTypeComponent);\n        }\n        {\n            let plane = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n            let rigidBodyComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.RigidBody(plane);\n            let shapeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Shape(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(8, 0.2, 8), _components__WEBPACK_IMPORTED_MODULE_2__.ShapeTypes.Box, plane);\n            let positionComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Position(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), plane);\n            let rotationComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Rotation(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), plane);\n            let massComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Mass(0, plane);\n            let shapeColorComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.ShapeColor(0x88ffcc, plane);\n            let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.GeometricShape, plane);\n            system.addComponent(shapeComponent);\n            system.addComponent(rotationComponent);\n            system.addComponent(massComponent);\n            system.addComponent(rigidBodyComponent);\n            system.addComponent(positionComponent);\n            system.addComponent(shapeColorComponent);\n            system.addComponent(entityTypeComponent);\n        }\n        let staticCube;\n        {\n            staticCube = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n            let rigidBodyComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.RigidBody(staticCube);\n            let shapeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Shape(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, 1, 1), _components__WEBPACK_IMPORTED_MODULE_2__.ShapeTypes.Box, staticCube);\n            let positionComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Position(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 3, 2), staticCube);\n            let rotationComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Rotation(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 45, 0), staticCube);\n            let forceComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Force(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), staticCube);\n            let velocityComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Velocity(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), staticCube);\n            let massComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Mass(1, staticCube);\n            let shapeColorComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.ShapeColor(0xffaadd, staticCube);\n            let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.GeometricShape, staticCube);\n            system.addComponent(rigidBodyComponent);\n            system.addComponent(velocityComponent);\n            system.addComponent(forceComponent);\n            system.addComponent(positionComponent);\n            system.addComponent(rotationComponent);\n            system.addComponent(massComponent);\n            system.addComponent(shapeComponent);\n            system.addComponent(shapeColorComponent);\n            system.addComponent(entityTypeComponent);\n        }\n        {\n            let movingCube = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n            let rigidBodyComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.RigidBody(movingCube);\n            let shapeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Shape(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, 1, 1), _components__WEBPACK_IMPORTED_MODULE_2__.ShapeTypes.Box, movingCube);\n            let positionComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Position(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 3, 0), movingCube);\n            let rotationComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Rotation(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), movingCube);\n            let forceComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Force(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), movingCube);\n            let velocityComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Velocity(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), movingCube);\n            let massComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Mass(1, movingCube);\n            let shapeColorComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.ShapeColor(0xffaadd, movingCube);\n            let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.GeometricShape, movingCube);\n            let hardCodedIdComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.HardCodedId(0, movingCube);\n            let constraintComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Constraint(staticCube, _components__WEBPACK_IMPORTED_MODULE_2__.ConstraintTypes.Distance, 3, movingCube);\n            system.addComponent(constraintComponent);\n            system.addComponent(rigidBodyComponent);\n            system.addComponent(velocityComponent);\n            system.addComponent(forceComponent);\n            system.addComponent(positionComponent);\n            system.addComponent(rotationComponent);\n            system.addComponent(massComponent);\n            system.addComponent(shapeComponent);\n            system.addComponent(hardCodedIdComponent);\n            system.addComponent(shapeColorComponent);\n            system.addComponent(entityTypeComponent);\n            system.addCommand(CommandTypes.MoveGeometry);\n        }\n        system.removeCommand(CommandTypes.CreateScene);\n    }\n}\nclass MoveGeometry {\n    constructor() {\n        this.commandType = CommandTypes.MoveGeometry;\n    }\n    run(system, resources) {\n        let acceleration = 0.1;\n        let velocityLimit = 3;\n        // get playerUid\n        let foundHardCodedIdComponent = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.All, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.HardCodedId], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.Any, null]);\n        if (foundHardCodedIdComponent[0].length == 0) {\n            console.log(\"no hardcodedid found\");\n            return;\n        }\n        let geometryUid = foundHardCodedIdComponent[0][0].entityUid;\n        let foundForceAndVelocityComponent = system.find([\n            _ecs__WEBPACK_IMPORTED_MODULE_0__.Get.One,\n            [\n                _components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Force,\n                _components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Velocity\n            ],\n            _ecs__WEBPACK_IMPORTED_MODULE_0__.By.EntityUid,\n            geometryUid\n        ]);\n        if (foundForceAndVelocityComponent[0].length == 0 || foundForceAndVelocityComponent[1].length == 0) {\n            console.log(\"no geometry components found\");\n            return;\n        }\n        let forceComponent = foundForceAndVelocityComponent[0][0];\n        let velocityComponent = foundForceAndVelocityComponent[1][0];\n        let newForce = new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);\n        newForce.x = forceComponent.x + resources.input.movementDirection.x * acceleration;\n        newForce.z = forceComponent.z + (-resources.input.movementDirection.y) * acceleration;\n        if (Math.abs(velocityComponent.x) > velocityLimit) {\n            newForce.x = 0;\n        }\n        if (Math.abs(velocityComponent.z) > velocityLimit) {\n            newForce.z = 0;\n        }\n        if (resources.input.movementDirection.x != 0) {\n            forceComponent.x = newForce.x;\n        }\n        if (resources.input.movementDirection.y != 0) {\n            forceComponent.z = newForce.z;\n        }\n    }\n}\n// create entity\n//export class CreateDog implements ECS.Command {\n//    readonly type: Commands\n//    constructor() {\n//        this.type = Commands.CreateDog\n//    }\n//\n//    run(system: ECS.System) {\n//        for (let x = 0; x < 5; x++) {\n//            let dog = Utils.newUid()\n//            let positionComponent = new Comps.Position(new Utils.Vector3(50 * x + 100, 0, 0), dog)\n//            let forceComponent = new Comps.Force(new Utils.Vector3(0, 0, 0), dog)\n//            let massComponent = new Comps.Mass(2, dog)\n//            let sizeComponent = new Comps.Size(new Utils.Vector3(40, 90, 30), dog)\n//            let entityStateComponent = new Comps.EntityState(new Map([[Comps.EntityStates.Idle, null]]), dog)\n//            let entityTypeComponent = new Comps.EntityType(Comps.EntityTypes.Dog, dog)\n//            let healthComponent = new Comps.Health(10, dog)\n//            let animationComponent = new Comps.Animation([new Anims.PlayerIdle(), new Anims.PlayerRunning()], dog)\n//            let computedElement = new Comps.GraphicProperties(Comps.ElementTypes.Entity, dog)\n//            computedElement.translateX = positionComponent.x\n//            computedElement.translateY = positionComponent.y\n//            computedElement.zIndex = positionComponent.y\n//            computedElement.color = \"#ff0000\"\n//\n//            system.addComponent(massComponent)\n//            system.addComponent(sizeComponent)\n//            system.addComponent(forceComponent)\n//            system.addComponent(healthComponent)\n//            system.addComponent(animationComponent)\n//            system.addComponent(positionComponent)\n//            system.addComponent(entityStateComponent)\n//\n//            system.addComponent(computedElement)\n//            system.addComponent(entityTypeComponent)\n//        }\n//\n//        system.addCommand(Commands.MoveDog)\n//        system.removeCommand(Commands.CreateDog)\n//    }\n//}\nclass CreateStickman {\n    constructor() {\n        this.commandType = CommandTypes.CreateStickman;\n    }\n    run(system, _) {\n        for (let x = 0; x < 1; x++) {\n            for (let y = 0; y < 1; y++) {\n                let stickman = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n                let positionComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Position(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), stickman);\n                let entityStateComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityState([_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Idle], stickman);\n                let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.Stickman, stickman);\n                let healthComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Health(10, stickman);\n                let forceComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Force(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), stickman);\n                let massComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Mass(4, stickman);\n                let shapeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Shape(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(40, 90, 30), _components__WEBPACK_IMPORTED_MODULE_2__.ShapeTypes.Box, stickman);\n                system.addComponent(massComponent);\n                system.addComponent(shapeComponent);\n                system.addComponent(forceComponent);\n                system.addComponent(healthComponent);\n                system.addComponent(positionComponent);\n                system.addComponent(entityStateComponent);\n                system.addComponent(entityTypeComponent);\n            }\n        }\n        system.addCommand(CommandTypes.MovePlayer);\n        system.removeCommand(CommandTypes.CreateStickman);\n    }\n}\n//\n//// movement\nclass MovePlayer {\n    constructor() {\n        this.commandType = CommandTypes.MovePlayer;\n    }\n    run(system, resources) {\n        let acceleration = 0.003;\n        let forceLimit = 0.02;\n        // get playerUid\n        let foundEntityTypeComponents = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.All, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityType], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.Any, null]);\n        if (foundEntityTypeComponents[0].length == 0) {\n            console.log(\"no entity types found\");\n            return;\n        }\n        let playerUid = null;\n        for (let fC of foundEntityTypeComponents[0]) {\n            let entityTypeComponent = fC;\n            if (entityTypeComponent.entityType == _components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.Stickman) {\n                playerUid = entityTypeComponent.entityUid;\n            }\n        }\n        if (playerUid == null)\n            return;\n        // if was found, move it\n        if (resources.input.movementDirection.x == 0 &&\n            resources.input.movementDirection.y == 0) {\n            let foundEntityState = system.find([\n                _ecs__WEBPACK_IMPORTED_MODULE_0__.Get.All,\n                [\n                    _components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityState,\n                ],\n                _ecs__WEBPACK_IMPORTED_MODULE_0__.By.EntityUid,\n                foundEntityTypeComponents[0][0].entityUid\n            ]);\n            if (foundEntityState[0].length == 0) {\n                console.log(\"entityState not found\");\n                return;\n            }\n            for (let fC of foundEntityState[0]) {\n                let entityStateComponent = fC;\n                if (entityStateComponent.entityUid == playerUid) {\n                    // cannot change state to idle if wasnt runnning\n                    let indexOfRun = entityStateComponent.states.indexOf(_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Run);\n                    if (indexOfRun != -1) {\n                        entityStateComponent.states.splice(indexOfRun, 1);\n                        if (entityStateComponent.states.includes(_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Idle))\n                            return;\n                        entityStateComponent.states.push(_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Idle);\n                    }\n                    return;\n                }\n            }\n        }\n        let foundForceComponent = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.One, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Force], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.EntityUid, playerUid]);\n        if (foundForceComponent[0].length == 0) {\n            console.log(\"no player force found found\");\n            return;\n        }\n        let forceComponent = foundForceComponent[0][0];\n        let newForce = new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);\n        newForce.x = forceComponent.x + resources.input.movementDirection.x * acceleration;\n        newForce.z = forceComponent.z + (-resources.input.movementDirection.y) * acceleration;\n        if (Math.abs(newForce.x) > forceLimit) {\n            newForce.x = forceLimit * (newForce.x < 0 ? -1 : 1);\n        }\n        if (Math.abs(newForce.z) > forceLimit) {\n            newForce.z = forceLimit * (newForce.z < 0 ? -1 : 1);\n        }\n        let foundEntityState = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.One, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityState], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.EntityUid, playerUid]);\n        if (foundEntityState[0].length == 0) {\n            console.log(\"player entityState not found\");\n            return;\n        }\n        let entityStateComponent = foundEntityState[0][0];\n        if (!entityStateComponent.states.includes(_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Run)) {\n            entityStateComponent.states.push(_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Run);\n        }\n        let indexOfIdle = entityStateComponent.states.indexOf(_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Idle);\n        if (indexOfIdle != -1) {\n            entityStateComponent.states.splice(indexOfIdle, 1);\n        }\n        if (resources.input.movementDirection.x != 0) {\n            forceComponent.x = newForce.x;\n        }\n        if (resources.input.movementDirection.y != 0) {\n            forceComponent.z = newForce.z;\n        }\n    }\n}\n//// render\nclass SendGraphicComponentsToRender {\n    constructor() {\n        this.commandType = CommandTypes.SendGraphicComponentsToRender;\n    }\n    run(system, resources) {\n        let graphicChanges = new _serialization__WEBPACK_IMPORTED_MODULE_3__.GraphicChanges();\n        // for changed\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Camera]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Light]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Position]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityState]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Rotation]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Shape]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.ShapeColor]);\n        // for added\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityType]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Camera]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Light]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Position]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityState]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Rotation]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Shape]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.ShapeColor]);\n        // check for removed entities\n        for (let rC of resources.componentChanges.removedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityType]) {\n            graphicChanges.removedEntitiesUid.push(rC.entityUid);\n        }\n        // check for added entities\n        for (let rC of resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityType]) {\n            graphicChanges.addedEntitiesUid.push(rC.entityUid);\n        }\n        if (graphicChanges.changedComponents.length == 0 &&\n            graphicChanges.removedEntitiesUid.length == 0) {\n            return;\n        }\n        postMessage(new _serialization__WEBPACK_IMPORTED_MODULE_3__.Message(_serialization__WEBPACK_IMPORTED_MODULE_3__.Messages.GraphicChanges, graphicChanges));\n    }\n}\nclass SyncRigidBody {\n    constructor() {\n        this.commandType = CommandTypes.SyncRigidbody;\n    }\n    run(system, resources) {\n        ///////////// update body\n        // for new\n        for (let aRB of resources.componentChanges.addedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.RigidBody]) {\n            let addedRigidBody = aRB;\n            let isMassSet = false;\n            let isShapeSet = false;\n            let isPositionSet = false;\n            let isRotationSet = false;\n            for (let aMC of resources.componentChanges.addedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Mass]) {\n                if (aMC.entityUid != addedRigidBody.entityUid)\n                    continue;\n                let addedMassComponent = aMC;\n                addedRigidBody.body.mass = addedMassComponent.mass;\n                addedRigidBody.body.updateMassProperties();\n                isMassSet = true;\n            }\n            //            for (let aCC of resources.componentChanges.addedComponentsBuffer[Comps.ComponentTypes.Constraint]) {\n            //                if (aCC.entityUid != addedRigidBody.entityUid) continue\n            //                let addedConstraintComponent = aCC as Comps.Constraint\n            //                switch (addedConstraintComponent.constraintType) {\n            //                    case Comps.ConstraintTypes.PointToPoint: {\n            //                        console.log(\"point to point constraint not implemented\")\n            //                    } break;\n            //                    case Comps.ConstraintTypes.Lock: {\n            //                        console.log(\"lock constraint not implemented\")\n            //                    } break;\n            //                    case Comps.ConstraintTypes.Distance: {\n            //                        let foundRigidBody = system.find([\n            //                            ECS.Get.One,\n            //                            [Comps.ComponentTypes.RigidBody],\n            //                            ECS.By.EntityUid,\n            //                            addedConstraintComponent.entityUidConstrainedTo\n            //                        ])\n            //                        let constrainedBody: CANNON.Body | undefined = undefined\n            //                        if (foundRigidBody[0].length == 0) {\n            //                            for (let aCC2 of resources.componentChanges.addedComponentsBuffer[Comps.ComponentTypes.RigidBody]) {\n            //                                if (aCC2.entityUid != addedConstraintComponent.entityUidConstrainedTo) continue\n            //                                let constrainedRigidBodyComponent = aCC2 as Comps.RigidBody\n            //                                constrainedBody = constrainedRigidBodyComponent.body\n            //                            }\n            //                        } else {\n            //                            constrainedBody = (foundRigidBody[0][0] as Comps.RigidBody).body\n            //                        }\n            //                        if (constrainedBody == undefined) {\n            //                            console.log(\"constrained body wasn't found\")\n            //                        } else {\n            //                            let constraint = new CANNON.DistanceConstraint(addedRigidBody.body, constrainedBody, addedConstraintComponent.distance)\n            //                            resources.physics.world.addConstraint(constraint)\n            //                        }\n            //                    } break;\n            //                }\n            //}\n            for (let aVC of resources.componentChanges.addedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Velocity]) {\n                if (aVC.entityUid != addedRigidBody.entityUid)\n                    continue;\n                let addedVelocityComponent = aVC;\n                let newVelocity = new cannon_es__WEBPACK_IMPORTED_MODULE_4__.Vec3(addedVelocityComponent.x, addedVelocityComponent.y, addedVelocityComponent.z);\n                addedRigidBody.body.velocity = newVelocity;\n            }\n            for (let aFC of resources.componentChanges.addedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Force]) {\n                if (aFC.entityUid != addedRigidBody.entityUid)\n                    continue;\n                let addedForceComponent = aFC;\n                let force = new cannon_es__WEBPACK_IMPORTED_MODULE_4__.Vec3(addedForceComponent.x, addedForceComponent.y, addedForceComponent.z);\n                addedRigidBody.body.force = force;\n            }\n            for (let aSC of resources.componentChanges.addedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Shape]) {\n                if (aSC.entityUid != addedRigidBody.entityUid)\n                    continue;\n                let addedShapeComponent = aSC;\n                let size = new cannon_es__WEBPACK_IMPORTED_MODULE_4__.Vec3(addedShapeComponent.size.x / 2, addedShapeComponent.size.y / 2, addedShapeComponent.size.z / 2);\n                let shape;\n                switch (addedShapeComponent.shapeType) {\n                    case (_components__WEBPACK_IMPORTED_MODULE_2__.ShapeTypes.Box):\n                        {\n                            shape = new cannon_es__WEBPACK_IMPORTED_MODULE_4__.Box(size);\n                        }\n                        break;\n                }\n                addedRigidBody.body.addShape(shape);\n                isShapeSet = true;\n            }\n            for (let aPC of resources.componentChanges.addedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Position]) {\n                if (aPC.entityUid != addedRigidBody.entityUid)\n                    continue;\n                let addedPositionComponent = aPC;\n                addedRigidBody.body.position.set(addedPositionComponent.x, addedPositionComponent.y, addedPositionComponent.z);\n                isPositionSet = true;\n            }\n            for (let rPC of resources.componentChanges.addedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Rotation]) {\n                if (rPC.entityUid != addedRigidBody.entityUid)\n                    continue;\n                let addedRotationComponent = rPC;\n                let rotation = new cannon_es__WEBPACK_IMPORTED_MODULE_4__.Quaternion(addedRotationComponent.x, addedRotationComponent.y, addedRotationComponent.z, addedRotationComponent.w);\n                addedRigidBody.body.quaternion = rotation;\n                isRotationSet = true;\n            }\n            if (isShapeSet && isMassSet && isPositionSet && isRotationSet) {\n                resources.physics.world.addBody(addedRigidBody.body);\n            }\n            else {\n                console.log(\"not enough components for rigidbody\");\n            }\n        }\n        // added constraints\n        for (let aCC of resources.componentChanges.addedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Constraint]) {\n            let foundRigidBodyA = system.find([\n                _ecs__WEBPACK_IMPORTED_MODULE_0__.Get.One,\n                [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.RigidBody],\n                _ecs__WEBPACK_IMPORTED_MODULE_0__.By.EntityUid,\n                aCC.entityUid\n            ]);\n            if (foundRigidBodyA[0].length == 0) {\n                console.log(\"entity does not have rigidbody\");\n                continue;\n            }\n            let addedConstraintComponent = aCC;\n            let rigidBodyComponentA = foundRigidBodyA[0][0];\n            switch (addedConstraintComponent.constraintType) {\n                case _components__WEBPACK_IMPORTED_MODULE_2__.ConstraintTypes.PointToPoint:\n                    {\n                        console.log(\"point to point constraint not implemented\");\n                    }\n                    break;\n                case _components__WEBPACK_IMPORTED_MODULE_2__.ConstraintTypes.Lock:\n                    {\n                        console.log(\"lock constraint not implemented\");\n                    }\n                    break;\n                case _components__WEBPACK_IMPORTED_MODULE_2__.ConstraintTypes.Distance:\n                    {\n                        let foundRigidBodyB = system.find([\n                            _ecs__WEBPACK_IMPORTED_MODULE_0__.Get.One,\n                            [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.RigidBody],\n                            _ecs__WEBPACK_IMPORTED_MODULE_0__.By.EntityUid,\n                            addedConstraintComponent.entityUidConstrainedTo\n                        ]);\n                        let bodyB = undefined;\n                        if (foundRigidBodyB[0].length == 0) {\n                            for (let aRBB of resources.componentChanges.addedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.RigidBody]) {\n                                if (aRBB.entityUid != addedConstraintComponent.entityUidConstrainedTo)\n                                    continue;\n                                let rigidBodyComponentB = aRBB;\n                                bodyB = rigidBodyComponentB.body;\n                            }\n                        }\n                        else {\n                            bodyB = foundRigidBodyB[0][0].body;\n                        }\n                        if (bodyB == undefined) {\n                            console.log(\"constrained body wasn't found\");\n                        }\n                        else {\n                            let constraint = new cannon_es__WEBPACK_IMPORTED_MODULE_4__.DistanceConstraint(rigidBodyComponentA.body, bodyB, addedConstraintComponent.distance);\n                            resources.physics.world.addConstraint(constraint);\n                        }\n                    }\n                    break;\n            }\n        }\n        //for changed\n        let foundRigidBodyComponents = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.All, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.RigidBody], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.Any, null]);\n        for (let cMC of resources.componentChanges.changedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Mass]) {\n            let changedMassComponent = cMC;\n            for (let rBC of foundRigidBodyComponents[0]) {\n                if (rBC.entityUid != changedMassComponent.entityUid)\n                    continue;\n                let rigidBodyComponent = rBC;\n                rigidBodyComponent.body.mass = changedMassComponent.mass;\n            }\n        }\n        for (let cFC of resources.componentChanges.changedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Force]) {\n            let changedForceComponent = cFC;\n            for (let rBC of foundRigidBodyComponents[0]) {\n                if (rBC.entityUid != changedForceComponent.entityUid)\n                    continue;\n                let rigidBodyComponent = rBC;\n                rigidBodyComponent.body.applyForce(new cannon_es__WEBPACK_IMPORTED_MODULE_4__.Vec3(changedForceComponent.x, changedForceComponent.y, changedForceComponent.z));\n            }\n        }\n        for (let cPC of resources.componentChanges.changedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Position]) {\n            let changedPositionComponent = cPC;\n            for (let rBC of foundRigidBodyComponents[0]) {\n                if (rBC.entityUid != changedPositionComponent.entityUid)\n                    continue;\n                let rigidBodyComponent = rBC;\n                rigidBodyComponent.body.position = new cannon_es__WEBPACK_IMPORTED_MODULE_4__.Vec3(changedPositionComponent.x, changedPositionComponent.y, changedPositionComponent.z);\n            }\n        }\n        for (let cRC of resources.componentChanges.changedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Rotation]) {\n            let changedRotationComponent = cRC;\n            for (let rBC of foundRigidBodyComponents[0]) {\n                if (rBC.entityUid != changedRotationComponent.entityUid)\n                    continue;\n                let rigidBodyComponent = rBC;\n                rigidBodyComponent.body.quaternion = new cannon_es__WEBPACK_IMPORTED_MODULE_4__.Quaternion(changedRotationComponent.x, changedRotationComponent.y, changedRotationComponent.z, changedRotationComponent.w);\n            }\n        }\n        for (let cVC of resources.componentChanges.changedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Velocity]) {\n            let changedVelocityComponent = cVC;\n            for (let rBC of foundRigidBodyComponents[0]) {\n                if (rBC.entityUid != changedVelocityComponent.entityUid)\n                    continue;\n                let rigidBodyComponent = rBC;\n                let newVelocity = new cannon_es__WEBPACK_IMPORTED_MODULE_4__.Vec3(changedVelocityComponent.x, changedVelocityComponent.y, changedVelocityComponent.z);\n                rigidBodyComponent.body.velocity = newVelocity;\n            }\n        }\n        for (let cSC of resources.componentChanges.changedComponentsBuffer[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Shape]) {\n            let changedShapeComponent = cSC;\n            for (let rBC of foundRigidBodyComponents[0]) {\n                if (rBC.entityUid != changedShapeComponent.entityUid)\n                    continue;\n                let rigidBodyComponent = rBC;\n                let position = rigidBodyComponent.body.position;\n                let rotation = rigidBodyComponent.body.quaternion;\n                let velocity = rigidBodyComponent.body.velocity;\n                let size = new cannon_es__WEBPACK_IMPORTED_MODULE_4__.Vec3(changedShapeComponent.size.x / 2, changedShapeComponent.size.y / 2, changedShapeComponent.size.z / 2);\n                let shape;\n                switch (changedShapeComponent.shapeType) {\n                    case (_components__WEBPACK_IMPORTED_MODULE_2__.ShapeTypes.Box):\n                        {\n                            shape = new cannon_es__WEBPACK_IMPORTED_MODULE_4__.Box(size);\n                        }\n                        break;\n                }\n                let newBody = new cannon_es__WEBPACK_IMPORTED_MODULE_4__.Body({\n                    velocity: velocity,\n                    position: position,\n                    quaternion: rotation,\n                    shape: shape\n                });\n                rigidBodyComponent.body = newBody;\n            }\n        }\n        ///////////// update components\n        let foundComponents = system.find([\n            _ecs__WEBPACK_IMPORTED_MODULE_0__.Get.All,\n            [\n                _components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Position,\n                _components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Rotation,\n                _components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Force,\n                _components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Velocity\n            ], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.Any, null\n        ]);\n        for (let rBC of foundRigidBodyComponents[0]) {\n            let rigidBodyComponent = rBC;\n            for (let pC of foundComponents[0]) {\n                if (pC.entityUid != rigidBodyComponent.entityUid)\n                    continue;\n                let positionComponent = pC;\n                if (rigidBodyComponent.body.position.x != positionComponent.x ||\n                    rigidBodyComponent.body.position.y != positionComponent.y ||\n                    rigidBodyComponent.body.position.z != positionComponent.z) {\n                    positionComponent.x = rigidBodyComponent.body.position.x;\n                    positionComponent.y = rigidBodyComponent.body.position.y;\n                    positionComponent.z = rigidBodyComponent.body.position.z;\n                }\n            }\n            for (let rC of foundComponents[1]) {\n                if (rC.entityUid != rigidBodyComponent.entityUid)\n                    continue;\n                let rotationComponent = rC;\n                if (rotationComponent.x != rigidBodyComponent.body.quaternion.x ||\n                    rotationComponent.y != rigidBodyComponent.body.quaternion.y ||\n                    rotationComponent.z != rigidBodyComponent.body.quaternion.z ||\n                    rotationComponent.w != rigidBodyComponent.body.quaternion.w) {\n                    rotationComponent.x = rigidBodyComponent.body.quaternion.x;\n                    rotationComponent.y = rigidBodyComponent.body.quaternion.y;\n                    rotationComponent.z = rigidBodyComponent.body.quaternion.z;\n                    rotationComponent.w = rigidBodyComponent.body.quaternion.w;\n                }\n            }\n            for (let fC of foundComponents[2]) {\n                if (fC.entityUid != rigidBodyComponent.entityUid)\n                    continue;\n                let forceComponent = fC;\n                if (forceComponent.x != rigidBodyComponent.body.force.x ||\n                    forceComponent.y != rigidBodyComponent.body.force.y ||\n                    forceComponent.z != rigidBodyComponent.body.force.z) {\n                    forceComponent.x = rigidBodyComponent.body.force.x;\n                    forceComponent.y = rigidBodyComponent.body.force.y;\n                    forceComponent.z = rigidBodyComponent.body.force.z;\n                }\n            }\n            for (let vC of foundComponents[3]) {\n                if (vC.entityUid != rigidBodyComponent.entityUid)\n                    continue;\n                let velocityComponent = vC;\n                if (rigidBodyComponent.body.velocity.x != velocityComponent.x ||\n                    rigidBodyComponent.body.velocity.y != velocityComponent.y ||\n                    rigidBodyComponent.body.velocity.z != velocityComponent.z) {\n                    velocityComponent.x = rigidBodyComponent.body.velocity.x;\n                    velocityComponent.y = rigidBodyComponent.body.velocity.y;\n                    velocityComponent.z = rigidBodyComponent.body.velocity.z;\n                }\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack://strworld/./src/ecs/commands.ts?");

/***/ }),

/***/ "./src/ecs/components.ts":
/*!*******************************!*\
  !*** ./src/ecs/components.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AngularLock: () => (/* binding */ AngularLock),\n/* harmony export */   Camera: () => (/* binding */ Camera),\n/* harmony export */   Code: () => (/* binding */ Code),\n/* harmony export */   ComponentTypes: () => (/* binding */ ComponentTypes),\n/* harmony export */   Constraint: () => (/* binding */ Constraint),\n/* harmony export */   ConstraintTypes: () => (/* binding */ ConstraintTypes),\n/* harmony export */   EntityState: () => (/* binding */ EntityState),\n/* harmony export */   EntityStates: () => (/* binding */ EntityStates),\n/* harmony export */   EntityType: () => (/* binding */ EntityType),\n/* harmony export */   EntityTypes: () => (/* binding */ EntityTypes),\n/* harmony export */   Force: () => (/* binding */ Force),\n/* harmony export */   HardCodedId: () => (/* binding */ HardCodedId),\n/* harmony export */   Health: () => (/* binding */ Health),\n/* harmony export */   Light: () => (/* binding */ Light),\n/* harmony export */   LightTypes: () => (/* binding */ LightTypes),\n/* harmony export */   Mass: () => (/* binding */ Mass),\n/* harmony export */   NUMBER_OF_COMPONENTS: () => (/* binding */ NUMBER_OF_COMPONENTS),\n/* harmony export */   Position: () => (/* binding */ Position),\n/* harmony export */   RigidBody: () => (/* binding */ RigidBody),\n/* harmony export */   RobotComponentTypes: () => (/* binding */ RobotComponentTypes),\n/* harmony export */   Rotation: () => (/* binding */ Rotation),\n/* harmony export */   Shape: () => (/* binding */ Shape),\n/* harmony export */   ShapeColor: () => (/* binding */ ShapeColor),\n/* harmony export */   ShapeTypes: () => (/* binding */ ShapeTypes),\n/* harmony export */   TargetPosition: () => (/* binding */ TargetPosition),\n/* harmony export */   Timer: () => (/* binding */ Timer),\n/* harmony export */   TimerTypes: () => (/* binding */ TimerTypes),\n/* harmony export */   Velocity: () => (/* binding */ Velocity)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ \"./src/utils.ts\");\n/* harmony import */ var cannon_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cannon-es */ \"./node_modules/cannon-es/dist/cannon-es.js\");\n\n\nvar ComponentTypes;\n(function (ComponentTypes) {\n    ComponentTypes[ComponentTypes[\"Health\"] = 0] = \"Health\";\n    ComponentTypes[ComponentTypes[\"Camera\"] = 1] = \"Camera\";\n    ComponentTypes[ComponentTypes[\"Light\"] = 2] = \"Light\";\n    ComponentTypes[ComponentTypes[\"Velocity\"] = 3] = \"Velocity\";\n    ComponentTypes[ComponentTypes[\"Rotation\"] = 4] = \"Rotation\";\n    ComponentTypes[ComponentTypes[\"EntityState\"] = 5] = \"EntityState\";\n    ComponentTypes[ComponentTypes[\"Name\"] = 6] = \"Name\";\n    ComponentTypes[ComponentTypes[\"EntityType\"] = 7] = \"EntityType\";\n    ComponentTypes[ComponentTypes[\"Position\"] = 8] = \"Position\";\n    ComponentTypes[ComponentTypes[\"TargetLocation\"] = 9] = \"TargetLocation\";\n    ComponentTypes[ComponentTypes[\"Timer\"] = 10] = \"Timer\";\n    ComponentTypes[ComponentTypes[\"Shape\"] = 11] = \"Shape\";\n    ComponentTypes[ComponentTypes[\"Mass\"] = 12] = \"Mass\";\n    ComponentTypes[ComponentTypes[\"ShapeColor\"] = 13] = \"ShapeColor\";\n    ComponentTypes[ComponentTypes[\"Force\"] = 14] = \"Force\";\n    ComponentTypes[ComponentTypes[\"HardCodedId\"] = 15] = \"HardCodedId\";\n    ComponentTypes[ComponentTypes[\"Code\"] = 16] = \"Code\";\n    ComponentTypes[ComponentTypes[\"RobotComponent\"] = 17] = \"RobotComponent\";\n    ComponentTypes[ComponentTypes[\"RigidBody\"] = 18] = \"RigidBody\";\n    ComponentTypes[ComponentTypes[\"Constraint\"] = 19] = \"Constraint\";\n})(ComponentTypes || (ComponentTypes = {}));\nconst NUMBER_OF_COMPONENTS = (() => {\n    let n = 0;\n    for (let i = 0; i < Object.keys(ComponentTypes).length / 2; i++) {\n        n++;\n    }\n    return n;\n})();\nvar TimerTypes;\n(function (TimerTypes) {\n    TimerTypes[TimerTypes[\"Animation\"] = 0] = \"Animation\";\n})(TimerTypes || (TimerTypes = {}));\nvar EntityTypes;\n(function (EntityTypes) {\n    EntityTypes[EntityTypes[\"Stickman\"] = 0] = \"Stickman\";\n    EntityTypes[EntityTypes[\"Grass\"] = 1] = \"Grass\";\n    EntityTypes[EntityTypes[\"Dog\"] = 2] = \"Dog\";\n    EntityTypes[EntityTypes[\"Camera\"] = 3] = \"Camera\";\n    EntityTypes[EntityTypes[\"Light\"] = 4] = \"Light\";\n    EntityTypes[EntityTypes[\"GeometricShape\"] = 5] = \"GeometricShape\";\n    EntityTypes[EntityTypes[\"Robot\"] = 6] = \"Robot\";\n})(EntityTypes || (EntityTypes = {}));\nvar EntityStates;\n(function (EntityStates) {\n    EntityStates[EntityStates[\"Idle\"] = 0] = \"Idle\";\n    EntityStates[EntityStates[\"Run\"] = 1] = \"Run\";\n    EntityStates[EntityStates[\"Follow\"] = 2] = \"Follow\";\n    EntityStates[EntityStates[\"Attack\"] = 3] = \"Attack\";\n    EntityStates[EntityStates[\"Chase\"] = 4] = \"Chase\";\n})(EntityStates || (EntityStates = {}));\nvar LightTypes;\n(function (LightTypes) {\n    LightTypes[LightTypes[\"AmbientLight\"] = 0] = \"AmbientLight\";\n    LightTypes[LightTypes[\"PointLight\"] = 1] = \"PointLight\";\n    LightTypes[LightTypes[\"DirectionalLight\"] = 2] = \"DirectionalLight\";\n    LightTypes[LightTypes[\"SpotLight\"] = 3] = \"SpotLight\";\n})(LightTypes || (LightTypes = {}));\nvar ShapeTypes;\n(function (ShapeTypes) {\n    ShapeTypes[ShapeTypes[\"Box\"] = 0] = \"Box\";\n})(ShapeTypes || (ShapeTypes = {}));\nvar RobotComponentTypes;\n(function (RobotComponentTypes) {\n    RobotComponentTypes[RobotComponentTypes[\"Motor\"] = 0] = \"Motor\";\n})(RobotComponentTypes || (RobotComponentTypes = {}));\nvar ConstraintTypes;\n(function (ConstraintTypes) {\n    ConstraintTypes[ConstraintTypes[\"PointToPoint\"] = 0] = \"PointToPoint\";\n    ConstraintTypes[ConstraintTypes[\"Lock\"] = 1] = \"Lock\";\n    ConstraintTypes[ConstraintTypes[\"Distance\"] = 2] = \"Distance\";\n})(ConstraintTypes || (ConstraintTypes = {}));\n//export class RobotComponent implements ECS.Component {\n//    entityUid: number\n//    componentUid: number\n//    componentType: ComponentTypes\n//    childrenComponent: []\n//    constructor(\n//        newCode: string,\n//        newEntityUid: number\n//    ) {\n//        this.componentUid = Utils.newUid()\n//        this.entityUid = newEntityUid\n//        this.componentType = ComponentTypes.Code\n//        this.code = newCode\n//    }\n//}\nclass Code {\n    constructor(newCode, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Code;\n        this.code = newCode;\n    }\n}\nclass Constraint {\n    constructor(newEntityUidConstrainedTo, newConstraintType, newDistance, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Constraint;\n        this.constraintType = newConstraintType;\n        this.entityUidConstrainedTo = newEntityUidConstrainedTo;\n        this.distance = newDistance;\n    }\n}\nclass AngularLock {\n    constructor(newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.RigidBody;\n        this.body = new cannon_es__WEBPACK_IMPORTED_MODULE_1__.Body({ type: cannon_es__WEBPACK_IMPORTED_MODULE_1__.BODY_TYPES.DYNAMIC });\n    }\n}\nclass RigidBody {\n    constructor(newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.RigidBody;\n        this.body = new cannon_es__WEBPACK_IMPORTED_MODULE_1__.Body({ type: cannon_es__WEBPACK_IMPORTED_MODULE_1__.BODY_TYPES.DYNAMIC });\n    }\n}\nclass HardCodedId {\n    constructor(newId, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.HardCodedId;\n        this.id = newId;\n    }\n}\nclass ShapeColor {\n    constructor(newColor, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.ShapeColor;\n        this.color = newColor;\n    }\n}\nclass Shape {\n    constructor(newSize, newShapeType, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Shape;\n        this.size = newSize;\n        this.shapeType = newShapeType;\n    }\n}\nclass Light {\n    constructor(newLightType, newIntensity, newColor, newDistance, newDecay, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Light;\n        this.lightType = newLightType;\n        this.intensity = newIntensity;\n        this.color = newColor;\n        this.distance = newDistance;\n        this.decay = newDecay;\n    }\n}\nclass Camera {\n    constructor(newFov, newNear, newFar, newAspect, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Camera;\n        this.fov = newFov;\n        this.near = newNear;\n        this.far = newFar;\n        this.aspect = newAspect;\n    }\n}\nclass TargetPosition {\n    constructor(newLocation, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.TargetLocation;\n        this.x = newLocation.x;\n        this.y = newLocation.y;\n        this.z = newLocation.z;\n    }\n}\nclass EntityType {\n    constructor(newEntityType, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.EntityType;\n        this.entityType = newEntityType;\n    }\n}\nclass EntityState {\n    constructor(newState, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.EntityState;\n        this.states = newState;\n    }\n}\nclass Position {\n    constructor(newPosition, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Position;\n        this.x = newPosition.x;\n        this.y = newPosition.y;\n        this.z = newPosition.z;\n    }\n}\nclass Health {\n    constructor(newHealth, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Health;\n        this.health = newHealth;\n    }\n}\nclass Velocity {\n    constructor(newVelocity, newEntityUid) {\n        this.x = newVelocity.x;\n        this.y = newVelocity.y;\n        this.z = newVelocity.z;\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Velocity;\n    }\n}\nclass Force {\n    constructor(newForce, newEntityUid) {\n        this.x = newForce.x;\n        this.y = newForce.y;\n        this.z = newForce.z;\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Force;\n    }\n}\nclass Mass {\n    constructor(newMass, newEntityUid) {\n        this.mass = newMass;\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Mass;\n    }\n}\nclass Rotation {\n    constructor(newRotation, newEntityUid) {\n        let quaternion = new cannon_es__WEBPACK_IMPORTED_MODULE_1__.Quaternion()\n            .setFromEuler(_utils__WEBPACK_IMPORTED_MODULE_0__.degreesToRadians(newRotation.x), _utils__WEBPACK_IMPORTED_MODULE_0__.degreesToRadians(newRotation.y), _utils__WEBPACK_IMPORTED_MODULE_0__.degreesToRadians(newRotation.z));\n        this.x = quaternion.x;\n        this.y = quaternion.y;\n        this.z = quaternion.z;\n        this.w = quaternion.w;\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Rotation;\n    }\n}\nclass Timer {\n    constructor(newTimeLeft, newTimerType, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Timer;\n        this.isFinished = false;\n        this.isRestart = false;\n        this.timeLeft = newTimeLeft;\n        this.originalTime = newTimeLeft;\n        this.timerType = newTimerType;\n    }\n}\n\n\n//# sourceURL=webpack://strworld/./src/ecs/components.ts?");

/***/ }),

/***/ "./src/ecs/ecs.ts":
/*!************************!*\
  !*** ./src/ecs/ecs.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   By: () => (/* binding */ By),\n/* harmony export */   CurrentExecutingCommand: () => (/* binding */ CurrentExecutingCommand),\n/* harmony export */   EntityComponents: () => (/* binding */ EntityComponents),\n/* harmony export */   Get: () => (/* binding */ Get),\n/* harmony export */   System: () => (/* binding */ System)\n/* harmony export */ });\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components */ \"./src/ecs/components.ts\");\n/* harmony import */ var _commands__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commands */ \"./src/ecs/commands.ts\");\n\n\nvar Get;\n(function (Get) {\n    Get[Get[\"One\"] = 0] = \"One\";\n    Get[Get[\"All\"] = 1] = \"All\";\n})(Get || (Get = {}));\nvar By;\n(function (By) {\n    By[By[\"EntityUid\"] = 0] = \"EntityUid\";\n    By[By[\"EntityType\"] = 1] = \"EntityType\";\n    By[By[\"ComponentId\"] = 2] = \"ComponentId\";\n    By[By[\"Any\"] = 3] = \"Any\";\n})(By || (By = {}));\nclass EntityComponents {\n    constructor(newEntityUid) {\n        this.components = [];\n        this.entityUid = newEntityUid;\n    }\n}\nclass CommandChanges {\n    constructor() {\n        this.removedCommands = [];\n        this.addedCommands = [];\n    }\n    clearChanges() {\n        this.removedCommands = [];\n        this.addedCommands = [];\n    }\n}\nclass CurrentExecutingCommand {\n    constructor() {\n        this.command = null;\n    }\n}\nclass System {\n    constructor(newResources, newCurrentExecutingCommand) {\n        this.accessedComponent = null;\n        this.resources = newResources;\n        this.currentExecutingCommand = newCurrentExecutingCommand;\n        this.commandChangesBuffer = new CommandChanges();\n        this.commands = [];\n        this.components = [];\n        for (let _ = 0; _ < _components__WEBPACK_IMPORTED_MODULE_0__.NUMBER_OF_COMPONENTS; _++) {\n            this.components.push([]);\n        }\n    }\n    removeCommand(command) {\n        this.commandChangesBuffer.removedCommands.push(command);\n    }\n    addCommand(command) {\n        this.commandChangesBuffer.addedCommands.push(command);\n    }\n    addComponent(component) {\n        this.components[component.componentType].push(this.createProxy(component));\n        this\n            .resources\n            .componentChanges\n            .addedComponentsBuffer[component.componentType]\n            .push(component);\n    }\n    removeComponent(component) {\n        for (let [cI, c] of this.components[component.componentType].entries()) {\n            if (c.componentUid == component.componentUid) {\n                this\n                    .resources\n                    .componentChanges\n                    .removedComponentsBuffer[component.componentType]\n                    .push(component);\n                this.components.splice(cI, 1);\n            }\n        }\n    }\n    createProxy(obj) {\n        let outer = this;\n        let handler = {\n            set(obj, prop, value) {\n                if (\"componentUid\" in obj) {\n                    outer.accessedComponent = obj;\n                }\n                let isAlreadyChanged = false;\n                for (let cC of outer\n                    .resources\n                    .componentChanges\n                    .changedComponentsBuffer[outer.accessedComponent.componentType]) {\n                    if (cC.componentUid == outer.accessedComponent.componentUid) {\n                        isAlreadyChanged = true;\n                    }\n                }\n                if (!isAlreadyChanged) {\n                    outer\n                        .resources\n                        .componentChanges\n                        .changedComponentsBuffer[outer.accessedComponent.componentType]\n                        .push(outer.accessedComponent);\n                }\n                obj[prop] = value;\n                return true;\n            },\n            get(obj, prop) {\n                let component = obj;\n                if (\"componentUid\" in obj) {\n                    if (component.componentType == _components__WEBPACK_IMPORTED_MODULE_0__.ComponentTypes.RigidBody) {\n                        return obj[prop];\n                    }\n                    outer.accessedComponent = component;\n                }\n                if (typeof obj[prop] == \"object\") {\n                    return outer.createProxy(obj[prop]);\n                }\n                return obj[prop];\n            },\n        };\n        return new Proxy(obj, handler);\n    }\n    find(query) {\n        // Comment on production !TODO\n        if (query[1].length == 0) {\n            console.log(\"no components expecified\");\n            return [];\n        }\n        if (query[2] == By.EntityType && query[3] == undefined ||\n            query[2] == By.ComponentId && typeof query[3] != \"number\" ||\n            query[2] == By.EntityUid && typeof query[3] != \"number\") {\n            console.log('argument does not match \"By\" enum');\n            return [];\n        }\n        if (query[0] == Get.All && query[2] == By.ComponentId) {\n            console.log('cannot get all by component id');\n            return [];\n        }\n        if (query[0] == Get.One && query[2] == By.EntityType) {\n            console.log(\"query Get.One By.EntityType is not supported yet\");\n            return [];\n        }\n        if (query[0] == Get.One && query[2] == By.Any) {\n            console.log(\"query Get.One By.Any is not supported yet\");\n            return [];\n        }\n        // Comment on production !TODO\n        let collected = [];\n        for (let i = 0; i < query[1].length; i++) {\n            collected.push([]);\n        }\n        for (let [qci, qc] of query[1].entries()) {\n            if (query[0] == Get.One) {\n                if (query[2] == By.ComponentId) {\n                    for (let c of this.components[qc]) {\n                        if (query[3] == c.componentUid) {\n                            collected[qci].push(c);\n                            break;\n                        }\n                    }\n                    continue;\n                }\n                else if (query[2] == By.EntityUid) {\n                    for (let c of this.components[qc]) {\n                        if (query[3] == c.entityUid) {\n                            collected[qci].push(c);\n                            break;\n                        }\n                    }\n                    continue;\n                }\n            }\n            else if (query[0] == Get.All) {\n                if (query[2] == By.EntityUid) {\n                    for (let c of this.components[qc]) {\n                        if (query[3] == c.entityUid) {\n                            collected[qci].push(c);\n                        }\n                    }\n                    continue;\n                }\n                else if (query[2] == By.Any) {\n                    for (let c of this.components[qc]) {\n                        collected[qci].push(c);\n                    }\n                    continue;\n                }\n                else if (query[2] == By.EntityType) {\n                    for (let e of this.components[_components__WEBPACK_IMPORTED_MODULE_0__.ComponentTypes.EntityType]) {\n                        let entityTypeComponent = e;\n                        if (query[3] == entityTypeComponent.entityType) {\n                            for (let c of this.components[qc]) {\n                                if (e.entityUid == c.entityUid) {\n                                    collected[qci].push(c);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    continue;\n                }\n            }\n        }\n        return collected;\n    }\n    updateCommands() {\n        for (let aC of this.commandChangesBuffer.addedCommands) {\n            let isFound = false;\n            for (let c of this.commands) {\n                if (aC == c.commandType) {\n                    console.log(\"$ command already exists\");\n                    isFound = true;\n                }\n            }\n            if (isFound) {\n                continue;\n            }\n            let command = _commands__WEBPACK_IMPORTED_MODULE_1__.getInstanceFromEnum(aC);\n            let isInserted = false;\n            for (let [cI, c] of this.commands.entries()) {\n                if (aC < c.commandType) {\n                    isInserted = true;\n                    this.commands.splice(cI, 0, command);\n                    break;\n                }\n            }\n            if (!isInserted) {\n                this.commands.push(command);\n            }\n        }\n        for (let rC of this.commandChangesBuffer.removedCommands) {\n            let isFound = false;\n            for (let cI = this.commands.length - 1; cI >= 0; cI--) {\n                if (rC == this.commands[cI].commandType) {\n                    isFound = true;\n                    this.commands.splice(cI, 1);\n                    this.resources.commandState.removeCommandStates(rC);\n                }\n            }\n            if (!isFound) {\n                console.log(\"$ command was not found\");\n            }\n        }\n    }\n    run() {\n        //    console.log(\"commands\", this.commands)\n        //console.log(\"components\", this.components)\n        for (let c of this.commands) {\n            this.currentExecutingCommand.command = c.commandType;\n            c.run(this, this.resources);\n        }\n        this.updateCommands();\n        this.commandChangesBuffer.clearChanges();\n        this.resources.componentChanges.cycleChanges();\n    }\n}\n\n\n//# sourceURL=webpack://strworld/./src/ecs/ecs.ts?");

/***/ }),

/***/ "./src/ecs/resources.ts":
/*!******************************!*\
  !*** ./src/ecs/resources.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommandStateResource: () => (/* binding */ CommandStateResource),\n/* harmony export */   ComponentChanges: () => (/* binding */ ComponentChanges),\n/* harmony export */   DOMStateResouce: () => (/* binding */ DOMStateResouce),\n/* harmony export */   DeltaResource: () => (/* binding */ DeltaResource),\n/* harmony export */   InputResource: () => (/* binding */ InputResource),\n/* harmony export */   IsFirstTimeResource: () => (/* binding */ IsFirstTimeResource),\n/* harmony export */   OptionsResource: () => (/* binding */ OptionsResource),\n/* harmony export */   PhysicsResource: () => (/* binding */ PhysicsResource),\n/* harmony export */   PositionGridResource: () => (/* binding */ PositionGridResource),\n/* harmony export */   Resources: () => (/* binding */ Resources)\n/* harmony export */ });\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components */ \"./src/ecs/components.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./src/utils.ts\");\n/* harmony import */ var cannon_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cannon-es */ \"./node_modules/cannon-es/dist/cannon-es.js\");\n\n\n\nclass Resources {\n    constructor(newCurrentExecutingCommand) {\n        this.domState = new DOMStateResouce();\n        this.delta = new DeltaResource(newCurrentExecutingCommand);\n        this.isFirstTime = new IsFirstTimeResource(newCurrentExecutingCommand);\n        this.commandState = new CommandStateResource(newCurrentExecutingCommand);\n        this.componentChanges = new ComponentChanges();\n        this.input = new InputResource();\n        this.options = new OptionsResource();\n        this.positionGrid = new PositionGridResource();\n        this.physics = new PhysicsResource();\n    }\n}\nclass PhysicsResource {\n    constructor() {\n        this.world = new cannon_es__WEBPACK_IMPORTED_MODULE_2__.World({\n            gravity: new cannon_es__WEBPACK_IMPORTED_MODULE_2__.Vec3(0, -9.82, 0),\n        });\n    }\n}\nclass LastTimeCommandWasRun {\n    constructor(newTime, newCommand) {\n        this.time = newTime;\n        this.command = newCommand;\n    }\n}\nclass DeltaResource {\n    constructor(newCurrentExecutingCommand) {\n        this.currentExecutingCommand = newCurrentExecutingCommand;\n        this.lastTimeCommandsWereRun = [];\n    }\n    get() {\n        for (let d of this.lastTimeCommandsWereRun) {\n            if (d.command == this.currentExecutingCommand.command) {\n                let oldTime = d.time;\n                d.time = performance.now();\n                return performance.now() - oldTime;\n            }\n        }\n        this.lastTimeCommandsWereRun.push(new LastTimeCommandWasRun(performance.now(), this.currentExecutingCommand.command));\n        return null;\n    }\n}\nclass CommandStateResource {\n    constructor(newCurrentExecutingCommand) {\n        this.currentExecutingCommand = newCurrentExecutingCommand;\n        this.state = new Map();\n    }\n    removeCommandStates(command) {\n        for (let [k, _] of this.state) {\n            if (k[1] == command) {\n                this.state.delete(k);\n            }\n        }\n    }\n    set(key, value) {\n        this.state.set([key, this.currentExecutingCommand.command], value);\n    }\n    get(key) {\n        console.log(this.state);\n        let value = this.state.get([key, this.currentExecutingCommand.command]);\n        if (value == undefined) {\n            return undefined;\n        }\n        else {\n            return value[1];\n        }\n    }\n}\nclass IsFirstTimeResource {\n    constructor(newCurrentExecutingCommand) {\n        this.currentExecutingCommand = newCurrentExecutingCommand;\n        this.commandsCheckedFirstTime = [];\n    }\n    get() {\n        for (let cFT of this.commandsCheckedFirstTime) {\n            if (cFT == this.currentExecutingCommand.command) {\n                return false;\n            }\n        }\n        this.commandsCheckedFirstTime.push(this.currentExecutingCommand.command);\n        return true;\n    }\n}\nclass OptionsResource {\n    constructor() {\n        this.isSetNight = undefined;\n        this.isShadowsEnabled = undefined;\n        this.isEnablePhysics = undefined;\n        this.isEnableFreeCamera = undefined;\n    }\n}\nclass DOMStateResouce {\n    constructor() {\n        this.windowWidth = undefined;\n        this.windowHeight = undefined;\n    }\n}\nclass InputResource {\n    constructor() {\n        this.movementDirection = new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector2(0, 0);\n        this.code = undefined;\n    }\n}\nclass ComponentChanges {\n    constructor() {\n        this.baseStructure = [];\n        for (let i = 0; i < _components__WEBPACK_IMPORTED_MODULE_0__.NUMBER_OF_COMPONENTS; i++) {\n            this.baseStructure.push([]);\n        }\n        this.changedComponentsBuffer = structuredClone(this.baseStructure);\n        this.removedComponentsBuffer = structuredClone(this.baseStructure);\n        this.addedComponentsBuffer = structuredClone(this.baseStructure);\n        this.changedComponents = [];\n        this.removedComponents = [];\n        this.addedComponents = [];\n    }\n    cycleChanges() {\n        this.changedComponents = this.changedComponentsBuffer;\n        this.removedComponents = this.removedComponentsBuffer;\n        this.addedComponents = this.addedComponentsBuffer;\n        this.changedComponentsBuffer = structuredClone(this.baseStructure);\n        this.removedComponentsBuffer = structuredClone(this.baseStructure);\n        this.addedComponentsBuffer = structuredClone(this.baseStructure);\n    }\n}\nclass PositionGridResource {\n    constructor() {\n    }\n}\n\n\n//# sourceURL=webpack://strworld/./src/ecs/resources.ts?");

/***/ }),

/***/ "./src/serialization.ts":
/*!******************************!*\
  !*** ./src/serialization.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CodeError: () => (/* binding */ CodeError),\n/* harmony export */   DOMData: () => (/* binding */ DOMData),\n/* harmony export */   GraphicChanges: () => (/* binding */ GraphicChanges),\n/* harmony export */   Input: () => (/* binding */ Input),\n/* harmony export */   Message: () => (/* binding */ Message),\n/* harmony export */   Messages: () => (/* binding */ Messages),\n/* harmony export */   Options: () => (/* binding */ Options),\n/* harmony export */   Scroll: () => (/* binding */ Scroll)\n/* harmony export */ });\nclass Scroll {\n    constructor(newScrollLeft, newScrollTop) {\n        this.scrollTop = newScrollTop;\n        this.scrollLeft = newScrollLeft;\n    }\n}\nclass CodeError {\n    constructor(newIsRuntimeError, newDescription, newLineNumber = undefined) {\n        this.isRuntimeError = newIsRuntimeError;\n        this.description = newDescription;\n        this.lineNumber = newLineNumber;\n    }\n}\nclass DOMData {\n    constructor(newWindowWidth, newWindowHeight) {\n        this.windowWidth = newWindowWidth;\n        this.windowHeight = newWindowHeight;\n    }\n}\nclass Options {\n    constructor(newIsShadowsEnabled, newIsSetNight, newIsEnablePhysics, newIsEnableFreeCamera) {\n        this.isShadowsEnabled = newIsShadowsEnabled;\n        this.isSetNight = newIsSetNight;\n        this.isEnablePhysics = newIsEnablePhysics;\n        this.isEnableFreeCamera = newIsEnableFreeCamera;\n    }\n}\n//export class CodeResult {\n//    \n//}\n//export class Code {\n//    submitedCode: string\n//    modifiedCode: string \n//}\nclass Input {\n    constructor(newMovementDirection) {\n        this.movementDirection = newMovementDirection;\n    }\n}\nclass GraphicChanges {\n    constructor() {\n        this.changedComponents = [];\n        this.addedEntitiesUid = [];\n        this.removedEntitiesUid = [];\n    }\n}\nvar Messages;\n(function (Messages) {\n    Messages[Messages[\"Start\"] = 0] = \"Start\";\n    Messages[Messages[\"Input\"] = 1] = \"Input\";\n    Messages[Messages[\"Options\"] = 2] = \"Options\";\n    Messages[Messages[\"GraphicChanges\"] = 3] = \"GraphicChanges\";\n})(Messages || (Messages = {}));\nclass Message {\n    constructor(newMessage, newData = null) {\n        this.message = newMessage;\n        this.data = newData;\n    }\n}\n\n\n//# sourceURL=webpack://strworld/./src/serialization.ts?");

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssetFetchCache: () => (/* binding */ AssetFetchCache),\n/* harmony export */   Quaternion: () => (/* binding */ Quaternion),\n/* harmony export */   Vector2: () => (/* binding */ Vector2),\n/* harmony export */   Vector3: () => (/* binding */ Vector3),\n/* harmony export */   crossProduct: () => (/* binding */ crossProduct),\n/* harmony export */   degreesToRadians: () => (/* binding */ degreesToRadians),\n/* harmony export */   newUid: () => (/* binding */ newUid),\n/* harmony export */   randomNumber: () => (/* binding */ randomNumber),\n/* harmony export */   replaceRange: () => (/* binding */ replaceRange),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst randomNumber = (max) => Math.floor(Math.random() * max) + 1;\nconst newUid = () => randomNumber(100000000);\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\nclass AssetFetchCache {\n    static fetch(assetName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let asset = this.cachedAssets.get(assetName);\n            if (asset == undefined) {\n                let fetchedAsset = yield (yield fetch(\"assets/\" + assetName)).blob();\n                this.cachedAssets.set(assetName, fetchedAsset);\n                return fetchedAsset;\n            }\n            return asset;\n        });\n    }\n}\nAssetFetchCache.cachedAssets = new Map();\nclass Vector2 {\n    constructor(newX, newY) {\n        this.x = newX;\n        this.y = newY;\n    }\n}\nclass Vector3 {\n    constructor(newX, newY, newZ) {\n        this.x = newX;\n        this.y = newY;\n        this.z = newZ;\n    }\n}\nclass Quaternion {\n    constructor(newX, newY, newZ, newW) {\n        this.x = newX;\n        this.y = newY;\n        this.z = newZ;\n        this.w = newW;\n    }\n}\nfunction crossProduct(a, b) {\n    return new Vector3((a.y * b.z) - (a.z * b.y), (a.z * b.x) - (a.x * b.z), (a.x * b.y) - (a.y * b.x));\n}\nfunction replaceRange(str, start, end, substituteCallback) {\n    let substitute = substituteCallback(str.substring(start, end));\n    return str.substring(0, start) + substitute + str.substring(end);\n}\nfunction degreesToRadians(degrees) {\n    return degrees * (3.1416 / 180);\n}\n\n\n//# sourceURL=webpack://strworld/./src/utils.ts?");

/***/ }),

/***/ "./src/worker.ts":
/*!***********************!*\
  !*** ./src/worker.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ecs_ecs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ecs/ecs */ \"./src/ecs/ecs.ts\");\n/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serialization */ \"./src/serialization.ts\");\n/* harmony import */ var _ecs_resources__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ecs/resources */ \"./src/ecs/resources.ts\");\n/* harmony import */ var _ecs_commands__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ecs/commands */ \"./src/ecs/commands.ts\");\n\n\n\n\nlet currentExecutingCommand = new _ecs_ecs__WEBPACK_IMPORTED_MODULE_0__.CurrentExecutingCommand();\nlet resources = new _ecs_resources__WEBPACK_IMPORTED_MODULE_2__.Resources(currentExecutingCommand);\nlet system = new _ecs_ecs__WEBPACK_IMPORTED_MODULE_0__.System(resources, currentExecutingCommand);\nonmessage = (data) => {\n    let msg = data.data;\n    switch (msg.message) {\n        case _serialization__WEBPACK_IMPORTED_MODULE_1__.Messages.Start:\n            {\n                let newData = msg.data;\n                resources.domState.windowHeight = newData.windowHeight;\n                resources.domState.windowWidth = newData.windowWidth;\n                system.addCommand(_ecs_commands__WEBPACK_IMPORTED_MODULE_3__.CommandTypes.TheFirst);\n                //setInterval(system.run.bind(system), 15)\n                setInterval(system.run.bind(system), 15);\n            }\n            break;\n        case _serialization__WEBPACK_IMPORTED_MODULE_1__.Messages.Input:\n            {\n                let newData = msg.data;\n                resources.input.movementDirection = newData.movementDirection;\n            }\n            break;\n        case _serialization__WEBPACK_IMPORTED_MODULE_1__.Messages.Options:\n            {\n                let newData = msg.data;\n            }\n            break;\n    }\n};\n\n\n//# sourceURL=webpack://strworld/./src/worker.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// the startup function
/******/ 	__webpack_require__.x = () => {
/******/ 		// Load entry module and return exports
/******/ 		// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 		var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors-node_modules_cannon-es_dist_cannon-es_js"], () => (__webpack_require__("./src/worker.ts")))
/******/ 		__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 		return __webpack_exports__;
/******/ 	};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/importScripts chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "already loaded"
/******/ 		var installedChunks = {
/******/ 			"src_worker_ts": 1
/******/ 		};
/******/ 		
/******/ 		// importScripts chunk loading
/******/ 		var installChunk = (data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			while(chunkIds.length)
/******/ 				installedChunks[chunkIds.pop()] = 1;
/******/ 			parentChunkLoadingFunction(data);
/******/ 		};
/******/ 		__webpack_require__.f.i = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					importScripts(__webpack_require__.p + __webpack_require__.u(chunkId));
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkstrworld"] = self["webpackChunkstrworld"] || [];
/******/ 		var parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);
/******/ 		chunkLoadingGlobal.push = installChunk;
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup chunk dependencies */
/******/ 	(() => {
/******/ 		var next = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			return __webpack_require__.e("vendors-node_modules_cannon-es_dist_cannon-es_js").then(next);
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// run startup
/******/ 	var __webpack_exports__ = __webpack_require__.x();
/******/ 	
/******/ })()
;