/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ecs/commands.ts":
/*!*****************************!*\
  !*** ./src/ecs/commands.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApplyForce: () => (/* binding */ ApplyForce),\n/* harmony export */   Collide: () => (/* binding */ Collide),\n/* harmony export */   CommandTypes: () => (/* binding */ CommandTypes),\n/* harmony export */   CreateGravity: () => (/* binding */ CreateGravity),\n/* harmony export */   CreateScene: () => (/* binding */ CreateScene),\n/* harmony export */   CreateStickman: () => (/* binding */ CreateStickman),\n/* harmony export */   MoveGeometry: () => (/* binding */ MoveGeometry),\n/* harmony export */   MovePlayer: () => (/* binding */ MovePlayer),\n/* harmony export */   RunCode: () => (/* binding */ RunCode),\n/* harmony export */   SendGraphicComponentsToRender: () => (/* binding */ SendGraphicComponentsToRender),\n/* harmony export */   TheFirst: () => (/* binding */ TheFirst),\n/* harmony export */   getInstanceFromEnum: () => (/* binding */ getInstanceFromEnum)\n/* harmony export */ });\n/* harmony import */ var _ecs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ecs */ \"./src/ecs/ecs.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./src/utils.ts\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components */ \"./src/ecs/components.ts\");\n/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../serialization */ \"./src/serialization.ts\");\n\n\n\n\n// order in which they get executed\nvar CommandTypes;\n(function (CommandTypes) {\n    CommandTypes[CommandTypes[\"TheFirst\"] = 0] = \"TheFirst\";\n    CommandTypes[CommandTypes[\"RunCode\"] = 1] = \"RunCode\";\n    CommandTypes[CommandTypes[\"CreateStickman\"] = 2] = \"CreateStickman\";\n    CommandTypes[CommandTypes[\"MovePlayer\"] = 3] = \"MovePlayer\";\n    CommandTypes[CommandTypes[\"MoveGeometry\"] = 4] = \"MoveGeometry\";\n    //    SetEntityElementsPositionAndDisplayElement = 3,\n    //    SendComputedElementsToRender = 4,\n    //    CreateShadows = 5,\n    //    WatchDevBox = 6,\n    //    RemoveShadows = 7,\n    //    PlayAnimations = 8,\n    //    UpdateShadowNumber = 9,\n    //    UpdateShadowProperties = 10,\n    //    TickTimer = 11,\n    //    UpdateAnimationTimerNumber = 12,\n    //    CreateAnimationTimers = 13,\n    //    MoveCameraWithPlayer = 14,\n    //    CreateDog = 15,\n    //    MoveDog = 16,\n    CommandTypes[CommandTypes[\"ApplyForce\"] = 5] = \"ApplyForce\";\n    CommandTypes[CommandTypes[\"CreateGravity\"] = 6] = \"CreateGravity\";\n    CommandTypes[CommandTypes[\"CreateScene\"] = 7] = \"CreateScene\";\n    CommandTypes[CommandTypes[\"Collide\"] = 8] = \"Collide\";\n    CommandTypes[CommandTypes[\"SendGraphicComponentsToRender\"] = 9] = \"SendGraphicComponentsToRender\";\n})(CommandTypes || (CommandTypes = {}));\nfunction getInstanceFromEnum(commandEnum) {\n    switch (commandEnum) {\n        case CommandTypes.TheFirst:\n            return new TheFirst();\n        //        case Commands.MoveCameraWithPlayer:\n        //            return new MoveCameraWithPlayer()\n        //\n        case CommandTypes.RunCode:\n            return new RunCode();\n        case CommandTypes.Collide:\n            return new Collide();\n        //\n        case CommandTypes.ApplyForce:\n            return new ApplyForce();\n        case CommandTypes.MoveGeometry:\n            return new MoveGeometry();\n        //\n        //        case Commands.MoveDog:\n        //            return new MoveDog()\n        //\n        //        case Commands.CreateDog:\n        //            return new CreateDog()\n        //\n        //        case Commands.UpdateAnimationTimerNumber:\n        //            return new UpdateAnimationTimerNumber()\n        //\n        //        case Commands.TickTimer:\n        //            return new TickTimer()\n        //\n        //        case Commands.CreateAnimationTimers:\n        //            return new CreateAnimationTimers()\n        //\n        //        case Commands.UpdateShadowProperties:\n        //            return new UpdateShadowProperties()\n        //\n        //        case Commands.PlayAnimations:\n        //            return new PlayAnimations()\n        //\n        //        case Commands.UpdateShadowNumber:\n        //            return new UpdateShadowNumber()\n        //\n        //        case Commands.RemoveShadows:\n        //            return new RemoveShadows()\n        //\n        //        case Commands.WatchDevBox:\n        //            return new WatchDevBox()\n        //\n        case CommandTypes.SendGraphicComponentsToRender:\n            return new SendGraphicComponentsToRender();\n        case CommandTypes.CreateStickman:\n            return new CreateStickman();\n        case CommandTypes.MovePlayer:\n            return new MovePlayer();\n        case CommandTypes.CreateScene:\n            return new CreateScene();\n        case CommandTypes.CreateGravity:\n            return new CreateGravity();\n        //\n        //        case Commands.SetEntityElementsPositionAndDisplayElement:\n        //            return new SetEntityElementsPositionAndDisplayElement()\n        //\n        //        case Commands.SendComputedElementsToRender:\n        //            return new SendComputedElementsToRender()\n        //\n        //        case Commands.CreateShadows:\n        //            return new CreateShadows()\n    }\n}\n// the first\nclass TheFirst {\n    constructor() {\n        this.commandType = CommandTypes.TheFirst;\n    }\n    run(system, _) {\n        // how to ensure they are created in a good order\n        //\n        // first ensure that commands\n        // that depend of some components are created first\n        //\n        //        system.addCommand(CommandTypes.CreateStickman)\n        system.addCommand(CommandTypes.CreateScene);\n        system.addCommand(CommandTypes.SendGraphicComponentsToRender);\n        //system.addCommand(Commands.CreateDog)\n        //system.addCommand(Commands.SetEntityElementsPositionAndDisplayElement)\n        //system.addCommand(Commands.SendComputedElementsToRender)\n        //system.addCommand(Commands.PlayAnimations)\n        //system.addCommand(Commands.UpdateAnimationTimerNumber)\n        //system.addCommand(Commands.TickTimer)\n        system.addCommand(CommandTypes.ApplyForce);\n        system.addCommand(CommandTypes.RunCode);\n        //system.addCommand(CommandTypes.CreateGravity)\n        system.addCommand(CommandTypes.Collide);\n        //system.addCommand(Commands.WatchDevBox)\n        system.removeCommand(CommandTypes.TheFirst);\n    }\n}\nclass RunCode {\n    constructor() {\n        this.commandType = CommandTypes.RunCode;\n    }\n    run(system, resources) {\n        if (resources.input.code == undefined) {\n            return;\n        }\n        return;\n        try {\n            let f = new Function();\n            //            f()\n        }\n        catch (e) {\n            //            let line = e.stack.split(\"\\n\").find((e:any) => e.includes(\"<anonymous>:\") || e.includes(\"Function:\"));\n            //            let lineIndex = (line.includes(\"<anonymous>:\") && line.indexOf(\"<anonymous>:\") + \"<anonymous>:\".length) ||  (line.includes(\"Function:\") && line.indexOf(\"Function:\") + \"Function:\".length);\n            //            console.log(+line.substring(lineIndex, lineIndex + 1) - 2);\n            //            if (e instanceof SyntaxError) {\n            //                console.log(\":( syntax error\")\n            //            }\n            //            else if (e instanceof ReferenceError) {\n            //                console.log(\":( reference error\")\n            //            }\n            console.log(e);\n            //            console.log((e as any).lineNumber)\n        }\n    }\n}\nclass CreateScene {\n    constructor() {\n        this.commandType = CommandTypes.CreateScene;\n    }\n    run(system, resources) {\n        {\n            let camera = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n            let cameraComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Camera(45, 0.1, 500, resources.domState.windowWidth / resources.domState.windowHeight, camera);\n            let positionComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Position(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 14, 8), camera);\n            let rotationComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Rotation(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(-60, 0, 0), camera);\n            let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.Camera, camera);\n            system.addComponent(cameraComponent);\n            system.addComponent(rotationComponent);\n            system.addComponent(positionComponent);\n            system.addComponent(entityTypeComponent);\n        }\n        {\n            let pointLight = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n            let lightComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Light(_components__WEBPACK_IMPORTED_MODULE_2__.LightTypes.PointLight, 10, 0xffffff, 10, 0, pointLight);\n            let positionComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Position(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 3, 1), pointLight);\n            let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.Light, pointLight);\n            system.addComponent(lightComponent);\n            system.addComponent(positionComponent);\n            system.addComponent(entityTypeComponent);\n        }\n        {\n            let ambientLight = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n            let lightComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Light(_components__WEBPACK_IMPORTED_MODULE_2__.LightTypes.AmbientLight, 0.5, 0xffffff, 0, 0, ambientLight);\n            let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.Light, ambientLight);\n            system.addComponent(lightComponent);\n            system.addComponent(entityTypeComponent);\n        }\n        {\n            let plane = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n            let shapeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Shape(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(8, 0.2, 8), _components__WEBPACK_IMPORTED_MODULE_2__.ShapeTypes.Box, plane);\n            let positionComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Position(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, -1.1, 0), plane);\n            let shapeColorComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.ShapeColor(0x88ffcc, plane);\n            let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.GeometricShape, plane);\n            system.addComponent(shapeComponent);\n            system.addComponent(positionComponent);\n            system.addComponent(shapeColorComponent);\n            system.addComponent(entityTypeComponent);\n        }\n        {\n            let movingCube = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n            let shapeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Shape(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, 2, 1), _components__WEBPACK_IMPORTED_MODULE_2__.ShapeTypes.Box, movingCube);\n            let positionComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Position(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), movingCube);\n            let shapeColorComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.ShapeColor(0xff55cc, movingCube);\n            let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.GeometricShape, movingCube);\n            let forceComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Force(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), movingCube);\n            let massComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Mass(3.5, movingCube);\n            let hardCodedIdComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.HardCodedId(0, movingCube);\n            system.addComponent(shapeComponent);\n            system.addComponent(hardCodedIdComponent);\n            system.addComponent(massComponent);\n            system.addComponent(positionComponent);\n            system.addComponent(forceComponent);\n            system.addComponent(shapeColorComponent);\n            system.addComponent(entityTypeComponent);\n            system.addCommand(CommandTypes.MoveGeometry);\n        }\n        {\n            for (let x = 0; x < 5; x++) {\n                for (let z = 0; z < 5; z++) {\n                    if (_utils__WEBPACK_IMPORTED_MODULE_1__.randomNumber(20) == 2) {\n                        let staticBox = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n                        let shapeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Shape(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, 1, 1), _components__WEBPACK_IMPORTED_MODULE_2__.ShapeTypes.Box, staticBox);\n                        let positionComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Position(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(-x, -0.5, -z), staticBox);\n                        let shapeColorComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.ShapeColor(0x1122aa, staticBox);\n                        let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.GeometricShape, staticBox);\n                        let forceComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Force(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), staticBox);\n                        let massComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Mass(3.5, staticBox);\n                        system.addComponent(shapeComponent);\n                        system.addComponent(massComponent);\n                        system.addComponent(positionComponent);\n                        system.addComponent(forceComponent);\n                        system.addComponent(shapeColorComponent);\n                        system.addComponent(entityTypeComponent);\n                    }\n                    if (_utils__WEBPACK_IMPORTED_MODULE_1__.randomNumber(20) == 2) {\n                        let staticBox = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n                        let shapeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Shape(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(1, 1, 1), _components__WEBPACK_IMPORTED_MODULE_2__.ShapeTypes.Box, staticBox);\n                        let positionComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Position(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(x + 1, -0.5, z + 1), staticBox);\n                        let shapeColorComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.ShapeColor(0x1122aa, staticBox);\n                        let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.GeometricShape, staticBox);\n                        let forceComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Force(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), staticBox);\n                        let massComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Mass(3.5, staticBox);\n                        system.addComponent(shapeComponent);\n                        system.addComponent(massComponent);\n                        system.addComponent(positionComponent);\n                        system.addComponent(forceComponent);\n                        system.addComponent(shapeColorComponent);\n                        system.addComponent(entityTypeComponent);\n                    }\n                }\n            }\n        }\n        system.removeCommand(CommandTypes.CreateScene);\n    }\n}\nclass MoveGeometry {\n    constructor() {\n        this.commandType = CommandTypes.MoveGeometry;\n    }\n    run(system, resources) {\n        let acceleration = 0.003;\n        let forceLimit = 0.02;\n        // get playerUid\n        let foundHardCodedIdComponent = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.All, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.HardCodedId], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.Any, null]);\n        if (foundHardCodedIdComponent[0].length == 0) {\n            console.log(\"no hardcodedid found\");\n            return;\n        }\n        let geometryUid = foundHardCodedIdComponent[0][0].entityUid;\n        let foundForceComponent = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.One, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Force], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.EntityId, geometryUid]);\n        if (foundForceComponent[0].length == 0) {\n            console.log(\"no geometry force found\");\n            return;\n        }\n        let forceComponent = foundForceComponent[0][0];\n        let newForce = new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);\n        newForce.x = forceComponent.x + resources.input.movementDirection.x * acceleration;\n        newForce.z = forceComponent.z + (-resources.input.movementDirection.y) * acceleration;\n        if (Math.abs(newForce.x) > forceLimit) {\n            newForce.x = forceLimit * (newForce.x < 0 ? -1 : 1);\n        }\n        if (Math.abs(newForce.z) > forceLimit) {\n            newForce.z = forceLimit * (newForce.z < 0 ? -1 : 1);\n        }\n        if (resources.input.movementDirection.x != 0) {\n            forceComponent.x = newForce.x;\n        }\n        if (resources.input.movementDirection.y != 0) {\n            forceComponent.z = newForce.z;\n        }\n    }\n}\n// create entity\n//export class CreateDog implements ECS.Command {\n//    readonly type: Commands\n//    constructor() {\n//        this.type = Commands.CreateDog\n//    }\n//\n//    run(system: ECS.System) {\n//        for (let x = 0; x < 5; x++) {\n//            let dog = Utils.newUid()\n//            let positionComponent = new Comps.Position(new Utils.Vector3(50 * x + 100, 0, 0), dog)\n//            let forceComponent = new Comps.Force(new Utils.Vector3(0, 0, 0), dog)\n//            let massComponent = new Comps.Mass(2, dog)\n//            let sizeComponent = new Comps.Size(new Utils.Vector3(40, 90, 30), dog)\n//            let entityStateComponent = new Comps.EntityState(new Map([[Comps.EntityStates.Idle, null]]), dog)\n//            let entityTypeComponent = new Comps.EntityType(Comps.EntityTypes.Dog, dog)\n//            let healthComponent = new Comps.Health(10, dog)\n//            let animationComponent = new Comps.Animation([new Anims.PlayerIdle(), new Anims.PlayerRunning()], dog)\n//            let computedElement = new Comps.GraphicProperties(Comps.ElementTypes.Entity, dog)\n//            computedElement.translateX = positionComponent.x\n//            computedElement.translateY = positionComponent.y\n//            computedElement.zIndex = positionComponent.y\n//            computedElement.color = \"#ff0000\"\n//\n//            system.addComponent(massComponent)\n//            system.addComponent(sizeComponent)\n//            system.addComponent(forceComponent)\n//            system.addComponent(healthComponent)\n//            system.addComponent(animationComponent)\n//            system.addComponent(positionComponent)\n//            system.addComponent(entityStateComponent)\n//\n//            system.addComponent(computedElement)\n//            system.addComponent(entityTypeComponent)\n//        }\n//\n//        system.addCommand(Commands.MoveDog)\n//        system.removeCommand(Commands.CreateDog)\n//    }\n//}\nclass CreateStickman {\n    constructor() {\n        this.commandType = CommandTypes.CreateStickman;\n    }\n    run(system, _) {\n        for (let x = 0; x < 1; x++) {\n            for (let y = 0; y < 1; y++) {\n                let stickman = _utils__WEBPACK_IMPORTED_MODULE_1__.newUid();\n                let positionComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Position(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), stickman);\n                let entityStateComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityState([_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Idle], stickman);\n                let entityTypeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.EntityType(_components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.Stickman, stickman);\n                let healthComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Health(10, stickman);\n                let forceComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Force(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0), stickman);\n                let massComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Mass(4, stickman);\n                let shapeComponent = new _components__WEBPACK_IMPORTED_MODULE_2__.Shape(new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(40, 90, 30), _components__WEBPACK_IMPORTED_MODULE_2__.ShapeTypes.Box, stickman);\n                system.addComponent(massComponent);\n                system.addComponent(shapeComponent);\n                system.addComponent(forceComponent);\n                system.addComponent(healthComponent);\n                system.addComponent(positionComponent);\n                system.addComponent(entityStateComponent);\n                system.addComponent(entityTypeComponent);\n            }\n        }\n        system.addCommand(CommandTypes.MovePlayer);\n        system.removeCommand(CommandTypes.CreateStickman);\n    }\n}\n//\n//// movement\nclass MovePlayer {\n    constructor() {\n        this.commandType = CommandTypes.MovePlayer;\n    }\n    run(system, resources) {\n        let acceleration = 0.003;\n        let forceLimit = 0.02;\n        // get playerUid\n        let foundEntityTypeComponents = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.All, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityType], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.Any, null]);\n        if (foundEntityTypeComponents[0].length == 0) {\n            console.log(\"no entity types found\");\n            return;\n        }\n        let playerUid = null;\n        for (let fC of foundEntityTypeComponents[0]) {\n            let entityTypeComponent = fC;\n            if (entityTypeComponent.entityType == _components__WEBPACK_IMPORTED_MODULE_2__.EntityTypes.Stickman) {\n                playerUid = entityTypeComponent.entityUid;\n            }\n        }\n        if (playerUid == null)\n            return;\n        // if was found, move it\n        if (resources.input.movementDirection.x == 0 &&\n            resources.input.movementDirection.y == 0) {\n            let foundEntityState = system.find([\n                _ecs__WEBPACK_IMPORTED_MODULE_0__.Get.All,\n                [\n                    _components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityState,\n                ],\n                _ecs__WEBPACK_IMPORTED_MODULE_0__.By.EntityId,\n                foundEntityTypeComponents[0][0].entityUid\n            ]);\n            if (foundEntityState[0].length == 0) {\n                console.log(\"entityState not found\");\n                return;\n            }\n            for (let fC of foundEntityState[0]) {\n                let entityStateComponent = fC;\n                if (entityStateComponent.entityUid == playerUid) {\n                    // cannot change state to idle if wasnt runnning\n                    let indexOfRun = entityStateComponent.states.indexOf(_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Run);\n                    if (indexOfRun != -1) {\n                        entityStateComponent.states.splice(indexOfRun, 1);\n                        if (entityStateComponent.states.includes(_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Idle))\n                            return;\n                        entityStateComponent.states.push(_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Idle);\n                    }\n                    return;\n                }\n            }\n        }\n        let foundForceComponent = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.One, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Force], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.EntityId, playerUid]);\n        if (foundForceComponent[0].length == 0) {\n            console.log(\"no player force found found\");\n            return;\n        }\n        let forceComponent = foundForceComponent[0][0];\n        let newForce = new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);\n        newForce.x = forceComponent.x + resources.input.movementDirection.x * acceleration;\n        newForce.z = forceComponent.z + (-resources.input.movementDirection.y) * acceleration;\n        if (Math.abs(newForce.x) > forceLimit) {\n            newForce.x = forceLimit * (newForce.x < 0 ? -1 : 1);\n        }\n        if (Math.abs(newForce.z) > forceLimit) {\n            newForce.z = forceLimit * (newForce.z < 0 ? -1 : 1);\n        }\n        let foundEntityState = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.One, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityState], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.EntityId, playerUid]);\n        if (foundEntityState[0].length == 0) {\n            console.log(\"player entityState not found\");\n            return;\n        }\n        let entityStateComponent = foundEntityState[0][0];\n        if (!entityStateComponent.states.includes(_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Run)) {\n            entityStateComponent.states.push(_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Run);\n        }\n        let indexOfIdle = entityStateComponent.states.indexOf(_components__WEBPACK_IMPORTED_MODULE_2__.EntityStates.Idle);\n        if (indexOfIdle != -1) {\n            entityStateComponent.states.splice(indexOfIdle, 1);\n        }\n        if (resources.input.movementDirection.x != 0) {\n            forceComponent.x = newForce.x;\n        }\n        if (resources.input.movementDirection.y != 0) {\n            forceComponent.z = newForce.z;\n        }\n    }\n}\n//export class MoveDog implements ECS.Command {\n//    readonly type: Commands\n//    constructor() {\n//        this.type = Commands.MoveDog\n//    }\n//\n//    run(system: ECS.System) {\n//\n//        let delta = system.delta()\n//        if (delta == null) return\n//\n//        let acceleration = 0.02\n//        let forceLimit = 1\n//\n//\n//        // get dog and player entityTypes\n//        let foundEntityTypeComponents = system.find([ECS.Get.All, [Comps.Components.EntityType], ECS.By.Any, null])\n//        if (foundEntityTypeComponents[0].length == 0) {\n//            console.log(\"no entity types found\")\n//            return\n//        }\n//\n//\n//        for (let fC of foundEntityTypeComponents[0]) {\n//            // for every dog\n//            let entityTypeComponent = fC.component as Comps.EntityType\n//            if (entityTypeComponent.entityType != Comps.EntityTypes.Dog) {\n//                continue\n//            }\n//\n//            // current dog uid\n//            let dogUid = entityTypeComponent.entityUid\n//\n//            // dog position\n//            let foundDogComponents = system.find(\n//                [ECS.Get.One, [Comps.Components.Position, Comps.Components.TargetLocation, Comps.Components.Force], ECS.By.EntityId, dogUid])\n//            if (foundDogComponents[0].length == 0 || foundDogComponents[2].length == 0) {\n//                console.log(\"no dog component found\")\n//                return\n//            }\n//            let dogPositionComponent = foundDogComponents[0][0].component as Comps.Position\n//            let dogTargetLocationComponent: Comps.TargetLocation | null = null\n//\n//            if (foundDogComponents[1].length != 0) {\n//                dogTargetLocationComponent = foundDogComponents[1][0].component as Comps.TargetLocation\n//            }\n//            // get closest player\n//            let closestPlayerPositionComponent: Comps.Position | null = null\n//            let closestPositionHypothenuse: number | null = null\n//            // loop through players\n//            for (let fETC of foundEntityTypeComponents[0]) {\n//                let entityTypeComponent = fETC.component as Comps.EntityType\n//                if (entityTypeComponent.entityType == Comps.EntityTypes.Player) {\n//\n//                    // get player position\n//                    let foundPlayerPositionComponents = system.find(\n//                        [ECS.Get.One, [Comps.Components.Position], ECS.By.EntityId, fETC.component.entityUid])\n//                    if (foundPlayerPositionComponents[0].length == 0) {\n//                        console.log(\"no player position found\")\n//                        break\n//                    }\n//                    let playerPositionComponent = foundPlayerPositionComponents[0][0].component as Comps.Position\n//\n//                    // calculate closest player\n//                    let side1 = playerPositionComponent.x - dogPositionComponent.x\n//                    let side2 = playerPositionComponent.y - dogPositionComponent.y\n//\n//                    let hypothenuse = Math.hypot(side1, side2)\n//\n//                    // if is the first set to closest\n//                    if (closestPlayerPositionComponent == null) {\n//                        closestPlayerPositionComponent = playerPositionComponent\n//                        closestPositionHypothenuse = hypothenuse\n//                        continue\n//                    }\n//                    if (hypothenuse < closestPositionHypothenuse!) {\n//                        closestPlayerPositionComponent = playerPositionComponent\n//                        closestPositionHypothenuse = hypothenuse\n//                    }\n//                }\n//            }\n//            if (closestPlayerPositionComponent == null) {\n//                console.log(\"no player to follow\")\n//                return\n//            }\n//\n//            let isDogInPlayerRadius = false\n//            let playerRadius = 200\n//            if (playerRadius >= closestPositionHypothenuse!) {\n//                isDogInPlayerRadius = true\n//            }\n//\n//            // follow player\n//            if (!isDogInPlayerRadius) {\n//                if (dogTargetLocationComponent != null) {\n//                    system.setProperty<Comps.TargetLocation, \"x\">\n//                        (foundDogComponents[1][0], \"x\", closestPlayerPositionComponent.x)\n//                    system.setProperty<Comps.TargetLocation, \"y\">\n//                        (foundDogComponents[1][0], \"y\", closestPlayerPositionComponent.y)\n//                } else {\n//                    let newTargetLocation = new Comps.TargetLocation(\n//                        new Utils.Vector2(\n//                            closestPlayerPositionComponent.x,\n//                            closestPlayerPositionComponent.y),\n//                        dogUid)\n//                    system.addComponent(newTargetLocation)\n//                }\n//            }\n//\n//            // random movement\n//            if (isDogInPlayerRadius && Utils.randomNumber(1000) == 10) {\n//                let targetLocation = new Utils.Vector2(0, 0)\n//                if (Utils.randomNumber(2) == 2) {\n//                    targetLocation.x = closestPlayerPositionComponent.x + Utils.randomNumber(playerRadius - 50)\n//                } else {\n//                    targetLocation.x = closestPlayerPositionComponent.x - Utils.randomNumber(playerRadius - 50)\n//                }\n//\n//                if (Utils.randomNumber(2) == 2) {\n//                    targetLocation.y = closestPlayerPositionComponent.y + Utils.randomNumber(playerRadius - 50)\n//                } else {\n//                    targetLocation.y = closestPlayerPositionComponent.y - Utils.randomNumber(playerRadius - 50)\n//                }\n//                if (dogTargetLocationComponent != null) {\n//                    system.setProperty<Comps.TargetLocation, \"x\">\n//                        (foundDogComponents[1][0], \"x\", targetLocation.x)\n//                    system.setProperty<Comps.TargetLocation, \"y\">\n//                        (foundDogComponents[1][0], \"y\", targetLocation.y)\n//                } else {\n//                    let newTargetLocationComponent = new Comps.TargetLocation(\n//                        new Utils.Vector2(\n//                            targetLocation.x,\n//                            targetLocation.y), dogUid)\n//                    system.addComponent(newTargetLocationComponent)\n//                }\n//            }\n//\n//            if (dogTargetLocationComponent == null) continue\n//\n//            let direction = new Utils.Vector2(0, 0)\n//\n//            if ((dogTargetLocationComponent.y - dogPositionComponent.y) > -40) direction.y += 1\n//            if ((dogTargetLocationComponent.y - dogPositionComponent.y) < 40) direction.y -= 1\n//            if ((dogTargetLocationComponent.x - dogPositionComponent.x) > -40) direction.x += 1\n//            if ((dogTargetLocationComponent.x - dogPositionComponent.x) < 40) direction.x -= 1\n//\n//            let forceComponent = foundDogComponents[2][0].component as Comps.Force\n//            let resultDogForce =\n//                new Utils.Vector2(\n//                    forceComponent.x + direction.x * acceleration,\n//                    forceComponent.y + direction.y * acceleration)\n//\n//            if (Math.abs(resultDogForce.x) > forceLimit) {\n//                if (resultDogForce.x < 0) {\n//                    resultDogForce.x = -forceLimit\n//                }\n//                else {\n//                    resultDogForce.x = +forceLimit\n//                }\n//            }\n//            if (Math.abs(resultDogForce.y) > forceLimit) {\n//                if (resultDogForce.y < 0) {\n//                    resultDogForce.y = -forceLimit\n//                }\n//                else {\n//                    resultDogForce.y = +forceLimit\n//                }\n//            }\n//            // check if arrived at target position\n//            if (\n//                Math.abs(dogPositionComponent.x - dogTargetLocationComponent.x) < 1 &&\n//                Math.abs(dogPositionComponent.y - dogTargetLocationComponent.y) < 1\n//            ) {\n//                system.removeComponent(foundDogComponents[1][0])\n//            }\n//\n//            if (resultDogForce.x != 0) {\n//                system.setProperty<Comps.Force, \"x\">(\n//                    foundDogComponents[2][0],\n//                    \"x\",\n//                    resultDogForce.x\n//                )\n//            }\n//            if (resultDogForce.y != 0) {\n//                system.setProperty<Comps.Force, \"y\">(\n//                    foundDogComponents[2][0],\n//                    \"y\",\n//                    resultDogForce.y\n//                )\n//            }\n//\n//        }\n//\n//\n//\n//\n//\n//\n//\n//\n//        //        if (isDogInPlayerRadius) {\n//        //            let foundEntityState = system.find(\n//        //                [\n//        //                    ECS.Get.All,\n//        //                    [\n//        //                        Comps.Components.EntityState,\n//        //                    ],\n//        //                    ECS.By.EntityId,\n//        //                    dogUid\n//        //                ]\n//        //            )\n//        //            if (foundEntityState[0].length == 0) {\n//        //                console.log(\"dog entityState not found\")\n//        //                return\n//        //            }\n//        //\n//        //            let entityStateComponent = foundEntityState[0][0].component as Comps.EntityState\n//        //\n//        //            // cannot change state to idle if wasnt runnning\n//        //            if (entityStateComponent.states.has(Comps.EntityStates.Run)) {\n//        //                system.removeElementFromMapProperty<Comps.EntityState, \"states\">(\n//        //                    foundEntityState[0][0],\n//        //                    \"states\",\n//        //                    Comps.EntityStates.Run\n//        //                )\n//        //\n//        //                if (entityStateComponent.states.has(Comps.EntityStates.Idle)) return\n//        //\n//        //                system.addElementToMapProperty<Comps.EntityState, \"states\">(\n//        //                    foundEntityState[0][0],\n//        //                    \"states\",\n//        //                    new Utils.MapEntry(Comps.EntityStates.Idle, null)\n//        //                )\n//        //            }\n//        //            return\n//        //\n//        //\n//        //        }\n//\n//        // move to desired target position\n//\n//        //        let foundEntityState = system.find(\n//        //            [\n//        //                ECS.Get.All,\n//        //                [\n//        //                    Comps.Components.EntityState,\n//        //                ],\n//        //                ECS.By.EntityId,\n//        //                dogUid\n//        //            ]\n//        //        )\n//        //        if (foundEntityState[0].length == 0) {\n//        //            console.log(\"dog entityState not found\")\n//        //            return\n//        //        }\n//\n//        //  let entityStateComponent = foundEntityState[0][0].component as Comps.EntityState\n//\n//        //  if (!entityStateComponent.states.has(Comps.EntityStates.Run)) {\n//        //      system.addElementToMapProperty<Comps.EntityState, \"states\">(\n//        //          foundEntityState[0][0],\n//        //          \"states\",\n//        //          new Utils.MapEntry(Comps.EntityStates.Run, null)\n//        //      )\n//        //  }\n//        //  if (entityStateComponent.states.has(Comps.EntityStates.Idle)) {\n//        //      system.removeElementFromMapProperty<Comps.EntityState, \"states\">(\n//        //          foundEntityState[0][0],\n//        //          \"states\",\n//        //          Comps.EntityStates.Idle\n//        //      )\n//        //  }\n//    }\n//}\n//\n//// camera\n//export class MoveCameraWithPlayer implements ECS.Command {\n//    // move computed element's position to emulate camera movement\n//    readonly type: Commands\n//    constructor() {\n//        this.type = Commands.MoveCameraWithPlayer\n//    }\n//\n//    run(system: ECS.System) {\n//        let foundComponents = system.find(\n//            [ECS.Get.All, [Comps.Components.ComputedElement], ECS.By.Any, null])\n//\n//        let playerPosition = new Utils.Vector2(0, 0)\n//        for (let cC of system.componentDiffs.changedComponents) {\n//            if (cC.component.type != Comps.Components.Position) continue\n//            let positionComponent = cC.component as Comps.Position\n//            let foundComponents = system.find(\n//                [ECS.Get.All, [Comps.Components.EntityType], ECS.By.Any, null])\n//\n//            let entityTypeComponent = foundComponents[0][0].component as Comps.EntityType\n//            if (entityTypeComponent.entityType == Comps.EntityTypes.Player) {\n//\n//            }\n//        }\n//\n//        //        for (let fC of foundComponents[0]) {\n//        //            let computedElementComponent = fC.component as Comps.ComputedElement\n//        //\n//        //            if (computedElementComponent.entityUid ==\n//        //                positionComponent.entityUid\n//        //            ) {\n//        //                system.setProperty<Comps.ComputedElement, \"translateY\">(\n//        //                    fC, \"translateY\", positionComponent.y - 10)\n//        //                system.setProperty<Comps.ComputedElement, \"isTranslateYChanged\">(\n//        //                    fC, \"isTranslateYChanged\", true)\n//        //\n//        //                system.setProperty<Comps.ComputedElement, \"translateX\">(\n//        //                    fC, \"translateX\", positionComponent.x - 10)\n//        //                system.setProperty<Comps.ComputedElement, \"isTranslateXChanged\">(\n//        //                    fC, \"isTranslateXChanged\", true)\n//        //\n//        //                system.setProperty<Comps.ComputedElement, \"isChanged\">(\n//        //                    fC, \"isChanged\", true)\n//        //                break;\n//        //            }\n//        //        }\n//\n//\n//\n//\n//    }\n//}\n//\n//// render\nclass SendGraphicComponentsToRender {\n    constructor() {\n        this.commandType = CommandTypes.SendGraphicComponentsToRender;\n    }\n    run(system, resources) {\n        let graphicChanges = new _serialization__WEBPACK_IMPORTED_MODULE_3__.GraphicChanges();\n        // for changed\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Camera]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Light]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Position]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityState]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Rotation]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.BoxShape]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.changedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.ShapeColor]);\n        // for added\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityType]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Camera]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Light]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Position]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityState]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Rotation]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.BoxShape]);\n        graphicChanges.changedComponents.push(...resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.ShapeColor]);\n        // check for removed entities\n        for (let rC of resources.componentChanges.removedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityType]) {\n            graphicChanges.removedEntitiesUid.push(rC.entityUid);\n        }\n        // check for added entities\n        for (let rC of resources.componentChanges.addedComponents[_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.EntityType]) {\n            graphicChanges.addedEntitiesUid.push(rC.entityUid);\n        }\n        if (graphicChanges.changedComponents.length == 0 &&\n            graphicChanges.removedEntitiesUid.length == 0) {\n            return;\n        }\n        postMessage(new _serialization__WEBPACK_IMPORTED_MODULE_3__.Message(_serialization__WEBPACK_IMPORTED_MODULE_3__.Messages.GraphicChanges, graphicChanges));\n    }\n}\n//\n//// entity elements\n//export class SetEntityElementsPositionAndDisplayElement implements ECS.Command {\n//    readonly type: Commands\n//    constructor() {\n//        this.type = Commands.SetEntityElementsPositionAndDisplayElement\n//    }\n//\n//    run(system: ECS.System) {\n//\n//        let foundComponents =\n//            system.find(\n//                [\n//                    ECS.Get.All,\n//                    [\n//                        Comps.Components.ComputedElement,\n//                    ],\n//                    ECS.By.Any,\n//                    null\n//                ])\n//        // position\n//        for (let cC of system.componentDiffs.changedComponents) {\n//            if (cC.component.type != Comps.Components.Position) continue\n//            let position = cC.component as Comps.Position\n//\n//            for (let fC of foundComponents[0]) {\n//                let computedElement = fC.component as Comps.GraphicProperties\n//\n//                if (computedElement.entityUid ==\n//                    position.entityUid &&\n//                    computedElement.elementType ==\n//                    Comps.ElementTypes.Entity\n//                ) {\n//                    system.setProperty<Comps.GraphicProperties, \"isChanged\">(\n//                        fC, \"isChanged\", true)\n//\n//                    system.setProperty<Comps.GraphicProperties, \"translateY\">(\n//                        fC, \"translateY\", position.y)\n//                    system.setProperty<Comps.GraphicProperties, \"isTranslateYChanged\">(\n//                        fC, \"isTranslateYChanged\", true)\n//\n//                    system.setProperty<Comps.GraphicProperties, \"translateX\">(\n//                        fC, \"translateX\", position.x)\n//                    system.setProperty<Comps.GraphicProperties, \"isTranslateXChanged\">(\n//                        fC, \"isTranslateXChanged\", true)\n//\n//                    system.setProperty<Comps.GraphicProperties, \"zIndex\">(\n//                        fC, \"zIndex\", position.y)\n//                    system.setProperty<Comps.GraphicProperties, \"isZIndexChanged\">(\n//                        fC, \"isZIndexChanged\", true)\n//                    break;\n//                }\n//            }\n//        }\n//\n//        // displayElement\n//        for (let cC of system.componentDiffs.changedComponents) {\n//            if (cC.component.type != Comps.Components.Animation) continue\n//            let animationComponent = cC.component as Comps.Animation\n//\n//            for (let fC of foundComponents[0]) {\n//                let computedElementComponent = fC.component as Comps.GraphicProperties\n//\n//                if (computedElementComponent.entityUid ==\n//                    animationComponent.entityUid &&\n//                    computedElementComponent.elementType ==\n//                    Comps.ElementTypes.Entity\n//                ) {\n//                    system.setProperty<Comps.GraphicProperties, \"isChanged\">(\n//                        fC, \"isChanged\", true)\n//                    system.setProperty<Comps.GraphicProperties, \"displayElement\">(\n//                        fC, \"displayElement\", animationComponent.currentDisplayElement)\n//                    system.setProperty<Comps.GraphicProperties, \"isDisplayElementChanged\">(\n//                        fC, \"isDisplayElementChanged\", true)\n//                    break;\n//                }\n//            }\n//        }\n//    }\n//}\n//\n//// animation\n//export class CreateAnimationTimers implements ECS.Command {\n//    readonly type: Commands\n//    constructor() {\n//        this.type = Commands.CreateAnimationTimers\n//    }\n//\n//    run(system: ECS.System) {\n//\n//        let foundComponents = system.find([\n//            ECS.Get.All,\n//            [\n//                Comps.Components.Animation,\n//            ],\n//            ECS.By.Any,\n//            null\n//        ])\n//        if (foundComponents[0].length == 0) console.log(\"there are not animation components\")\n//        for (let fC of foundComponents[0]) {\n//            let foundComponents = system.find([\n//                ECS.Get.All,\n//                [\n//                    Comps.Components.EntityState,\n//                ],\n//                ECS.By.EntityId,\n//                fC.component.entityUid\n//            ])\n//            if (foundComponents[0].length == 0) {\n//                console.log(\"entityState component missing\")\n//                continue;\n//            }\n//\n//            let entityState = foundComponents[0][0].component as Comps.EntityState\n//            let animation = fC.component as Comps.Animation\n//\n//            let currentStateAnimation: Anims.Animation | null = null;\n//            for (let a of animation.animations) {\n//                if (entityState.states.has(a.executeOn)) {\n//                    currentStateAnimation = a\n//                }\n//            }\n//            if (currentStateAnimation == null) continue\n//\n//            let timer = new Comps.Timer(\n//                currentStateAnimation.frames[currentStateAnimation.frames.length - 1].frameTime,\n//                Comps.TimerTypes.Animation,\n//                entityState.entityUid\n//            )\n//            system.addComponent(timer)\n//            system.setProperty<Comps.Animation, \"currentDisplayElement\">(\n//                foundComponents[0][0], \"currentDisplayElement\", currentStateAnimation.frames[0].frameDisplay\n//            )\n//\n//        }\n//        system.removeCommand(this.type)\n//    }\n//}\n//export class UpdateAnimationTimerNumber implements ECS.Command {\n//    // Creates and deletes animation timers\n//    readonly type: Commands\n//    constructor() {\n//        this.type = Commands.UpdateAnimationTimerNumber\n//    }\n//    run(system: ECS.System) {\n//        // on new graphic entity\n//        for (let aC of system.componentDiffs.addedComponents) {\n//\n//            // get added animation components\n//            if (aC.component.type != Comps.Components.Animation) continue\n//\n//\n//            // get entityState Components\n//            let foundComponents = system.find([\n//                ECS.Get.All,\n//                [\n//                    Comps.Components.EntityState,\n//                ],\n//                ECS.By.EntityId,\n//                aC.component.entityUid\n//            ])\n//            if (foundComponents[0].length == 0) {\n//                console.log(\"entityState component missing\")\n//                continue;\n//            }\n//\n//            let entityStateComponent = foundComponents[0][0].component as Comps.EntityState\n//            let animationAddedComponent = aC.component as Comps.Animation\n//\n//            let currentStateAnimation: Anims.Animation | null = null\n//            let isFirstTime = true\n//            for (let a of animationAddedComponent.animations) {\n//                if (entityStateComponent.states.has(a.executeOn)) {\n//                    if (isFirstTime) {\n//                        currentStateAnimation = a\n//                        isFirstTime = false\n//                        continue;\n//                    }\n//                    if (a.priority > currentStateAnimation!.priority) {\n//                        currentStateAnimation = a\n//                    }\n//                }\n//            }\n//            if (currentStateAnimation == null) continue\n//\n//            let timer = new Comps.Timer(\n//                currentStateAnimation.frames[currentStateAnimation.frames.length - 1].frameTime,\n//                Comps.TimerTypes.Animation,\n//                entityStateComponent.entityUid\n//            )\n//            system.addComponent(timer)\n//            system.setProperty<Comps.Animation, \"currentDisplayElement\">(\n//                foundComponents[0][0], \"currentDisplayElement\", currentStateAnimation.frames[0].frameDisplay!\n//            )\n//            console.log(\"added timer\")\n//        }\n//        // on graphic entity removed\n//        for (let cC of system.componentDiffs.removedComponents) {\n//            if (cC.component.type != Comps.Components.Animation) continue\n//\n//            let foundComponents = system.find([\n//                ECS.Get.All,\n//                [\n//                    Comps.Components.Timer,\n//                ],\n//                ECS.By.EntityId,\n//                cC.component.entityUid\n//            ])\n//            if (foundComponents[0].length == 0) {\n//                console.log(\"timer component missing\")\n//                continue;\n//            }\n//            let timer = foundComponents[0][0].component as Comps.Timer\n//            if (timer.timerType == Comps.TimerTypes.Animation) {\n//                system.removeComponent(foundComponents[0][0])\n//                console.log(\"removed timer\")\n//            }\n//        }\n//    }\n//}\n//export class PlayAnimations implements ECS.Command {\n//    readonly type: Commands\n//    constructor() {\n//        this.type = Commands.PlayAnimations\n//    }\n//\n//    run(system: ECS.System) {\n//        let updatedTimersUid = []\n//\n//        // change animation for entity state change\n//        for (let cC of system.componentDiffs.changedComponents) {\n//            if (cC.component.type != Comps.Components.EntityState) continue\n//\n//            let foundComponents = system.find([\n//                ECS.Get.All,\n//                [Comps.Components.Animation, Comps.Components.Timer],\n//                ECS.By.EntityId,\n//                cC.component.entityUid])\n//            if (foundComponents[0].length == 0) {\n//                console.log(\"animation component missing\")\n//                break;\n//            }\n//\n//            let timer: ECS.ComponentAndIndex | null = null\n//            for (let t of foundComponents[1]) {\n//                if ((t.component as Comps.Timer).timerType == Comps.TimerTypes.Animation) {\n//                    timer = t\n//                }\n//            }\n//            if (timer == null) continue\n//\n//            let animationComponent = foundComponents[0][0].component as Comps.Animation\n//            let entityStateComponent = cC.component as Comps.EntityState\n//\n//            let currentStateAnimation: Anims.Animation | null = null\n//            let isFirstTime = true\n//            for (let a of animationComponent.animations) {\n//                if (entityStateComponent.states.has(a.executeOn)) {\n//                    if (isFirstTime) {\n//                        currentStateAnimation = a\n//                        isFirstTime = false\n//                        continue;\n//                    }\n//                    if (a.priority > currentStateAnimation!.priority) {\n//                        currentStateAnimation = a\n//                    }\n//                }\n//            }\n//            if (currentStateAnimation == null) continue\n//\n//            updatedTimersUid.push(timer.component.componentUid)\n//            system.setProperty<Comps.Timer, \"originalTime\">(\n//                timer,\n//                \"originalTime\",\n//                currentStateAnimation.frames[currentStateAnimation.frames.length - 1].frameTime\n//            )\n//            system.setProperty<Comps.Timer, \"isRestart\">(\n//                timer, \"isRestart\", true)\n//            //            system.setProperty<Comps.Animation, \"currentDisplayElement\">(\n//            //                foundComponents[0][0], \"currentDisplayElement\", currentStateAnimation.frames[0]!)\n//        }\n//\n//        // play next frame\n//\n//        // get animation timers\n//        let foundTimers = system.find(\n//            [ECS.Get.All, [Comps.Components.Timer], ECS.By.Any, null])\n//        if (foundTimers[0].length == 0) {\n//            console.log(\"no timers\")\n//            return;\n//        }\n//        for (let fC of foundTimers[0]) {\n//            // check if is an updated timer\n//            let isFound = false\n//            for (let uT of updatedTimersUid) {\n//                if (fC.component.componentUid == uT) {\n//                    isFound = true\n//                    break;\n//                }\n//            }\n//            if (isFound) continue\n//            // check that are animation timers\n//            let timerComponent = fC.component as Comps.Timer\n//            if (timerComponent.timerType != Comps.TimerTypes.Animation) continue\n//\n//            // if timer is finised restart it \n//            if (timerComponent.isFinished) {\n//                system.setProperty<Comps.Timer, \"isRestart\">(fC, \"isRestart\", true)\n//                continue\n//            }\n//\n//            // get animations and entity states\n//            let foundComponents = system.find(\n//                [ECS.Get.One,\n//                [Comps.Components.Animation, Comps.Components.EntityState],\n//                ECS.By.EntityId,\n//                timerComponent.entityUid])\n//            if (foundComponents[0].length == 0) {\n//                console.log(\"animation component missing\")\n//                break;\n//            }\n//            if (foundComponents[1].length == 0) {\n//                console.log(\"entityState component missing\")\n//                break;\n//            }\n//            let animationComponent = foundComponents[0][0].component as Comps.Animation\n//            let entityStateComponent = foundComponents[1][0].component as Comps.EntityState\n//\n//            // get playing animation based on EntityState\n//            let currentStateAnimation: Anims.Animation | null = null\n//            let isFirstTime = true\n//            for (let a of animationComponent.animations) {\n//                if (entityStateComponent.states.has(a.executeOn)) {\n//                    if (isFirstTime) {\n//                        currentStateAnimation = a\n//                        isFirstTime = false\n//                        continue;\n//                    }\n//                    if (a.priority > currentStateAnimation!.priority) {\n//                        currentStateAnimation = a\n//                    }\n//                }\n//            }\n//            if (currentStateAnimation == null) continue\n//\n//\n//            // get current animation frame\n//            let elapsedTime = timerComponent.originalTime - timerComponent.timeLeft\n//            let currentFrameIndex = 0\n//            for (let [fI, f] of currentStateAnimation.frames.entries()) {\n//                if (f.frameTime > elapsedTime && fI != 0) {\n//                    currentFrameIndex = fI - 1\n//                    break;\n//                }\n//                if (f.isEndFrame) currentFrameIndex = fI - 1\n//            }\n//            if (currentStateAnimation.frames[currentFrameIndex].frameDisplay ==\n//                animationComponent.currentDisplayElement)\n//                continue\n//            // // if already is in this frame\n//            //            if (currentStateAnimation.frames[currentFrameIndex] ==\n//            //                animation.currentDisplayElement)\n//            //                continue\n//            //            console.log(elapsedTime,\n//            //                currentFrameIndex\n//            //                //                currentStateAnimation\n//            //                //                    .frames[currentFrameIndex]!\n//            //                //                    .charCodeAt(0)\n//            //                //                    .toString()\n//            //                //                    .split(\"\")\n//            //                //                    .map((e, i) => { if (i > 2) return e })\n//            //                //                    .join(\"\")\n//            //            )\n//\n//            //currentFrameIndex\n//            //                currentStateAnimation\n//            //                    .frames[currentFrameIndex]!\n//            //                    .charCodeAt(0)\n//            //                    .toString()\n//            //                    .split(\"\")\n//            //                    .map((e, i) => { if (i > 2) return e })\n//            //                    .join(\"\")\n//\n//            system.setProperty<Comps.Animation, \"currentDisplayElement\">(\n//                foundComponents[0][0],\n//                \"currentDisplayElement\",\n//                currentStateAnimation.frames[currentFrameIndex].frameDisplay\n//            )\n//        }\n//    }\n//}\n//\n//// timer\n//export class TickTimer implements ECS.Command {\n//    readonly type: Commands\n//    constructor() {\n//        this.type = Commands.TickTimer\n//    }\n//\n//    run(system: ECS.System) {\n//        let delta = system.delta()\n//        if (delta == null) return\n//\n//        let foundComponents = system.find(\n//            [ECS.Get.All, [Comps.Components.Timer], ECS.By.Any, null])\n//\n//        for (let fC of foundComponents[0]) {\n//            let timer = fC.component as Comps.Timer\n//\n//            if (timer.isRestart) {\n//                system.setProperty<Comps.Timer, \"timeLeft\">(fC, \"timeLeft\", timer.originalTime)\n//                system.setProperty<Comps.Timer, \"isFinished\">(fC, \"isFinished\", false)\n//                system.setProperty<Comps.Timer, \"isRestart\">(fC, \"isRestart\", false)\n//                continue\n//            }\n//\n//            if (timer.isFinished) continue\n//\n//            let newTimeLeft = timer.timeLeft - delta\n//\n//            system.setProperty<Comps.Timer, \"timeLeft\">(fC, \"timeLeft\", newTimeLeft)\n//            if (newTimeLeft <= 0) {\n//                system.setProperty<Comps.Timer, \"isFinished\">(fC, \"isFinished\", true)\n//            }\n//        }\n//    }\n//}\n//\n//// devbox\n//export class WatchDevBox implements ECS.Command {\n//    readonly type: Commands\n//    constructor() {\n//        this.type = Commands.WatchDevBox\n//    }\n//\n//    run(system: ECS.System) {\n//        // Add commands\n//        if (system.devBox.isEnableFreeCamera && !system.getState(\"isEnableFreeCamera\")) {\n//            system.setState(\"isEnableFreeCamera\", true)\n//        }\n//\n//        if (system.devBox.isEnablePhysics && !system.getState(\"isEnablePhysics\")) {\n//            system.setState(\"isEnablePhysics\", true)\n//        }\n//\n//        if (system.devBox.isSetNight && !system.getState(\"isSetNight\")) {\n//            system.setState(\"isSetNight\", true)\n//        }\n//        if (system.devBox.isShadowsEnabled && !system.getState(\"isEnableShadows\")) {\n//            system.addCommand(Commands.CreateShadows)\n//            system.setState(\"isEnableShadows\", true)\n//        }\n//\n//        // Remove commands\n//        if (!system.devBox.isEnableFreeCamera && system.getState(\"isEnableFreeCamera\")) {\n//            system.setState(\"isEnableFreeCamera\", false)\n//        }\n//\n//        if (!system.devBox.isEnablePhysics && system.getState(\"isEnablePhysics\")) {\n//            system.setState(\"isEnablePhysics\", false)\n//        }\n//\n//        if (!system.devBox.isSetNight && system.getState(\"isSetNight\")) {\n//            system.setState(\"isSetNight\", false)\n//        }\n//        if (!system.devBox.isShadowsEnabled && system.getState(\"isEnableShadows\")) {\n//            system.removeCommand(Commands.UpdateShadowNumber)\n//            system.removeCommand(Commands.UpdateShadowProperties)\n//            system.addCommand(Commands.RemoveShadows)\n//\n//            system.setState(\"isEnableShadows\", false)\n//        }\n//\n//    }\n//}\n//\n//// physics\nclass CreateGravity {\n    constructor() {\n        this.commandType = CommandTypes.CreateGravity;\n    }\n    run(system, resources) {\n        let foundForceComponents = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.All, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Force], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.Any, null]);\n        if (foundForceComponents[0].length == 0) {\n            console.log(\"no force components\");\n            return;\n        }\n        for (let fFC of foundForceComponents[0]) {\n            let forceComponent = fFC;\n            let gravityAcceleration = 0.003;\n            forceComponent.y -= gravityAcceleration;\n        }\n    }\n}\nclass ApplyForce {\n    constructor() {\n        this.commandType = CommandTypes.ApplyForce;\n    }\n    run(system, resources) {\n        let delta = resources.delta.get();\n        if (delta == null)\n            return;\n        let foundForceComponents = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.All, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Force], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.Any, null]);\n        if (foundForceComponents[0].length == 0) {\n            console.log(\"no force components\");\n            return;\n        }\n        for (let fFC of foundForceComponents[0]) {\n            let forceComponent = fFC;\n            if (forceComponent.x == 0 && forceComponent.y == 0 && forceComponent.z == 0)\n                continue;\n            let foundPositionComponents = system.find([_ecs__WEBPACK_IMPORTED_MODULE_0__.Get.One, [_components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Position, _components__WEBPACK_IMPORTED_MODULE_2__.ComponentTypes.Mass], _ecs__WEBPACK_IMPORTED_MODULE_0__.By.EntityId, fFC.entityUid]);\n            if (foundPositionComponents[0].length == 0 || foundPositionComponents[1].length == 0) {\n                console.log(\"no position or mass component\");\n                return;\n            }\n            let positionComponent = foundPositionComponents[0][0];\n            let massComponent = foundPositionComponents[1][0];\n            let velocity = new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);\n            let airDrag = 0.001;\n            let resultForce = new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 0);\n            if (forceComponent.x < 0) {\n                resultForce.x = forceComponent.x + airDrag;\n                if (resultForce.x > 0) {\n                    resultForce.x = 0;\n                }\n            }\n            if (forceComponent.x > 0) {\n                resultForce.x = forceComponent.x - airDrag;\n                if (resultForce.x < 0) {\n                    resultForce.x = 0;\n                }\n            }\n            if (forceComponent.y < 0) {\n                resultForce.y = forceComponent.y + airDrag;\n                if (resultForce.y > 0) {\n                    resultForce.y = 0;\n                }\n            }\n            if (forceComponent.y > 0) {\n                resultForce.y = forceComponent.y - airDrag;\n                if (resultForce.y < 0) {\n                    resultForce.y = 0;\n                }\n            }\n            if (forceComponent.z < 0) {\n                resultForce.z = forceComponent.z + airDrag;\n                if (resultForce.z > 0) {\n                    resultForce.z = 0;\n                }\n            }\n            if (forceComponent.z > 0) {\n                resultForce.z = forceComponent.z - airDrag;\n                if (resultForce.z < 0) {\n                    resultForce.z = 0;\n                }\n            }\n            velocity.x = forceComponent.x / massComponent.mass;\n            velocity.y = forceComponent.y / massComponent.mass;\n            velocity.z = forceComponent.z / massComponent.mass;\n            if (velocity.x != 0) {\n                positionComponent.x = positionComponent.x + velocity.x * delta;\n                forceComponent.x = resultForce.x;\n            }\n            if (velocity.y != 0) {\n                positionComponent.y = positionComponent.y + velocity.y * delta;\n                forceComponent.y = resultForce.y;\n            }\n            if (velocity.z != 0) {\n                positionComponent.z = positionComponent.z + velocity.z * delta;\n                forceComponent.z = resultForce.z;\n            }\n        }\n    }\n}\nclass Collide {\n    constructor() {\n        this.commandType = CommandTypes.Collide;\n    }\n    run(system, resources) {\n        //    for (let cFC of resources.componentChanges.changedComponents[Comps.ComponentTypes.Force]) {\n        //        let foundComponents1 = system.find(\n        //            [ECS.Get.One, [Comps.ComponentTypes.Position, Comps.ComponentTypes.BoxShape, Comps.ComponentTypes.Mass], ECS.By.EntityId, cFC.entityUid])\n        //        if (\n        //            foundComponents1[0].length == 0 ||\n        //            foundComponents1[1].length == 0 ||\n        //            foundComponents1[2].length == 0\n        //        ) {\n        //            console.log(\"no giver components found\")\n        //            continue\n        //        }\n        //        let forceComponent1 = cFC as Comps.Force\n        //        let positionComponent1 = foundComponents1[0][0] as Comps.Position\n        //        let shapeComponent1 = foundComponents1[1][0] as Comps.Shape\n        //        let massComponent1 = foundComponents1[2][0] as Comps.Mass\n        //        let foundTakerSizeComponents = system.find(\n        //            [ECS.Get.All, [Comps.ComponentTypes.BoxShape], ECS.By.Any, null])\n        //        for (let fSC of foundTakerSizeComponents[0]) {\n        //            if (fSC.entityUid == cFC.entityUid) continue\n        //            let foundTakerComponents = system.find(\n        //                [ECS.Get.One, [Comps.ComponentTypes.Position, Comps.ComponentTypes.Force, Comps.ComponentTypes.Mass], ECS.By.EntityId, fSC.entityUid])\n        //            if (foundTakerComponents[0].length == 0) {\n        //                console.log(\"no position found\")\n        //                continue\n        //            }\n        //            if (foundTakerComponents[1].length == 0) {\n        //                continue\n        //            }\n        //            let shapeComponent2 = fSC as Comps.Shape\n        //            let positionComponent2 = foundTakerComponents[0][0] as Comps.Position\n        //            let forceComponent2 = foundTakerComponents[1][0] as Comps.Force\n        //            let massComponent2 = foundTakerComponents[2][0] as Comps.Mass\n        //            let vertices1 = Fn.getVertices(shapeComponent1, positionComponent1)\n        //            let vertices2 = Fn.getVertices(shapeComponent2, positionComponent2)\n        //            let axes1: Utils.Vector3[] = []\n        //            switch (shapeComponent1.shapeType) {\n        //                case Comps.ShapeTypes.Box: {\n        //                    let xAxis = new Utils.Vector3(0, 0, 0)\n        //                    Utils.crossProduct(vertices1[])\n        //                } break;\n        //            }\n        //        }\n        //    }\n    }\n}\n\n\n//# sourceURL=webpack://strworld/./src/ecs/commands.ts?");

/***/ }),

/***/ "./src/ecs/components.ts":
/*!*******************************!*\
  !*** ./src/ecs/components.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Camera: () => (/* binding */ Camera),\n/* harmony export */   ComponentTypes: () => (/* binding */ ComponentTypes),\n/* harmony export */   EntityState: () => (/* binding */ EntityState),\n/* harmony export */   EntityStates: () => (/* binding */ EntityStates),\n/* harmony export */   EntityType: () => (/* binding */ EntityType),\n/* harmony export */   EntityTypes: () => (/* binding */ EntityTypes),\n/* harmony export */   Force: () => (/* binding */ Force),\n/* harmony export */   HardCodedId: () => (/* binding */ HardCodedId),\n/* harmony export */   Health: () => (/* binding */ Health),\n/* harmony export */   Light: () => (/* binding */ Light),\n/* harmony export */   LightTypes: () => (/* binding */ LightTypes),\n/* harmony export */   Mass: () => (/* binding */ Mass),\n/* harmony export */   NUMBER_OF_COMPONENTS: () => (/* binding */ NUMBER_OF_COMPONENTS),\n/* harmony export */   Position: () => (/* binding */ Position),\n/* harmony export */   Rotation: () => (/* binding */ Rotation),\n/* harmony export */   Shape: () => (/* binding */ Shape),\n/* harmony export */   ShapeColor: () => (/* binding */ ShapeColor),\n/* harmony export */   ShapeTypes: () => (/* binding */ ShapeTypes),\n/* harmony export */   TargetPosition: () => (/* binding */ TargetPosition),\n/* harmony export */   Timer: () => (/* binding */ Timer),\n/* harmony export */   TimerTypes: () => (/* binding */ TimerTypes)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ \"./src/utils.ts\");\n\nvar ComponentTypes;\n(function (ComponentTypes) {\n    ComponentTypes[ComponentTypes[\"Health\"] = 0] = \"Health\";\n    ComponentTypes[ComponentTypes[\"Camera\"] = 1] = \"Camera\";\n    ComponentTypes[ComponentTypes[\"Light\"] = 2] = \"Light\";\n    ComponentTypes[ComponentTypes[\"Rotation\"] = 3] = \"Rotation\";\n    ComponentTypes[ComponentTypes[\"EntityState\"] = 4] = \"EntityState\";\n    ComponentTypes[ComponentTypes[\"Name\"] = 5] = \"Name\";\n    ComponentTypes[ComponentTypes[\"EntityType\"] = 6] = \"EntityType\";\n    ComponentTypes[ComponentTypes[\"Position\"] = 7] = \"Position\";\n    ComponentTypes[ComponentTypes[\"TargetLocation\"] = 8] = \"TargetLocation\";\n    ComponentTypes[ComponentTypes[\"Timer\"] = 9] = \"Timer\";\n    ComponentTypes[ComponentTypes[\"BoxShape\"] = 10] = \"BoxShape\";\n    ComponentTypes[ComponentTypes[\"Mass\"] = 11] = \"Mass\";\n    ComponentTypes[ComponentTypes[\"ShapeColor\"] = 12] = \"ShapeColor\";\n    ComponentTypes[ComponentTypes[\"Force\"] = 13] = \"Force\";\n    ComponentTypes[ComponentTypes[\"HardCodedId\"] = 14] = \"HardCodedId\";\n})(ComponentTypes || (ComponentTypes = {}));\nconst NUMBER_OF_COMPONENTS = (() => {\n    let n = 0;\n    for (let i = 0; i < Object.keys(ComponentTypes).length / 2; i++) {\n        n++;\n    }\n    return n;\n})();\nvar TimerTypes;\n(function (TimerTypes) {\n    TimerTypes[TimerTypes[\"Animation\"] = 0] = \"Animation\";\n})(TimerTypes || (TimerTypes = {}));\nvar EntityTypes;\n(function (EntityTypes) {\n    EntityTypes[EntityTypes[\"Stickman\"] = 0] = \"Stickman\";\n    EntityTypes[EntityTypes[\"Grass\"] = 1] = \"Grass\";\n    EntityTypes[EntityTypes[\"Dog\"] = 2] = \"Dog\";\n    EntityTypes[EntityTypes[\"Camera\"] = 3] = \"Camera\";\n    EntityTypes[EntityTypes[\"Light\"] = 4] = \"Light\";\n    EntityTypes[EntityTypes[\"GeometricShape\"] = 5] = \"GeometricShape\";\n})(EntityTypes || (EntityTypes = {}));\nvar EntityStates;\n(function (EntityStates) {\n    EntityStates[EntityStates[\"Idle\"] = 0] = \"Idle\";\n    EntityStates[EntityStates[\"Run\"] = 1] = \"Run\";\n    EntityStates[EntityStates[\"Follow\"] = 2] = \"Follow\";\n    EntityStates[EntityStates[\"Attack\"] = 3] = \"Attack\";\n    EntityStates[EntityStates[\"Chase\"] = 4] = \"Chase\";\n})(EntityStates || (EntityStates = {}));\nvar LightTypes;\n(function (LightTypes) {\n    LightTypes[LightTypes[\"AmbientLight\"] = 0] = \"AmbientLight\";\n    LightTypes[LightTypes[\"PointLight\"] = 1] = \"PointLight\";\n    LightTypes[LightTypes[\"DirectionalLight\"] = 2] = \"DirectionalLight\";\n    LightTypes[LightTypes[\"SpotLight\"] = 3] = \"SpotLight\";\n})(LightTypes || (LightTypes = {}));\nvar ShapeTypes;\n(function (ShapeTypes) {\n    ShapeTypes[ShapeTypes[\"Box\"] = 0] = \"Box\";\n})(ShapeTypes || (ShapeTypes = {}));\nclass HardCodedId {\n    constructor(newId, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.HardCodedId;\n        this.id = newId;\n    }\n}\nclass ShapeColor {\n    constructor(newColor, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.ShapeColor;\n        this.color = newColor;\n    }\n}\nclass Shape {\n    constructor(newSize, newShapeType, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.BoxShape;\n        this.size = newSize;\n        this.shapeType = newShapeType;\n    }\n}\nclass Light {\n    constructor(newLightType, newIntensity, newColor, newDistance, newDecay, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Light;\n        this.lightType = newLightType;\n        this.intensity = newIntensity;\n        this.color = newColor;\n        this.distance = newDistance;\n        this.decay = newDecay;\n    }\n}\nclass Camera {\n    constructor(newFov, newNear, newFar, newAspect, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Camera;\n        this.fov = newFov;\n        this.near = newNear;\n        this.far = newFar;\n        this.aspect = newAspect;\n    }\n}\nclass TargetPosition {\n    constructor(newLocation, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.TargetLocation;\n        this.x = newLocation.x;\n        this.y = newLocation.y;\n        this.z = newLocation.z;\n    }\n}\nclass EntityType {\n    constructor(newEntityType, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.EntityType;\n        this.entityType = newEntityType;\n    }\n}\nclass EntityState {\n    constructor(newState, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.EntityState;\n        this.states = newState;\n    }\n}\nclass Position {\n    constructor(newPosition, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Position;\n        this.x = newPosition.x;\n        this.y = newPosition.y;\n        this.z = newPosition.z;\n    }\n}\nclass Health {\n    constructor(newHealth, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Health;\n        this.health = newHealth;\n    }\n}\nclass Force {\n    constructor(newForce, newEntityUid) {\n        this.x = newForce.x;\n        this.y = newForce.y;\n        this.z = newForce.z;\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Force;\n    }\n}\nclass Mass {\n    constructor(newMass, newEntityUid) {\n        this.mass = newMass;\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Mass;\n    }\n}\nclass Rotation {\n    constructor(newRotation, newEntityUid) {\n        this.x = newRotation.x;\n        this.y = newRotation.y;\n        this.z = newRotation.z;\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Rotation;\n    }\n}\nclass Timer {\n    constructor(newTimeLeft, newTimerType, newEntityUid) {\n        this.componentUid = _utils__WEBPACK_IMPORTED_MODULE_0__.newUid();\n        this.entityUid = newEntityUid;\n        this.componentType = ComponentTypes.Timer;\n        this.isFinished = false;\n        this.isRestart = false;\n        this.timeLeft = newTimeLeft;\n        this.originalTime = newTimeLeft;\n        this.timerType = newTimerType;\n    }\n}\n\n\n//# sourceURL=webpack://strworld/./src/ecs/components.ts?");

/***/ }),

/***/ "./src/ecs/ecs.ts":
/*!************************!*\
  !*** ./src/ecs/ecs.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   By: () => (/* binding */ By),\n/* harmony export */   CurrentExecutingCommand: () => (/* binding */ CurrentExecutingCommand),\n/* harmony export */   EntityComponents: () => (/* binding */ EntityComponents),\n/* harmony export */   Get: () => (/* binding */ Get),\n/* harmony export */   System: () => (/* binding */ System)\n/* harmony export */ });\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components */ \"./src/ecs/components.ts\");\n/* harmony import */ var _commands__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commands */ \"./src/ecs/commands.ts\");\n\n\nvar Get;\n(function (Get) {\n    Get[Get[\"One\"] = 0] = \"One\";\n    Get[Get[\"All\"] = 1] = \"All\";\n})(Get || (Get = {}));\nvar By;\n(function (By) {\n    By[By[\"EntityId\"] = 0] = \"EntityId\";\n    By[By[\"EntityType\"] = 1] = \"EntityType\";\n    By[By[\"ComponentId\"] = 2] = \"ComponentId\";\n    By[By[\"Any\"] = 3] = \"Any\";\n})(By || (By = {}));\nclass EntityComponents {\n    constructor(newEntityUid) {\n        this.components = [];\n        this.entityUid = newEntityUid;\n    }\n}\nclass CommandChanges {\n    constructor() {\n        this.removedCommands = [];\n        this.addedCommands = [];\n    }\n    clearChanges() {\n        this.removedCommands = [];\n        this.addedCommands = [];\n    }\n}\nclass CurrentExecutingCommand {\n    constructor() {\n        this.command = null;\n    }\n}\nclass System {\n    constructor(newResources, newCurrentExecutingCommand) {\n        this.accessedComponent = null;\n        this.resources = newResources;\n        this.currentExecutingCommand = newCurrentExecutingCommand;\n        this.commandChangesBuffer = new CommandChanges();\n        this.commands = [];\n        this.components = [];\n        for (let _ = 0; _ < _components__WEBPACK_IMPORTED_MODULE_0__.NUMBER_OF_COMPONENTS; _++) {\n            this.components.push([]);\n        }\n    }\n    removeCommand(command) {\n        this.commandChangesBuffer.removedCommands.push(command);\n    }\n    addCommand(command) {\n        this.commandChangesBuffer.addedCommands.push(command);\n    }\n    addComponent(component) {\n        this.components[component.componentType].push(this.createProxy(component));\n        this\n            .resources\n            .componentChanges\n            .addedComponentsBuffer[component.componentType]\n            .push(component);\n    }\n    removeComponent(component) {\n        for (let [cI, c] of this.components[component.componentType].entries()) {\n            if (c.componentUid == component.componentUid) {\n                this\n                    .resources\n                    .componentChanges\n                    .removedComponentsBuffer[component.componentType]\n                    .push(component);\n                this.components.splice(cI, 1);\n            }\n        }\n    }\n    createProxy(obj) {\n        let outer = this;\n        let handler = {\n            set(obj, prop, value) {\n                if (\"componentUid\" in obj) {\n                    outer.accessedComponent = obj;\n                }\n                let isAlreadyChanged = false;\n                for (let cC of outer\n                    .resources\n                    .componentChanges\n                    .changedComponentsBuffer[outer.accessedComponent.componentType]) {\n                    if (cC.componentUid == outer.accessedComponent.componentUid) {\n                        isAlreadyChanged = true;\n                    }\n                }\n                if (!isAlreadyChanged) {\n                    outer\n                        .resources\n                        .componentChanges\n                        .changedComponentsBuffer[outer.accessedComponent.componentType]\n                        .push(outer.accessedComponent);\n                }\n                obj[prop] = value;\n                return true;\n            },\n            get(obj, prop) {\n                if (\"componentUid\" in obj) {\n                    outer.accessedComponent = obj;\n                }\n                if (typeof obj[prop] == \"object\") {\n                    return outer.createProxy(obj[prop]);\n                }\n                return obj[prop];\n            },\n        };\n        return new Proxy(obj, handler);\n    }\n    find(query) {\n        // Comment on production !TODO\n        if (query[1].length == 0) {\n            console.log(\"no components expecified\");\n            return [];\n        }\n        if (query[2] == By.EntityType && query[3] == undefined ||\n            query[2] == By.ComponentId && typeof query[3] != \"number\" ||\n            query[2] == By.EntityId && typeof query[3] != \"number\") {\n            console.log('argument does not match \"By\" enum');\n            return [];\n        }\n        if (query[0] == Get.All && query[2] == By.ComponentId) {\n            console.log('cannot get all by component id');\n            return [];\n        }\n        if (query[0] == Get.One && query[2] == By.EntityType) {\n            console.log(\"query Get.One By.EntityType is not supported yet\");\n            return [];\n        }\n        if (query[0] == Get.One && query[2] == By.Any) {\n            console.log(\"query Get.One By.Any is not supported yet\");\n            return [];\n        }\n        // Comment on production !TODO\n        let collected = [];\n        for (let i = 0; i < query[1].length; i++) {\n            collected.push([]);\n        }\n        for (let [qci, qc] of query[1].entries()) {\n            if (query[0] == Get.One) {\n                if (query[2] == By.ComponentId) {\n                    for (let c of this.components[qc]) {\n                        if (query[3] == c.componentUid) {\n                            collected[qci].push(c);\n                            break;\n                        }\n                    }\n                    continue;\n                }\n                else if (query[2] == By.EntityId) {\n                    for (let c of this.components[qc]) {\n                        if (query[3] == c.entityUid) {\n                            collected[qci].push(c);\n                            break;\n                        }\n                    }\n                    continue;\n                }\n            }\n            else if (query[0] == Get.All) {\n                if (query[2] == By.EntityId) {\n                    for (let c of this.components[qc]) {\n                        if (query[3] == c.entityUid) {\n                            collected[qci].push(c);\n                        }\n                    }\n                    continue;\n                }\n                else if (query[2] == By.Any) {\n                    for (let c of this.components[qc]) {\n                        collected[qci].push(c);\n                    }\n                    continue;\n                }\n                //                else if (query[2] == By.EntityType) {\n                //                    for (let e of this.components[Comps.Components.EntityType]) {\n                //                        if (query[3] == e.entityType) {\n                //                            for (let c of this.components[qc]) {\n                //                                if (e.entityUid == c.ownerUid) {\n                //                                    collected[qci].push(c)\n                //                                }\n                //                            }\n                //                            break;\n                //                        }\n                //                    }\n                //                    continue;\n                //                }\n            }\n        }\n        return collected;\n    }\n    updateCommands() {\n        for (let aC of this.commandChangesBuffer.addedCommands) {\n            let isFound = false;\n            for (let c of this.commands) {\n                if (aC == c.commandType) {\n                    console.log(\"$ command already exists\");\n                    isFound = true;\n                }\n            }\n            if (isFound) {\n                continue;\n            }\n            let command = _commands__WEBPACK_IMPORTED_MODULE_1__.getInstanceFromEnum(aC);\n            let isInserted = false;\n            for (let [cI, c] of this.commands.entries()) {\n                if (aC < c.commandType) {\n                    isInserted = true;\n                    this.commands.splice(cI, 0, command);\n                    break;\n                }\n            }\n            if (!isInserted) {\n                this.commands.push(command);\n            }\n        }\n        for (let rC of this.commandChangesBuffer.removedCommands) {\n            let isFound = false;\n            for (let cI = this.commands.length - 1; cI >= 0; cI--) {\n                if (rC == this.commands[cI].commandType) {\n                    isFound = true;\n                    this.commands.splice(cI, 1);\n                    this.resources.commandState.removeCommandStates(rC);\n                }\n            }\n            if (!isFound) {\n                console.log(\"$ command was not found\");\n            }\n        }\n    }\n    run() {\n        //    console.log(\"commands\", this.commands)\n        //console.log(\"components\", this.components)\n        for (let c of this.commands) {\n            this.currentExecutingCommand.command = c.commandType;\n            c.run(this, this.resources);\n        }\n        this.updateCommands();\n        this.commandChangesBuffer.clearChanges();\n        this.resources.componentChanges.cycleChanges();\n    }\n}\n\n\n//# sourceURL=webpack://strworld/./src/ecs/ecs.ts?");

/***/ }),

/***/ "./src/ecs/resources.ts":
/*!******************************!*\
  !*** ./src/ecs/resources.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommandStateResource: () => (/* binding */ CommandStateResource),\n/* harmony export */   ComponentChanges: () => (/* binding */ ComponentChanges),\n/* harmony export */   DOMStateResouce: () => (/* binding */ DOMStateResouce),\n/* harmony export */   DeltaResource: () => (/* binding */ DeltaResource),\n/* harmony export */   InputResource: () => (/* binding */ InputResource),\n/* harmony export */   IsFirstTimeResource: () => (/* binding */ IsFirstTimeResource),\n/* harmony export */   OptionsResource: () => (/* binding */ OptionsResource),\n/* harmony export */   PositionGridResource: () => (/* binding */ PositionGridResource),\n/* harmony export */   Resources: () => (/* binding */ Resources)\n/* harmony export */ });\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components */ \"./src/ecs/components.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./src/utils.ts\");\n\n\nclass Resources {\n    constructor(newCurrentExecutingCommand) {\n        this.domState = new DOMStateResouce();\n        this.delta = new DeltaResource(newCurrentExecutingCommand);\n        this.isFirstTime = new IsFirstTimeResource(newCurrentExecutingCommand);\n        this.commandState = new CommandStateResource(newCurrentExecutingCommand);\n        this.componentChanges = new ComponentChanges();\n        this.input = new InputResource();\n        this.options = new OptionsResource();\n        this.positionGrid = new PositionGridResource();\n    }\n}\nclass LastTimeCommandWasRun {\n    constructor(newTime, newCommand) {\n        this.time = newTime;\n        this.command = newCommand;\n    }\n}\nclass DeltaResource {\n    constructor(newCurrentExecutingCommand) {\n        this.currentExecutingCommand = newCurrentExecutingCommand;\n        this.lastTimeCommandsWereRun = [];\n    }\n    get() {\n        for (let d of this.lastTimeCommandsWereRun) {\n            if (d.command == this.currentExecutingCommand.command) {\n                let oldTime = d.time;\n                d.time = performance.now();\n                return performance.now() - oldTime;\n            }\n        }\n        this.lastTimeCommandsWereRun.push(new LastTimeCommandWasRun(performance.now(), this.currentExecutingCommand.command));\n        return null;\n    }\n}\nclass CommandStateResource {\n    constructor(newCurrentExecutingCommand) {\n        this.currentExecutingCommand = newCurrentExecutingCommand;\n        this.state = new Map();\n    }\n    removeCommandStates(command) {\n        for (let [k, _] of this.state) {\n            if (k[1] == command) {\n                this.state.delete(k);\n            }\n        }\n    }\n    set(key, value) {\n        this.state.set([key, this.currentExecutingCommand.command], value);\n    }\n    get(key) {\n        console.log(this.state);\n        let value = this.state.get([key, this.currentExecutingCommand.command]);\n        if (value == undefined) {\n            return undefined;\n        }\n        else {\n            return value[1];\n        }\n    }\n}\nclass IsFirstTimeResource {\n    constructor(newCurrentExecutingCommand) {\n        this.currentExecutingCommand = newCurrentExecutingCommand;\n        this.commandsCheckedFirstTime = [];\n    }\n    get() {\n        for (let cFT of this.commandsCheckedFirstTime) {\n            if (cFT == this.currentExecutingCommand.command) {\n                return false;\n            }\n        }\n        this.commandsCheckedFirstTime.push(this.currentExecutingCommand.command);\n        return true;\n    }\n}\nclass OptionsResource {\n    constructor() {\n        this.isSetNight = undefined;\n        this.isShadowsEnabled = undefined;\n        this.isEnablePhysics = undefined;\n        this.isEnableFreeCamera = undefined;\n    }\n}\nclass DOMStateResouce {\n    constructor() {\n        this.windowWidth = undefined;\n        this.windowHeight = undefined;\n    }\n}\nclass InputResource {\n    constructor() {\n        this.movementDirection = new _utils__WEBPACK_IMPORTED_MODULE_1__.Vector2(0, 0);\n        this.code = undefined;\n    }\n}\nclass ComponentChanges {\n    constructor() {\n        this.baseStructure = [];\n        for (let i = 0; i < _components__WEBPACK_IMPORTED_MODULE_0__.NUMBER_OF_COMPONENTS; i++) {\n            this.baseStructure.push([]);\n        }\n        this.changedComponentsBuffer = structuredClone(this.baseStructure);\n        this.removedComponentsBuffer = structuredClone(this.baseStructure);\n        this.addedComponentsBuffer = structuredClone(this.baseStructure);\n        this.changedComponents = [];\n        this.removedComponents = [];\n        this.addedComponents = [];\n    }\n    cycleChanges() {\n        this.changedComponents = this.changedComponentsBuffer;\n        this.removedComponents = this.removedComponentsBuffer;\n        this.addedComponents = this.addedComponentsBuffer;\n        this.changedComponentsBuffer = structuredClone(this.baseStructure);\n        this.removedComponentsBuffer = structuredClone(this.baseStructure);\n        this.addedComponentsBuffer = structuredClone(this.baseStructure);\n    }\n}\nclass PositionGridResource {\n    constructor() {\n    }\n}\n\n\n//# sourceURL=webpack://strworld/./src/ecs/resources.ts?");

/***/ }),

/***/ "./src/serialization.ts":
/*!******************************!*\
  !*** ./src/serialization.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DOMData: () => (/* binding */ DOMData),\n/* harmony export */   GraphicChanges: () => (/* binding */ GraphicChanges),\n/* harmony export */   Input: () => (/* binding */ Input),\n/* harmony export */   Message: () => (/* binding */ Message),\n/* harmony export */   Messages: () => (/* binding */ Messages),\n/* harmony export */   Options: () => (/* binding */ Options)\n/* harmony export */ });\nclass DOMData {\n    constructor(newWindowWidth, newWindowHeight) {\n        this.windowWidth = newWindowWidth;\n        this.windowHeight = newWindowHeight;\n    }\n}\nclass Options {\n    constructor(newIsShadowsEnabled, newIsSetNight, newIsEnablePhysics, newIsEnableFreeCamera) {\n        this.isShadowsEnabled = newIsShadowsEnabled;\n        this.isSetNight = newIsSetNight;\n        this.isEnablePhysics = newIsEnablePhysics;\n        this.isEnableFreeCamera = newIsEnableFreeCamera;\n    }\n}\n//export class CodeResult {\n//    \n//}\n//export class Code {\n//    submitedCode: string\n//    modifiedCode: string \n//}\nclass Input {\n    constructor(newMovementDirection, newCode) {\n        this.movementDirection = newMovementDirection;\n        this.code = newCode;\n    }\n}\nclass GraphicChanges {\n    constructor() {\n        this.changedComponents = [];\n        this.addedEntitiesUid = [];\n        this.removedEntitiesUid = [];\n    }\n}\nvar Messages;\n(function (Messages) {\n    Messages[Messages[\"Start\"] = 0] = \"Start\";\n    Messages[Messages[\"Input\"] = 1] = \"Input\";\n    Messages[Messages[\"Options\"] = 2] = \"Options\";\n    Messages[Messages[\"GraphicChanges\"] = 3] = \"GraphicChanges\";\n})(Messages || (Messages = {}));\nclass Message {\n    constructor(newMessage, newData = null) {\n        this.message = newMessage;\n        this.data = newData;\n    }\n}\n\n\n//# sourceURL=webpack://strworld/./src/serialization.ts?");

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssetFetchCache: () => (/* binding */ AssetFetchCache),\n/* harmony export */   Vector2: () => (/* binding */ Vector2),\n/* harmony export */   Vector3: () => (/* binding */ Vector3),\n/* harmony export */   crossProduct: () => (/* binding */ crossProduct),\n/* harmony export */   newUid: () => (/* binding */ newUid),\n/* harmony export */   randomNumber: () => (/* binding */ randomNumber),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst randomNumber = (max) => Math.floor(Math.random() * max) + 1;\nconst newUid = () => randomNumber(100000000);\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\nclass AssetFetchCache {\n    static fetch(assetName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let asset = this.cachedAssets.get(assetName);\n            if (asset == undefined) {\n                let fetchedAsset = yield (yield fetch(\"assets/\" + assetName)).blob();\n                this.cachedAssets.set(assetName, fetchedAsset);\n                return fetchedAsset;\n            }\n            return asset;\n        });\n    }\n}\nAssetFetchCache.cachedAssets = new Map();\nclass Vector2 {\n    constructor(newX, newY) {\n        this.x = newX;\n        this.y = newY;\n    }\n}\nclass Vector3 {\n    constructor(newX, newY, newZ) {\n        this.x = newX;\n        this.y = newY;\n        this.z = newZ;\n    }\n}\nfunction crossProduct(a, b) {\n    return new Vector3((a.y * b.z) - (a.z * b.y), (a.z * b.x) - (a.x * b.z), (a.x * b.y) - (a.y * b.x));\n}\n\n\n//# sourceURL=webpack://strworld/./src/utils.ts?");

/***/ }),

/***/ "./src/worker.ts":
/*!***********************!*\
  !*** ./src/worker.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ecs_ecs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ecs/ecs */ \"./src/ecs/ecs.ts\");\n/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serialization */ \"./src/serialization.ts\");\n/* harmony import */ var _ecs_resources__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ecs/resources */ \"./src/ecs/resources.ts\");\n/* harmony import */ var _ecs_commands__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ecs/commands */ \"./src/ecs/commands.ts\");\n\n\n\n\nlet currentExecutingCommand = new _ecs_ecs__WEBPACK_IMPORTED_MODULE_0__.CurrentExecutingCommand();\nlet resources = new _ecs_resources__WEBPACK_IMPORTED_MODULE_2__.Resources(currentExecutingCommand);\nlet system = new _ecs_ecs__WEBPACK_IMPORTED_MODULE_0__.System(resources, currentExecutingCommand);\nonmessage = (data) => {\n    let msg = data.data;\n    switch (msg.message) {\n        case _serialization__WEBPACK_IMPORTED_MODULE_1__.Messages.Start:\n            {\n                let newData = msg.data;\n                resources.domState.windowHeight = newData.windowHeight;\n                resources.domState.windowWidth = newData.windowWidth;\n                system.addCommand(_ecs_commands__WEBPACK_IMPORTED_MODULE_3__.CommandTypes.TheFirst);\n                //            setInterval(system.run.bind(system), 15)\n                setInterval(system.run.bind(system), 1000);\n            }\n            break;\n        case _serialization__WEBPACK_IMPORTED_MODULE_1__.Messages.Input:\n            {\n                let newData = msg.data;\n                resources.input.movementDirection = newData.movementDirection;\n                resources.input.code = newData.code;\n            }\n            break;\n        case _serialization__WEBPACK_IMPORTED_MODULE_1__.Messages.Options:\n            {\n                let newData = msg.data;\n            }\n            break;\n    }\n};\n\n\n//# sourceURL=webpack://strworld/./src/worker.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/worker.ts");
/******/ 	
/******/ })()
;